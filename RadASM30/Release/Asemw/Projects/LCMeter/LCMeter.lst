
ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 1





       MCS-51 Family Macro Assembler   A S E M - 5 1   V 1.3
       =====================================================



	Source File:	LCMeter.a51
	Object File:	LCMeter.hex
	List File:	LCMeter.lst



 Line  I  Addr  Code            Source

    1:
    2:		N      0000	DEBUG		EQU 0
    3:
    4:				$INCLUDE	(LCMeter.inc)
    5: 1			;***********************************************************************
    6: 1			;
    7: 1			; The following values MUST be provided by the user
    8: 1			;
    9: 1			;***********************************************************************
   10: 1			;
   11: 1	N      0024	ARG_STACK	EQU	24H				;ARGUMENT STACK POINTER
   12: 1	N      0025	FORMAT		EQU	25H				;LOCATION OF OUTPUT FORMAT BYTE
   13: 1	B	 31	INTGRC		BIT	26H.1				;BIT SET IF INTEGER ERROR
   14: 1	B	 33	ADD_IN		BIT	26H.3				;DCMPXZ IN BASIC BACKAGE
   15: 1	B	 36	ZSURP		BIT	26H.6				;ZERO SUPRESSION FOR HEX PRINT
   16: 1	N      0027	CONVT		EQU	27H				;String addr TO CONVERT NUMBERS
   17: 1			;
   18: 1			;***********************************************************************
   19: 1			;
   20: 1			; The following equates are used internally
   21: 1			;
   22: 1			;***********************************************************************
   23: 1			;
   24: 1	N      0006	FP_NUMBER_SIZE	EQU	6
   25: 1	N      0004	DIGIT		EQU	4
   26: 1	N      0000	R0B0		EQU	0
   27: 1	N      0001	R1B0		EQU	1
   28: 1	N      0000	UNDERFLOW	EQU	0
   29: 1	N      0001	OVERFLOW	EQU	1
   30: 1	N      0002	ZERO		EQU	2
   31: 1	N      0003	ZERO_DIVIDE	EQU	3
   32: 1			;
   33: 1			;***********************************************************************
   34: 1				;**************************************************************
   35: 1				;
   36: 1				; The following internal locations are used by the math pack
   37: 1				; ordering is important and the FP_DIGITS must be bit
   38: 1				; addressable
   39: 1				;
   40: 1				;***************************************************************
   41: 1				;
   42: 1	N      0028	FP_STATUS	EQU	28H				;28 NOT used data pointer me
   43: 1	N      0029	FP_TEMP		EQU	FP_STATUS+1			;29 NOT USED

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 2



 Line  I  Addr  Code            Source

   44: 1	N      002A	FP_CARRY	EQU	FP_STATUS+2			;2A USED FOR BITS
   45: 1	N      002B	FP_DIG12	EQU	FP_CARRY+1			;2B
   46: 1	N      002C	FP_DIG34	EQU	FP_CARRY+2			;2C
   47: 1	N      002D	FP_DIG56	EQU	FP_CARRY+3			;2D
   48: 1	N      002E	FP_DIG78	EQU	FP_CARRY+4			;2E
   49: 1	N      002F	FP_SIGN		EQU	FP_CARRY+5			;2F
   50: 1	N      0030	FP_EXP		EQU	FP_CARRY+6			;30
   51: 1	B	 78	MSIGN		BIT	FP_SIGN.0			;2F.0
   52: 1	B	 50	XSIGN		BIT	FP_CARRY.0			;2A.0
   53: 1	B	 51	FOUND_RADIX	BIT	FP_CARRY.1			;2A.1
   54: 1	B	 52	FIRST_RADIX	BIT	FP_CARRY.2			;2A.2
   55: 1	B	 53	DONE_LOAD	BIT	FP_CARRY.3			;2A.3
   56: 1	N      002B	FP_NIB1		EQU	FP_DIG12			;2B
   57: 1	N      002C	FP_NIB2		EQU	FP_NIB1+1			;2C
   58: 1	N      002D	FP_NIB3		EQU	FP_NIB1+2			;2D
   59: 1	N      002E	FP_NIB4		EQU	FP_NIB1+3			;2E
   60: 1	N      002F	FP_NIB5		EQU	FP_NIB1+4			;2F
   61: 1	N      0030	FP_NIB6		EQU	FP_NIB1+5			;30
   62: 1	N      0031	FP_NIB7		EQU	FP_NIB1+6			;31
   63: 1	N      0032	FP_NIB8		EQU	FP_NIB1+7			;32
   64: 1	N      0033	FP_ACCX		EQU	FP_NIB1+8			;33
   65: 1	N      0034	FP_ACCC		EQU	FP_NIB1+9			;34
   66: 1	N      0035	FP_ACC1		EQU	FP_NIB1+10			;35
   67: 1	N      0036	FP_ACC2		EQU	FP_NIB1+11			;36
   68: 1	N      0037	FP_ACC3		EQU	FP_NIB1+12			;37
   69: 1	N      0038	FP_ACC4		EQU	FP_NIB1+13			;38
   70: 1	N      0039	FP_ACC5		EQU	FP_NIB1+14			;39
   71: 1	N      003A	FP_ACC6		EQU	FP_NIB1+15			;3A
   72: 1	N      003B	FP_ACC7		EQU	FP_NIB1+16			;3B
   73: 1	N      003C	FP_ACC8		EQU	FP_NIB1+17			;3C
   74: 1	N      003D	FP_ACCS		EQU	FP_NIB1+18			;3D
   75: 1
   76: 1	N      0040	LCDLINE		EQU	40h				;16 Bytes
   77: 1	N      0050	FPCHR_OUT	EQU	50h				;Holds addrss to next byte during FP number
       1			convertion
   78: 1	N      0051	MODE		EQU	51h				;Current mode (0-4)
   79: 1	N      0052	TF0OVF		EQU	52h				;Timer 0 overflow counter
   80: 1	N      0065	LCF1		EQU	60H+FP_NUMBER_SIZE-1		;LC Meter F1
   81: 1	N      006D	LCF2		EQU	68h+FP_NUMBER_SIZE-1		;LC Meter F2
   82: 1	N      0075	LCF3		EQU	70h+FP_NUMBER_SIZE-1		;LC Meter F3
   83: 1	N      007D	LCCA		EQU	78h+FP_NUMBER_SIZE-1		;((F1/F2)^2)-1
   84: 1	N      0085	LCCB		EQU	80h+FP_NUMBER_SIZE-1		;((1/2*Pi*F1)^2)*LCCA
   85: 1	N      008D	LCCT		EQU	88h+FP_NUMBER_SIZE-1		;Temp
   86: 1	N      0090	MCUSTACK	EQU	90h
   87: 1	N      00FF	FPSTACK		EQU	0FFh
   88: 1
   89: 1	N      0004	MODEMAX		EQU	4
   90: 1
   91:
   92:				;RESET:***********************************************
   93:		N      0000			ORG	0000h
   94:	  0000	01 BB				AJMP	START0
   95:				;IE0IRQ:**********************************************
   96:		N      0003			ORG	0003h
   97:	  0003	01 80				AJMP	IE0IRQ
   98:				;------------------------------------------------------------------

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 3



 Line  I  Addr  Code            Source

   99:
  100:		N      0080			ORG	0080h
  101:	  0080	05 51		IE0IRQ:		INC	MODE
  102:	  0082	11 96				ACALL	SETMODE
  103:	  0084	11 88				ACALL	DEBOUNCEINT0
  104:	  0086	01 E0				AJMP	START
  105:
  106:	  0088	7E 00		DEBOUNCEINT0:	MOV	R6,#00h
  107:	  008A	7F 00				MOV	R7,#00h
  108:	  008C	30 B2 F9	DEBOUNCEINT01:	JNB	P3.2,DEBOUNCEINT0
  109:	  008F	DE FB				DJNZ	R6,DEBOUNCEINT01
  110:	  0091	DF F9				DJNZ	R7,DEBOUNCEINT01
  111:	  0093	C2 89				CLR	IE0
  112:	  0095	32				RETI
  113:
  114:	  0096	E5 51		SETMODE:	MOV	A,MODE
  115:	  0098	B4 05 01			CJNE	A,#MODEMAX+1,SETMODE1
  116:	  009B	E4				CLR	A
  117:	  009C	F5 51		SETMODE1:	MOV	MODE,A
  118:	  009E	FF				MOV	R7,A
  119:	  009F	90 0E 10			MOV	DPTR,#MODE0
  120:	  00A2	DF 03				DJNZ	R7,SETMODE2
  121:	  00A4	90 0E 1A			MOV	DPTR,#MODE1
  122:	  00A7	DF 03		SETMODE2:	DJNZ	R7,SETMODE3
  123:	  00A9	90 0E 22			MOV	DPTR,#MODE2
  124:	  00AC	DF 03		SETMODE3:	DJNZ	R7,SETMODE4
  125:	  00AE	90 0E 2A			MOV	DPTR,#MODE3
  126:	  00B1	DF 03		SETMODE4:	DJNZ	R7,SETMODE5
  127:	  00B3	90 0E 34			MOV	DPTR,#MODE4
  128:	  00B6	91 71		SETMODE5:	ACALL	LCDCLEAR
  129:	  00B8	91 88				ACALL	PRNTCDPTRLCD
  130:	  00BA	22				RET
  131:
  132:	  00BB	E4		START0:		CLR	A
  133:	  00BC	C2 94				CLR	P1.4				;L/C
  134:	  00BE	C2 95				CLR	P1.5				;CAL
  135:	  00C0	F5 A8				MOV	IE,A				;Disable all interrupts
  136:	  00C2	F8				MOV	R0,A
  137:	  00C3	F6		START01:	MOV	@R0,A				;Clear the ram
  138:	  00C4	D8 FD				DJNZ	R0,START01
  139:	  00C6	75 81 90			MOV	SP,#MCUSTACK			;Init stack pointer.
  140:	  00C9	D2 A8				SETB	EX0				;Enable INT0
  141:	  00CB	D2 AF				SETB	EA				;Enable interrupts
  142:	  00CD	12 08 00			LCALL	FLOATING_INIT
  143:	  00D0	71 52				ACALL	WAITASEC
  144:	  00D2	91 92				ACALL	LCDINIT
  145:	  00D4	E4				CLR	A
  146:	  00D5	91 7C				ACALL	LCDSETADR
  147:	  00D7	90 0E 43			MOV	DPTR,#WELCOME
  148:	  00DA	91 88				ACALL	PRNTCDPTRLCD
  149:	  00DC	71 52				ACALL	WAITASEC
  150:	  00DE	11 96		START02:	ACALL	SETMODE
  151:	  00E0	75 81 90	START:		MOV	SP,#MCUSTACK			;Init stack pointer.
  152:	  00E3	91 AB				ACALL	LCDCLEARBUFF
  153:	  00E5	AF 51				MOV	R7,MODE
  154:	  00E7	DF 04				DJNZ	R7,START1

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 4



 Line  I  Addr  Code            Source

  155:						;C Meter
  156:	  00E9	31 F2				ACALL	CMeter
  157:	  00EB	80 F3				SJMP	START
  158:	  00ED	DF 04		START1:		DJNZ	R7,START2
  159:						;L Meter
  160:	  00EF	51 5D				ACALL	LMeter
  161:	  00F1	80 ED				SJMP	START
  162:	  00F3	DF 06		START2:		DJNZ	R7,START3
  163:						;30MHz
  164:	  00F5	74 01				MOV	A,#01h				;CH1, 30MHz
  165:	  00F7	31 0A				ACALL	FREQUENCY
  166:	  00F9	80 E5				SJMP	START
  167:	  00FB	DF 06		START3:		DJNZ	R7,START4
  168:						;1GHz
  169:	  00FD	74 02				MOV	A,#02h				;CH2, 1GHz
  170:	  00FF	31 0A				ACALL	FREQUENCY
  171:	  0101	80 DD				SJMP	START
  172:	  0103			START4:		;Calibrate
  173:	  0103	31 64				ACALL	LCMETERINIT
  174:	  0105	75 51 01			MOV	MODE,#01h			;C Meter
  175:	  0108	80 D4				SJMP	START02
  176:
  177:	  010A	C2 94		FREQUENCY:	CLR	P1.4				;C
  178:	  010C	C2 95				CLR	P1.5				;F1
  179:	  010E	71 86				ACALL	FRQCOUNT
  180:	  0110	78 44				MOV	R0,#LCDLINE+4			;Decimal buffer
  181:	  0112	51 D1		FREQUENCY1:	ACALL	BIN2DEC
  182:	  0114	FF				MOV	R7,A				;Number of digits
  183:	  0115	71 E1				ACALL	FRQFORMAT
  184:	  0117	74 40				MOV	A,#40h				;Output result
  185:	  0119	91 7C				ACALL	LCDSETADR
  186:	  011B	78 40				MOV	R0,#LCDLINE
  187:	  011D	7F 10				MOV	R7,#10h
  188:	  011F	91 81				ACALL	LCDPRINTSTR
  189:	  0121	22				RET
  190:
  191:				;------------------------------------------------------------------
  192:				;Get LC meter frquency
  193:				;IN:	R1 points to FP buffer
  194:				;OUT:	Nothing
  195:				;------------------------------------------------------------------
  196:	  0122	C0 01		LCMETERGETFRQ:	PUSH	01h				;Save R1
  197:	  0124	91 AB				ACALL	LCDCLEARBUFF
  198:	  0126	74 FA				MOV	A,#250
  199:	  0128	71 7F				ACALL	WAIT				;Wait 25ms for relay to kick in / out
  200:	  012A	74 FA				MOV	A,#250
  201:	  012C	71 7F				ACALL	WAIT				;Wait 25ms for relay to kick in / out
  202:	  012E	74 00				MOV	A,#00h				;CH0, LC Meter
  203:	  0130	71 86				ACALL	FRQCOUNT
  204:	  0132	78 40				MOV	R0,#LCDLINE
  205:	  0134	51 D1				ACALL	BIN2DEC
  206:	  0136	78 4A				MOV	R0,#LCDLINE+10
  207:	  0138	76 0D				MOV	@R0,#0Dh
  208:	  013A	A9 27				MOV	R1,CONVT
  209:	  013C	12 0B 18			LCALL	FLOATING_POINT_INPUT
  210:	  013F	D0 01				POP	01h				;Restore R1

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 5



 Line  I  Addr  Code            Source

  211:	  0141	12 0D AB			LCALL	POPAS				;POP ARGUMENT TO R1
  212:	  0144	22				RET
  213:
  214:				;------------------------------------------------------------------
  215:				;Calculate X=((Fa/Fb)^2)-1
  216:				;IN:	Fa=R0, Fb=R1
  217:				;OUT:	Nothing
  218:				;------------------------------------------------------------------
  219:	  0145	C0 01		LCCALC:		PUSH	01h
  220:	  0147	12 0D AF			LCALL	PUSHAS				; PUSH R0 TO ARGUMENT
  221:	  014A	D0 00				POP	00h
  222:	  014C	12 0D AF			LCALL	PUSHAS				; PUSH R0 TO ARGUMENT
  223:	  014F	12 09 2F			LCALL	FLOATING_DIV
  224:	  0152	A8 24				MOV	R0,ARG_STACK
  225:	  0154	12 0D AF			LCALL	PUSHAS				; PUSH R0 TO ARGUMENT
  226:	  0157	12 08 FA			LCALL	FLOATING_MUL
  227:	  015A	90 0E 79			MOV	DPTR,#FPONE
  228:	  015D	12 0D F6			LCALL	PUSHC				; PUSH ARG IN DPTR TO STACK
  229:	  0160	12 08 0F			LCALL	FLOATING_SUB
  230:	  0163	22				RET
  231:
  232:				;------------------------------------------------------------------
  233:				;Get LC meter frquency F1 and F2. Calculatr LCCA=((F1/F2)^2)-1 and LCCB=LCCA*((1/(2*Pi*F1))^2)*(1/Cc
				al)
  234:				;IN:	Nothing
  235:				;OUT:	Nothing
  236:				;------------------------------------------------------------------
  237:	  0164	C2 94		LCMETERINIT:	CLR	P1.4				;C
  238:	  0166	C2 95				CLR	P1.5				;F1
  239:	  0168	7F 05				MOV	R7,#05h
  240:	  016A	C0 07		LCMETERINIT1:	PUSH	07h
  241:	  016C	71 52				ACALL	WAITASEC
  242:	  016E	74 2E				MOV	A,#'.'
  243:	  0170	91 5D				ACALL	LCDCHROUT
  244:	  0172	D0 07				POP	07h
  245:	  0174	DF F4				DJNZ	R7,LCMETERINIT1
  246:	  0176	C2 95				CLR	P1.5				;F1
  247:	  0178	79 65				MOV	R1,#LCF1
  248:	  017A	31 22				ACALL	LCMETERGETFRQ			;Get F1
  249:	  017C	74 40				MOV	A,#40h				;Output result
  250:	  017E	91 7C				ACALL	LCDSETADR
  251:	  0180	78 40				MOV	R0,#LCDLINE
  252:	  0182	7F 10				MOV	R7,#10h
  253:	  0184	91 81				ACALL	LCDPRINTSTR
  254:	  0186	71 52				ACALL	WAITASEC
  255:	  0188	D2 95				SETB	P1.5				;F2
  256:	  018A	79 6D				MOV	R1,#LCF2
  257:	  018C	31 22				ACALL	LCMETERGETFRQ			;Get F2
  258:	  018E	C2 95				CLR	P1.5				;F1
  259:	  0190	74 40				MOV	A,#40h				;Output result
  260:	  0192	91 7C				ACALL	LCDSETADR
  261:	  0194	78 40				MOV	R0,#LCDLINE
  262:	  0196	7F 10				MOV	R7,#10h
  263:	  0198	91 81				ACALL	LCDPRINTSTR
  264:	  019A	71 52				ACALL	WAITASEC
  265:	  019C	71 52				ACALL	WAITASEC

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 6



 Line  I  Addr  Code            Source

  266:						;Calculate LCCA=((F1/F2)^2)-1
  267:	  019E	78 65				MOV	R0,#LCF1
  268:	  01A0	79 6D				MOV	R1,#LCF2
  269:	  01A2	31 45				ACALL	LCCALC
  270:						;Save result to LCCA
  271:	  01A4	79 7D				MOV	R1,#LCCA
  272:	  01A6	12 0D AB			LCALL	POPAS				;POP ARGUMENT TO R1
  273:						;Calculate A=(1/(2*Pi*F1))^2
  274:	  01A9	90 0E 7F			MOV	DPTR,#FPTWO
  275:	  01AC	12 0D F6			LCALL	PUSHC				;PUSH ARG IN DPTR TO STACK
  276:	  01AF	90 0E 85			MOV	DPTR,#FPPI
  277:	  01B2	12 0D F6			LCALL	PUSHC				;PUSH ARG IN DPTR TO STACK
  278:	  01B5	12 08 FA			LCALL	FLOATING_MUL
  279:	  01B8	78 65				MOV	R0,#LCF1
  280:	  01BA	12 0D AF			LCALL	PUSHAS				;PUSH R0 TO ARGUMENT
  281:	  01BD	12 08 FA			LCALL	FLOATING_MUL
  282:	  01C0	79 8D				MOV	R1,#LCCT
  283:	  01C2	12 0D AB			LCALL	POPAS				;POP ARGUMENT TO R1
  284:	  01C5	90 0E 79			MOV	DPTR,#FPONE
  285:	  01C8	12 0D F6			LCALL	PUSHC				;PUSH ARG IN DPTR TO STACK
  286:	  01CB	78 8D				MOV	R0,#LCCT
  287:	  01CD	12 0D AF			LCALL	PUSHAS				;PUSH R0 TO ARGUMENT
  288:	  01D0	12 09 2F			LCALL	FLOATING_DIV
  289:	  01D3	A8 24				MOV	R0,ARG_STACK
  290:	  01D5	12 0D AF			LCALL	PUSHAS				;PUSH R0 TO ARGUMENT
  291:	  01D8	12 08 FA			LCALL	FLOATING_MUL
  292:						;Calculate LCCB=A*LCCA*(1/Ccal)
  293:	  01DB	78 7D				MOV	R0,#LCCA
  294:	  01DD	12 0D AF			LCALL	PUSHAS				;PUSH R0 TO ARGUMENT
  295:	  01E0	12 08 FA			LCALL	FLOATING_MUL
  296:	  01E3	90 0E 8B			MOV	DPTR,#FPCCAL
  297:	  01E6	12 0D F6			LCALL	PUSHC				;PUSH ARG IN DPTR TO STACK
  298:	  01E9	12 09 2F			LCALL	FLOATING_DIV
  299:						;Save result to LCCB
  300:	  01EC	79 85				MOV	R1,#LCCB
  301:	  01EE	12 0D AB			LCALL	POPAS				;POP ARGUMENT TO R1
  302:	  01F1	22				RET
  303:
  304:				;------------------------------------------------------------------
  305:				;Capacitance meter: Cx=((((F1/F3)^2)-1)/(((F1/F2)^2)-1))*Ccal
  306:				;IN:	Nothing
  307:				;OUT:	Nothing
  308:				;------------------------------------------------------------------
  309:	  01F2	C2 94		CMETER:		CLR	P1.4				;C
  310:	  01F4	C2 95				CLR	P1.5				;F1
  311:	  01F6	79 75				MOV	R1,#LCF3
  312:	  01F8	31 22				ACALL	LCMETERGETFRQ			;Get F3
  313:						;Calculate A=((F1/F3)^2)-1
  314:	  01FA	78 65				MOV	R0,#LCF1
  315:	  01FC	79 75				MOV	R1,#LCF3
  316:	  01FE	31 45				ACALL	LCCALC
  317:						;Calculate B=A/LCCA
  318:	  0200	78 7D				MOV	R0,#LCCA
  319:	  0202	12 0D AF			LCALL	PUSHAS				;PUSH R0 TO ARGUMENT
  320:	  0205	12 09 2F			LCALL	FLOATING_DIV
  321:						;Calculate Cx=A/B*Ccal

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 7



 Line  I  Addr  Code            Source

  322:	  0208	90 0E 8B			MOV	DPTR,#FPCCAL
  323:	  020B	12 0D F6			LCALL	PUSHC				;PUSH ARG IN DPTR TO STACK
  324:	  020E	12 08 FA			LCALL	FLOATING_MUL
  325:	  0211	A8 24				MOV	R0,ARG_STACK
  326:	  0213	18				DEC	R0
  327:	  0214	E6				MOV	A,@R0
  328:	  0215	08				INC	R0
  329:	  0216	60 02				JZ	CMETER1
  330:	  0218	E4				CLR	A
  331:	  0219	F6				MOV	@R0,A
  332:	  021A	E6		CMETER1:	MOV	A,@R0
  333:	  021B	75 4E 70			MOV	LCDLINE+14,#'p'
  334:	  021E	90 0E 91			MOV	DPTR,#FPpF
  335:	  0221	60 0B				JZ	CMETER2
  336:	  0223	B4 78 00			CJNE	A,#78h,$+3
  337:	  0226	40 06				JC	CMETER2
  338:	  0228	75 4E 6E			MOV	LCDLINE+14,#'n'
  339:	  022B	90 0E 97			MOV	DPTR,#FPnF
  340:	  022E	12 0D F6	CMETER2:	LCALL	PUSHC				;PUSH ARG IN DPTR TO STACK
  341:	  0231	12 08 FA			LCALL	FLOATING_MUL
  342:	  0234	75 40 43			MOV	LCDLINE,#'C'
  343:	  0237	75 41 20			MOV	LCDLINE+1,#' '
  344:	  023A	75 42 3D			MOV	LCDLINE+2,#'='
  345:	  023D	75 43 20			MOV	LCDLINE+3,#' '
  346:	  0240	75 4F 46			MOV	LCDLINE+15,#'F'
  347:	  0243	75 50 44			MOV	FPCHR_OUT,#LCDLINE+4
  348:	  0246	75 25 53			MOV	FORMAT,#53h
  349:	  0249	E5 24				MOV	A,ARG_STACK
  350:	  024B	C3				CLR	C
  351:	  024C	94 05				SUBB	A,#05h
  352:	  024E	F8				MOV	R0,A
  353:	  024F	12 0B C6			LCALL	FLOATING_POINT_OUTPUT
  354:	  0252	74 40				MOV	A,#40h				;Output result
  355:	  0254	91 7C				ACALL	LCDSETADR
  356:	  0256	78 40				MOV	R0,#LCDLINE
  357:	  0258	7F 10				MOV	R7,#10h
  358:	  025A	91 81				ACALL	LCDPRINTSTR
  359:	  025C	22				RET
  360:
  361:				;------------------------------------------------------------------
  362:				;Inductance meter Lx=((F1/F3)^2)-1)*((F1/F2)^2)-1)*((1/(2*Pi*F1))^2)*(1/Ccal)
  363:				;IN:	Nothing
  364:				;OUT:	Nothing
  365:				;------------------------------------------------------------------
  366:	  025D	D2 94		LMETER:		SETB	P1.4				;L
  367:	  025F	C2 95				CLR	P1.5				;F1
  368:	  0261	79 75				MOV	R1,#LCF3
  369:	  0263	31 22				ACALL	LCMETERGETFRQ			;Get F3
  370:						;Calculate A=((F1/F3)^2)-1
  371:	  0265	78 65				MOV	R0,#LCF1
  372:	  0267	79 75				MOV	R1,#LCF3
  373:	  0269	31 45				ACALL	LCCALC
  374:						;Calculate B=A*LCCB
  375:	  026B	78 85				MOV	R0,#LCCB
  376:	  026D	12 0D AF			LCALL	PUSHAS				;PUSH R2:R0 TO ARGUMENT
  377:	  0270	12 08 FA			LCALL	FLOATING_MUL

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 8



 Line  I  Addr  Code            Source

  378:	  0273	A8 24				MOV	R0,ARG_STACK
  379:	  0275	18				DEC	R0
  380:	  0276	E6				MOV	A,@R0
  381:	  0277	08				INC	R0
  382:	  0278	60 02				JZ	LMETER1
  383:	  027A	E4				CLR	A
  384:	  027B	F6				MOV	@R0,A
  385:	  027C	E6		LMETER1:	MOV	A,@R0
  386:	  027D	B4 80 00			CJNE	A,#80h,$+3
  387:	  0280	40 02				JC	LMETER2
  388:	  0282	E4				CLR	A
  389:	  0283	F6				MOV	@R0,A
  390:	  0284	75 4E 6E	LMETER2:	MOV	LCDLINE+14,#'n'
  391:	  0287	90 0E 97			MOV	DPTR,#FPnF
  392:	  028A	60 16				JZ	LMETER3
  393:	  028C	B4 7B 00			CJNE	A,#7Bh,$+3
  394:	  028F	40 11				JC	LMETER3
  395:	  0291	75 4E 75			MOV	LCDLINE+14,#'u'
  396:	  0294	90 0E 9D			MOV	DPTR,#FPuH
  397:	  0297	B4 7E 00			CJNE	A,#7Eh,$+3
  398:	  029A	40 06				JC	LMETER3
  399:	  029C	75 4E 6D			MOV	LCDLINE+14,#'m'
  400:	  029F	90 0E A3			MOV	DPTR,#FPmH
  401:	  02A2	12 0D F6	LMETER3:	LCALL	PUSHC				;PUSH ARG IN DPTR TO STACK
  402:	  02A5	12 08 FA			LCALL	FLOATING_MUL
  403:	  02A8	75 40 4C			MOV	LCDLINE,#'L'
  404:	  02AB	75 41 20			MOV	LCDLINE+1,#' '
  405:	  02AE	75 42 3D			MOV	LCDLINE+2,#'='
  406:	  02B1	75 43 20			MOV	LCDLINE+3,#' '
  407:	  02B4	75 4F 48			MOV	LCDLINE+15,#'H'
  408:	  02B7	75 50 44			MOV	FPCHR_OUT,#LCDLINE+4
  409:	  02BA	75 25 53			MOV	FORMAT,#53h
  410:	  02BD	E5 24				MOV	A,ARG_STACK
  411:	  02BF	C3				CLR	C
  412:	  02C0	94 05				SUBB	A,#05h
  413:	  02C2	F8				MOV	R0,A
  414:	  02C3	12 0B C6			LCALL	FLOATING_POINT_OUTPUT
  415:	  02C6	74 40				MOV	A,#40h				;Output result
  416:	  02C8	91 7C				ACALL	LCDSETADR
  417:	  02CA	78 40				MOV	R0,#LCDLINE
  418:	  02CC	7F 10				MOV	R7,#10h
  419:	  02CE	91 81				ACALL	LCDPRINTSTR
  420:	  02D0	22				RET
  421:
  422:				;------------------------------------------------------------------
  423:				;Binary to decimal converter
  424:				;Converts R7:R6:R5:R4 to decimal pointed to by R0
  425:				;Returns with number of digits in A
  426:				;------------------------------------------------------------------
  427:	  02D1	C0 00		BIN2DEC:	PUSH	00h
  428:	  02D3	90 0E 51			MOV	DPTR,#BINDEC
  429:	  02D6	7A 0A				MOV	R2,#0Ah
  430:	  02D8	7B 2F		BIN2DEC1:	MOV	R3,#2Fh
  431:	  02DA	0B		BIN2DEC2:	INC	R3
  432:	  02DB	51 FA				ACALL	SUBIT
  433:	  02DD	50 FB				JNC	BIN2DEC2

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 9



 Line  I  Addr  Code            Source

  434:	  02DF	71 13				ACALL	ADDIT
  435:	  02E1	EB				MOV	A,R3
  436:	  02E2	F6				MOV	@R0,A
  437:	  02E3	08				INC	R0
  438:	  02E4	A3				INC	DPTR
  439:	  02E5	A3				INC	DPTR
  440:	  02E6	A3				INC	DPTR
  441:	  02E7	A3				INC	DPTR
  442:	  02E8	DA EE				DJNZ	R2,BIN2DEC1
  443:	  02EA	D0 00				POP	00h
  444:						;Remove leading zeroes
  445:	  02EC	7A 09				MOV	R2,#09h
  446:	  02EE	E6		BIN2DEC3:	MOV	A,@R0
  447:	  02EF	B4 30 05			CJNE	A,#30h,BIN2DEC4
  448:	  02F2	76 20				MOV	@R0,#20h
  449:	  02F4	08				INC	R0
  450:	  02F5	DA F7				DJNZ	R2,BIN2DEC3
  451:	  02F7	0A		BIN2DEC4:	INC	R2
  452:	  02F8	EA				MOV	A,R2
  453:	  02F9	22				RET
  454:
  455:	  02FA	E4		SUBIT:		CLR	A
  456:	  02FB	93				MOVC	A,@A+DPTR
  457:	  02FC	CC				XCH	A,R4
  458:	  02FD	C3				CLR	C
  459:	  02FE	9C				SUBB	A,R4
  460:	  02FF	FC				MOV	R4,A
  461:	  0300	74 01				MOV	A,#01h
  462:	  0302	93				MOVC	A,@A+DPTR
  463:	  0303	CD				XCH	A,R5
  464:	  0304	9D				SUBB	A,R5
  465:	  0305	FD				MOV	R5,A
  466:	  0306	74 02				MOV	A,#02h
  467:	  0308	93				MOVC	A,@A+DPTR
  468:	  0309	CE				XCH	A,R6
  469:	  030A	9E				SUBB	A,R6
  470:	  030B	FE				MOV	R6,A
  471:	  030C	74 03				MOV	A,#03h
  472:	  030E	93				MOVC	A,@A+DPTR
  473:	  030F	CF				XCH	A,R7
  474:	  0310	9F				SUBB	A,R7
  475:	  0311	FF				MOV	R7,A
  476:	  0312	22				RET
  477:
  478:	  0313	E4		ADDIT:		CLR	A
  479:	  0314	93				MOVC	A,@A+DPTR
  480:	  0315	2C				ADD	A,R4
  481:	  0316	FC				MOV	R4,A
  482:	  0317	74 01				MOV	A,#01h
  483:	  0319	93				MOVC	A,@A+DPTR
  484:	  031A	3D				ADDC	A,R5
  485:	  031B	FD				MOV	R5,A
  486:	  031C	74 02				MOV	A,#02h
  487:	  031E	93				MOVC	A,@A+DPTR
  488:	  031F	3E				ADDC	A,R6
  489:	  0320	FE				MOV	R6,A

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 10



 Line  I  Addr  Code            Source

  490:	  0321	74 03				MOV	A,#03h
  491:	  0323	93				MOVC	A,@A+DPTR
  492:	  0324	3F				ADDC	A,R7
  493:	  0325	FF				MOV	R7,A
  494:	  0326	22				RET
  495:
  496:				;------------------------------------------------------------------
  497:				;Multiply R7:R6:R5:R4 by 10
  498:				;------------------------------------------------------------------
  499:	  0327	71 2C		INTMUL10:	ACALL	INTMUL5
  500:	  0329	71 45				ACALL	INTMUL2
  501:	  032B	22				RET
  502:
  503:	  032C	EC		INTMUL5:	MOV	A,R4
  504:	  032D	F8				MOV	R0,A
  505:	  032E	ED				MOV	A,R5
  506:	  032F	F9				MOV	R1,A
  507:	  0330	EE				MOV	A,R6
  508:	  0331	FA				MOV	R2,A
  509:	  0332	EF				MOV	A,R7
  510:	  0333	FB				MOV	R3,A
  511:	  0334	71 45				ACALL	INTMUL2
  512:	  0336	71 45				ACALL	INTMUL2
  513:	  0338	EC				MOV	A,R4
  514:	  0339	28				ADD	A,R0
  515:	  033A	FC				MOV	R4,A
  516:	  033B	ED				MOV	A,R5
  517:	  033C	39				ADDC	A,R1
  518:	  033D	FD				MOV	R5,A
  519:	  033E	EE				MOV	A,R6
  520:	  033F	3A				ADDC	A,R2
  521:	  0340	FE				MOV	R6,A
  522:	  0341	EF				MOV	A,R7
  523:	  0342	3B				ADDC	A,R3
  524:	  0343	FF				MOV	R7,A
  525:	  0344	22				RET
  526:
  527:	  0345	EC		INTMUL2:	MOV	A,R4
  528:	  0346	2C				ADD	A,R4
  529:	  0347	FC				MOV	R4,A
  530:	  0348	ED				MOV	A,R5
  531:	  0349	3D				ADDC	A,R5
  532:	  034A	FD				MOV	R5,A
  533:	  034B	EE				MOV	A,R6
  534:	  034C	3E				ADDC	A,R6
  535:	  034D	FE				MOV	R6,A
  536:	  034E	EF				MOV	A,R7
  537:	  034F	3F				ADDC	A,R7
  538:	  0350	FF				MOV	R7,A
  539:	  0351	22				RET
  540:
  541:				;------------------------------------------------------------------
  542:				;Wait loop. Waits 1 second, 2 000 000 cycles on a 24 MHz MCU
  543:				;------------------------------------------------------------------
  544:	  0352	00		WAITASEC:	NOP
  545:	  0353	00				NOP

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 11



 Line  I  Addr  Code            Source

  546:	  0354	7F 60				MOV	R7,#96
  547:	  0356	7E 15				MOV	R6,#21
  548:	  0358	7D 06				MOV	R5,#6
  549:	  035A	10 8D 02	WAITASEC1:	JBC	TCON.5,WAITASEC2
  550:	  035D	80 03				SJMP	WAITASEC3
  551:	  035F	05 52		WAITASEC2:	INC	TF0OVF
  552:	  0361	00				NOP
  553:	  0362	DF F6		WAITASEC3:	DJNZ	R7,WAITASEC1
  554:	  0364	DE F4				DJNZ	R6,WAITASEC1
  555:	  0366	DD F2				DJNZ	R5,WAITASEC1
  556:	  0368	22				RET
  557:
  558:				;------------------------------------------------------------------
  559:				;Wait loop. Waits 0.512 seconds
  560:				;------------------------------------------------------------------
  561:	  0369	7F 2B		WAIT512MS:	MOV	R7,#2Bh
  562:	  036B	7E C9				MOV	R6,#0C9h
  563:	  036D	7D 08				MOV	R5,#08
  564:	  036F	DF FE		WAIT512MS1:	DJNZ	R7,WAIT512MS1
  565:	  0371	DE FC				DJNZ	R6,WAIT512MS1
  566:	  0373	DD FA				DJNZ	R5,WAIT512MS1
  567:	  0375	22				RET
  568:
  569:				;------------------------------------------------------------------
  570:				;Wait functions
  571:				;------------------------------------------------------------------
  572:	  0376	C0 07		WAIT100:	PUSH	07h				;Save R7
  573:	  0378	7F 64				MOV	R7,#64h
  574:	  037A	DF FE		WAIT1001:	DJNZ	R7,WAIT1001			;Wait loop, 100uS
  575:	  037C	D0 07				POP	07h				;Restore R7
  576:	  037E	22				RET
  577:
  578:	  037F	CF		WAIT:		XCH	A,R7
  579:	  0380	71 76		WAIT1:		ACALL	WAIT100
  580:	  0382	DF FC				DJNZ	R7,WAIT1
  581:	  0384	CF				XCH	A,R7
  582:	  0385	22				RET
  583:
  584:				;------------------------------------------------------------------
  585:				;Frequency counter. LSB from 74HC590 read at P0, TL0, TH0 and
  586:				;TF0 bit. 25 bits total, max 33554431 Hz
  587:				;IN:	A Channel (0-3)
  588:				;OUT:	32 Bit result in R7:R6:R5:R4
  589:				;------------------------------------------------------------------
  590:	  0386	C0 E0		FRQCOUNT:	PUSH	ACC
  591:	  0388	D2 93				SETB	P1.3				;DISABLE 74HC590 COUNT
  592:	  038A	C2 92				CLR	P1.2				;RESET 74HC590
  593:	  038C	D2 92				SETB	P1.2
  594:						;Select channel
  595:	  038E	A2 E0				MOV	C,ACC.0
  596:	  0390	92 90				MOV	P1.0,C
  597:	  0392	A2 E1				MOV	C,ACC.1
  598:	  0394	92 91				MOV	P1.1,C
  599:	  0396	75 8A 00			MOV	TL0,#00h
  600:	  0399	75 8C 00			MOV	TH0,#00h
  601:	  039C	E5 89				MOV	A,TMOD

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 12



 Line  I  Addr  Code            Source

  602:	  039E	D2 E0				SETB	ACC.0				;M00
  603:	  03A0	C2 E1				CLR	ACC.1				;M01
  604:	  03A2	D2 E2				SETB	ACC.2				;C/T0#
  605:	  03A4	C2 E3				CLR	ACC.3				;GATE0
  606:	  03A6	F5 89				MOV	TMOD,A
  607:	  03A8	E5 88				MOV	A,TCON
  608:	  03AA	D2 E4				SETB	ACC.4				;TR0
  609:	  03AC	C2 E5				CLR	ACC.5				;TF0
  610:	  03AE	F5 88				MOV	TCON,A
  611:	  03B0	D0 E0				POP	ACC
  612:	  03B2	60 1B				JZ	FRQCOUNT1
  613:	  03B4	14				DEC	A
  614:	  03B5	60 18				JZ	FRQCOUNT1
  615:	  03B7	C2 93				CLR	P1.3				;ENABLR 74HC590 COUNT
  616:	  03B9	71 69				ACALL	WAIT512MS
  617:	  03BB	D2 93				SETB	P1.3				;DISABLE 74HC590 COUNT
  618:	  03BD	AC 80				MOV	R4,P0				;8 BITS FROM 74HC590
  619:	  03BF	AD 8A				MOV	R5,TL0				;8 BITS FROM TL0
  620:	  03C1	AE 8C				MOV	R6,TH0				;8 BITS FROM TH0
  621:	  03C3	E4				CLR	A				;TF0 Is the 25th bit
  622:	  03C4	A2 8D				MOV	C,TF0
  623:	  03C6	33				RLC	A
  624:	  03C7	FF				MOV	R7,A
  625:	  03C8	71 2C				ACALL	INTMUL5
  626:	  03CA	71 27				ACALL	INTMUL10
  627:	  03CC	71 27				ACALL	INTMUL10
  628:	  03CE	22				RET
  629:	  03CF	75 52 00	FRQCOUNT1:	MOV	TF0OVF,#00h
  630:	  03D2	C2 93				CLR	P1.3				;ENABLR 74HC590 COUNT
  631:	  03D4	71 52				ACALL	WAITASEC
  632:	  03D6	D2 93				SETB	P1.3				;DISABLE 74HC590 COUNT
  633:	  03D8	AC 80				MOV	R4,P0				;8 BITS FROM 74HC590
  634:	  03DA	AD 8A				MOV	R5,TL0
  635:	  03DC	AE 8C				MOV	R6,TH0
  636:	  03DE	AF 52				MOV	R7,TF0OVF
  637:	  03E0	22				RET
  638:
  639:				;------------------------------------------------------------------
  640:				;Format frequency conter text line
  641:				;	LCDLINE+4 Decimal result
  642:				;	R7 Number of digits
  643:				;OUT:	Formatted LCDLINE
  644:				;------------------------------------------------------------------
  645:	  03E1	75 40 46	FRQFORMAT:	MOV	LCDLINE+0,#'F'
  646:	  03E4	75 41 3D			MOV	LCDLINE+1,#'='
  647:	  03E7	75 42 20			MOV	LCDLINE+2,#' '
  648:	  03EA	78 42				MOV	R0,#LCDLINE+2
  649:	  03EC	79 44				MOV	R1,#LCDLINE+4
  650:	  03EE	BF 07 00			CJNE	R7,#07h,$+3
  651:	  03F1	40 19				JC	FRQFORMATKHZ
  652:						;MHz
  653:	  03F3	7F 0A				MOV	R7,#0Ah
  654:	  03F5	E7		FRQFORMATMHZ1:	MOV	A,@R1
  655:	  03F6	BF 06 03			CJNE	R7,#06h,FRQFORMATMHZ2
  656:	  03F9	76 2E				MOV	@R0,#'.'
  657:	  03FB	08				INC	R0

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 13



 Line  I  Addr  Code            Source

  658:	  03FC	F6		FRQFORMATMHZ2:	MOV	@R0,A
  659:	  03FD	08				INC	R0
  660:	  03FE	09				INC	R1
  661:	  03FF	DF F4				DJNZ	R7,FRQFORMATMHZ1
  662:	  0401	75 4D 4D			MOV	LCDLINE+13,#'M'
  663:	  0404	75 4E 48			MOV	LCDLINE+14,#'H'
  664:	  0407	75 4F 7A			MOV	LCDLINE+15,#'z'
  665:	  040A	80 30				SJMP	FRQFORMATDONE
  666:	  040C	BF 04 00	FRQFORMATKHZ:	CJNE	R7,#04h,$+3
  667:	  040F	40 19				JC	FRQFORMATHZ
  668:						;KHz
  669:	  0411	7F 0A				MOV	R7,#0Ah
  670:	  0413	E7		FRQFORMATKHZ1:	MOV	A,@R1
  671:	  0414	BF 03 03			CJNE	R7,#03h,FRQFORMATKHZ2
  672:	  0417	76 2E				MOV	@R0,#'.'
  673:	  0419	08				INC	R0
  674:	  041A	F6		FRQFORMATKHZ2:	MOV	@R0,A
  675:	  041B	08				INC	R0
  676:	  041C	09				INC	R1
  677:	  041D	DF F4				DJNZ	R7,FRQFORMATKHZ1
  678:	  041F	75 4D 4B			MOV	LCDLINE+13,#'K'
  679:	  0422	75 4E 48			MOV	LCDLINE+14,#'H'
  680:	  0425	75 4F 7A			MOV	LCDLINE+15,#'z'
  681:	  0428	80 12				SJMP	FRQFORMATDONE
  682:	  042A			FRQFORMATHZ:	;Hz
  683:	  042A	08				INC	R0
  684:	  042B	7F 0A				MOV	R7,#0Ah
  685:	  042D	E7		FRQFORMATHZ1:	MOV	A,@R1
  686:	  042E	F6				MOV	@R0,A
  687:	  042F	08				INC	R0
  688:	  0430	09				INC	R1
  689:	  0431	DF FA				DJNZ	R7,FRQFORMATHZ1
  690:	  0433	75 4D 48			MOV	LCDLINE+13,#'H'
  691:	  0436	75 4E 7A			MOV	LCDLINE+14,#'z'
  692:	  0439	75 4F 20			MOV	LCDLINE+15,#' '
  693:	  043C	22		FRQFORMATDONE:	RET
  694:
  695:				;------------------------------------------------------------------
  696:				;LCD Output.
  697:				;------------------------------------------------------------------
  698:		N      0000	IF DEBUG=1
  699:				TXBYTE:		MOV	SBUF,A
  700:						JNB	TI,$
  701:						CLR	TI
  702:						RET
  703:				ENDIF
  704:
  705:	  043D	C0 07		LCDDELAY:	PUSH	07h
  706:	  043F	7F 00				MOV	R7,#00h
  707:	  0441	DF FE				DJNZ	R7,$
  708:	  0443	D0 07				POP	07h
  709:	  0445	22				RET
  710:
  711:				;A contains nibble, ACC.4 contains RS
  712:	  0446	D2 E5		LCDNIBOUT:	SETB	ACC.5				;E
  713:	  0448	F5 A0				MOV	P2,A

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 14



 Line  I  Addr  Code            Source

  714:	  044A	C2 A5				CLR	P2.5				;Negative edge on E
  715:	  044C	22				RET
  716:
  717:				;A contains byte
  718:	  044D	C0 E0		LCDCMDOUT:	PUSH	ACC
  719:	  044F	C4				SWAP	A				;High nibble first
  720:	  0450	54 0F				ANL	A,#0Fh
  721:	  0452	91 46				ACALL	LCDNIBOUT
  722:	  0454	D0 E0				POP	ACC
  723:	  0456	54 0F				ANL	A,#0Fh
  724:	  0458	91 46				ACALL	LCDNIBOUT
  725:	  045A	91 3D				ACALL	LCDDELAY			;Wait for BF to clear
  726:	  045C	22				RET
  727:
  728:				;A contains byte
  729:	  045D			LCDCHROUT:
  730:		N      0000	IF DEBUG=1
  731:						AJMP	TXBYTE
  732:				ENDIF
  733:	  045D	C0 E0				PUSH	ACC
  734:	  045F	C4				SWAP	A				;High nibble first
  735:	  0460	54 0F				ANL	A,#0Fh
  736:	  0462	D2 E4				SETB	ACC.4				;RS
  737:	  0464	91 46				ACALL	LCDNIBOUT
  738:	  0466	D0 E0				POP	ACC
  739:	  0468	54 0F				ANL	A,#0Fh
  740:	  046A	D2 E4				SETB	ACC.4				;RS
  741:	  046C	91 46				ACALL	LCDNIBOUT
  742:	  046E	91 3D				ACALL	LCDDELAY			;Wait for BF to clear
  743:	  0470	22				RET
  744:
  745:	  0471	74 01		LCDCLEAR:	MOV	A,#00000001b
  746:	  0473	91 4D				ACALL	LCDCMDOUT
  747:	  0475	7F 00				MOV	R7,#00h
  748:	  0477	91 3D		LCDCLEAR1:	ACALL	LCDDELAY
  749:	  0479	DF FC				DJNZ	R7,LCDCLEAR1
  750:	  047B	22				RET
  751:
  752:				;A contais address
  753:	  047C	44 80		LCDSETADR:	ORL	A,#10000000b
  754:	  047E	91 4D				ACALL	LCDCMDOUT
  755:	  0480	22				RET
  756:
  757:	  0481	E6		LCDPRINTSTR:	MOV	A,@R0
  758:	  0482	91 5D				ACALL	LCDCHROUT
  759:	  0484	08				INC	R0
  760:	  0485	DF FA				DJNZ	R7,LCDPRINTSTR
  761:		N      0000	IF DEBUG=1
  762:						MOV	A,#0DH
  763:						ACALL	LCDCHROUT
  764:						MOV	A,#0AH
  765:						ACALL	LCDCHROUT
  766:				ENDIF
  767:	  0487	22				RET
  768:
  769:	  0488	E4		PRNTCDPTRLCD:	CLR	A

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 15



 Line  I  Addr  Code            Source

  770:	  0489	93				MOVC	A,@A+DPTR
  771:	  048A	60 05				JZ	PRNTCDPTRLCD1
  772:	  048C	91 5D				ACALL	LCDCHROUT
  773:	  048E	A3				INC	DPTR
  774:	  048F	80 F7				SJMP	PRNTCDPTRLCD
  775:	  0491			PRNTCDPTRLCD1:
  776:		N      0000	IF DEBUG=1
  777:						MOV	A,#0DH
  778:						ACALL	LCDCHROUT
  779:						MOV	A,#0AH
  780:						ACALL	LCDCHROUT
  781:				ENDIF
  782:	  0491	22				RET
  783:
  784:	  0492	74 03		LCDINIT:	MOV	A,#00000011b			;Function set
  785:	  0494	91 46				ACALL	LCDNIBOUT
  786:	  0496	91 3D				ACALL	LCDDELAY			;Wait for BF to clear
  787:	  0498	74 28				MOV	A,#00101000b
  788:	  049A	91 4D				ACALL	LCDCMDOUT
  789:	  049C	74 28				MOV	A,#00101000b
  790:	  049E	91 4D				ACALL	LCDCMDOUT
  791:	  04A0	74 0C				MOV	A,#00001100b			;Display ON/OFF
  792:	  04A2	91 4D				ACALL	LCDCMDOUT
  793:	  04A4	91 71				ACALL	LCDCLEAR			;Clear
  794:	  04A6	74 06				MOV	A,#00000110b			;Cursor direction
  795:	  04A8	91 4D				ACALL	LCDCMDOUT
  796:	  04AA	22				RET
  797:
  798:	  04AB	78 40		LCDCLEARBUFF:	MOV	R0,#LCDLINE
  799:	  04AD	7F 10				MOV	R7,#10h
  800:	  04AF	74 20				MOV	A,#20H
  801:	  04B1	F6		LCDCLEARBUFF1:	MOV	@R0,A
  802:	  04B2	08				INC	R0
  803:	  04B3	DF FC				DJNZ	R7,LCDCLEARBUFF1
  804:	  04B5	22				RET
  805:
  806:		N      0800			ORG	0800h
  807:
  808:				$INCLUDE	(FP52INT.a51)
  809: 1			; This is a complete BCD floating point package for the 8051 micro-
  810: 1			; controller. It provides 8 digits of accuracy with exponents that
  811: 1			; range from +127 to -127. The mantissa is in packed BCD, while the
  812: 1			; exponent is expressed in pseudo-twos complement. A ZERO exponent
  813: 1			; is used to express the number ZERO. An exponent value of 80H or
  814: 1			; greater than means the exponent is positive, i.e. 80H = E 0,
  815: 1			; 81H = E+1, 82H = E+2 and so on. If the exponent is 7FH or less,
  816: 1			; the exponent is negative, 7FH = E-1, 7EH = E-2, and so on.
  817: 1			; ALL NUMBERS ARE ASSUMED TO BE NORMALIZED and all results are
  818: 1			; normalized after calculation. A normalized mantissa is >=.10 and
  819: 1			; <=.99999999.
  820: 1			;
  821: 1			; The numbers in memory assumed to be stored as follows:
  822: 1			;
  823: 1			; EXPONENT OF ARGUMENT 2   =   VALUE OF ARG_STACK+FP_NUMBER_SIZE
  824: 1			; SIGN OF ARGUMENT 2       =   VALUE OF ARG_STACK+FP_NUMBER_SIZE-1
  825: 1			; DIGIT 78 OF ARGUMENT 2   =   VALUE OF ARG_STACK+FP_NUMBER_SIZE-2

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 16



 Line  I  Addr  Code            Source

  826: 1			; DIGIT 56 OF ARGUMENT 2   =   VALUE OF ARG_STACK+FP_NUMBER_SIZE-3
  827: 1			; DIGIT 34 OF ARGUMENT 2   =   VALUE OF ARG_STACK+FP_NUMBER_SIZE-4
  828: 1			; DIGIT 12 OF ARGUMENT 2   =   VALUE OF ARG_STACK+FP_NUMBER_SIZE-5
  829: 1			;
  830: 1			; EXPONENT OF ARGUMENT 1   =   VALUE OF ARG_STACK
  831: 1			; SIGN OF ARGUMENT 1       =   VALUE OF ARG_STACK-1
  832: 1			; DIGIT 78 OF ARGUMENT 1   =   VALUE OF ARG_STACK-2
  833: 1			; DIGIT 56 OF ARGUMENT 1   =   VALUE OF ARG_STACK-3
  834: 1			; DIGIT 34 OF ARGUMENT 1   =   VALUE OF ARG_STACK-4
  835: 1			; DIGIT 12 OF ARGUMENT 1   =   VALUE OF ARG_STACK-5
  836: 1			;
  837: 1			; The operations are performed thusly:
  838: 1			;
  839: 1			; ARG_STACK+FP_NUMBER_SIZE = ARG_STACK+FP_NUMBER_SIZE # ARG_STACK
  840: 1			;
  841: 1			; Which is ARGUMENT 2 = ARGUMENT 2 # ARGUMENT 1
  842: 1			;
  843: 1			; Where # can be ADD, SUBTRACT, MULTIPLY OR DIVIDE.
  844: 1			;
  845: 1			; Note that the stack gets popped after an operation.
  846: 1			;
  847: 1			; The FP_COMP instruction POPS the ARG_STACK TWICE and returns status.
  848: 1			;
  849: 1			;**********************************************************************
  850: 1			;
  851: 1			;**********************************************************************
  852: 1			;
  853: 1			; STATUS ON RETURN - After performing an operation (+, -, *, /)
  854: 1			;                    the accumulator contains the following status
  855: 1			;
  856: 1			; ACCUMULATOR - BIT 0 - FLOATING POINT UNDERFLOW OCCURED
  857: 1			;
  858: 1			;             - BIT 1 - FLOATING POINT OVERFLOW OCCURED
  859: 1			;
  860: 1			;             - BIT 2 - RESULT WAS ZER0
  861: 1			;
  862: 1			;             - BIT 3 - DIVIDE BY ZERO ATTEMPTED
  863: 1			;
  864: 1			;             - BIT 4 - NOT USED, 0 RETURNED
  865: 1			;
  866: 1			;             - BIT 5 - NOT USED, 0 RETURNED
  867: 1			;
  868: 1			;             - BIT 6 - NOT USED, 0 RETURNED
  869: 1			;
  870: 1			;             - BIT 7 - NOT USED, 0 RETURNED
  871: 1			;
  872: 1			; NOTE: When underflow occures, a ZERO result is returned.
  873: 1			;       When overflow or divide by zero occures, a result of
  874: 1			;       .99999999 E+127 is returned and it is up to the user
  875: 1			;       to handle these conditions as needed in the program.
  876: 1			;
  877: 1			; NOTE: The Compare instruction returns F0 = 0 if ARG 1 = ARG 2
  878: 1			;       and returns a CARRY FLAG = 1 if ARG 1 is > ARG 2
  879: 1			;
  880: 1			;***********************************************************************
  881: 1			;

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 17



 Line  I  Addr  Code            Source

  882: 1
  883: 1			CMP MACRO REGISTER,CONSTANT
  884: 1			CJNE	REGISTER,CONSTANT,$+3
  885: 1			ENDM
  886: 1
  887: 1			;
  888: 1			;FP_BASE	EQU	$
  889: 1
  890: 1				;**************************************************************
  891: 1				;
  892: 1				; The floating point entry points and jump table
  893: 1				;
  894: 1				;**************************************************************
  895: 1				;
  896: 1			;		AJMP	FLOATING_ADD
  897: 1			;		AJMP	FLOATING_SUB
  898: 1			;		AJMP	FLOATING_COMP
  899: 1			;		AJMP	FLOATING_MUL
  900: 1			;		AJMP	FLOATING_DIV
  901: 1			;		AJMP	HEXSCAN
  902: 1			;		AJMP	FLOATING_POINT_INPUT
  903: 1			;		AJMP	FLOATING_POINT_OUTPUT
  904: 1			;		AJMP	MULNUM10
  905: 1			;		AJMP	HEXOUT
  906: 1			;		AJMP	PUSHAS				;PUSH R0 TO ARGUMENT
  907: 1			;		AJMP	POPAS				;POP ARGUMENT TO R1
  908: 1			;		AJMP	MOVAS				;COPY ARGUMENT TO R1
  909: 1			;		AJMP	AINT				;INT FUNCTION
  910: 1			;		AJMP	PUSHC				;PUSH ARG IN CODE MEM POINTED TO BY DPTR TO
       1			STACK
  911: 1
  912: 1				;
  913: 1				;IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII
  914: 1				;
  915: 1  0800			FLOATING_INIT:
  916: 1				;
  917: 1				;IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII
  918: 1				;
  919: 1  0800	75 24 FF			MOV	ARG_STACK,#FPSTACK
  920: 1  0803	75 25 00			MOV	FORMAT,#00h
  921: 1  0806	75 50 40			MOV	FPCHR_OUT,#LCDLINE
  922: 1  0809	75 27 40			MOV	CONVT,#LCDLINE
  923: 1  080C	22				RET
  924: 1
  925: 1  080D	22		PRTERR:		RET
  926: 1  080E	22		BADPRM:		RET
  927: 1
  928: 1				;
  929: 1				;
  930: 1  080F			FLOATING_SUB:
  931: 1				;
  932: 1  080F	A8 24				MOV	R0,ARG_STACK
  933: 1  0811	18				DEC	R0				;POINT TO SIGN
  934: 1  0812	E6				MOV	A,@R0				;READ SIGN
  935: 1  0813	B2 E0				CPL	ACC.0
  936: 1  0815	F6				MOV	@R0,A

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 18



 Line  I  Addr  Code            Source

  937: 1				;
  938: 1				;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
  939: 1				;
  940: 1  0816			FLOATING_ADD:
  941: 1				;
  942: 1				;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
  943: 1				;
  944: 1				;
  945: 1  0816	51 D4				ACALL 	MDES1				;R7=TOS EXP, R6=TOS-1 EXP, R4=TOS SIGN
  946: 1											;R3=TOS-1 SIGN, OPERATION IS R1 # R0
  947: 1				;
  948: 1  0818	EF				MOV	A,R7				;GET TOS EXPONENT
  949: 1  0819	60 0D				JZ	POP_AND_EXIT			;IF TOS=0 THEN POP AND EXIT
  950: 1  081B	BE 00 12			CJNE	R6,#0,LOAD1			;CLEAR CARRY EXIT IF ZERO
  951: 1				;
  952: 1				;**************************************************************
  953: 1				;
  954: 1  081E			SWAP_AND_EXIT:						; Swap external args and return
  955: 1				;
  956: 1				;**************************************************************
  957: 1				;
  958: 1  081E	51 CB				ACALL	LOAD_POINTERS
  959: 1  0820	7F 06				MOV	R7,#FP_NUMBER_SIZE
  960: 1				;
  961: 1  0822	E6		SE1:		MOV	A,@R0				;SWAP THE ARGUMENTS
  962: 1  0823	F7				MOV	@R1,A
  963: 1  0824	18				DEC	R0
  964: 1  0825	19				DEC	R1
  965: 1  0826	DF FA				DJNZ	R7,SE1
  966: 1				;
  967: 1  0828			POP_AND_EXIT:
  968: 1				;
  969: 1  0828	E5 24				MOV	A,ARG_STACK			;POP THE STACK
  970: 1  082A	24 06				ADD	A,#FP_NUMBER_SIZE
  971: 1  082C	F5 24				MOV	ARG_STACK,A
  972: 1  082E	E4				CLR	A
  973: 1  082F	22				RET
  974: 1				;
  975: 1				;
  976: 1  0830	9E		LOAD1:		SUBB	A,R6				;A = ARG 1 EXP - ARG 2 EXP
  977: 1  0831	8F 30				MOV	FP_EXP,R7			;SAVE EXPONENT AND SIGN
  978: 1  0833	8C 2F				MOV	FP_SIGN,R4
  979: 1  0835	50 09				JNC	LOAD2				;ARG1 EXPONENT IS LARGER OR SAME
  980: 1  0837	8E 30				MOV	FP_EXP,R6
  981: 1  0839	8B 2F				MOV	FP_SIGN,R3
  982: 1  083B	F4				CPL	A
  983: 1  083C	04				INC	A				;COMPENSATE FOR EXP DELTA
  984: 1  083D	C8				XCH	A,R0				;FORCE R0 TO POINT AT THE LARGEST
  985: 1  083E	C9				XCH	A,R1				;EXPONENT
  986: 1  083F	C8				XCH	A,R0
  987: 1				;
  988: 1  0840	FF		LOAD2:		MOV	R7,A				;SAVE THE EXPONENT DELTA IN R7
  989: 1  0841	C2 33				CLR	ADD_IN
  990: 1  0843	BD 00 02			CJNE	R5,#0,LOAD3
  991: 1  0846	D2 33				SETB	ADD_IN
  992: 1				;

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 19



 Line  I  Addr  Code            Source

  993: 1				; Load the R1 mantissa
  994: 1				;
  995: 1  0848	51 E5		LOAD3:		ACALL	LOADR1_MANTISSA			;LOAD THE SMALLEST NUMBER
  996: 1				;
  997: 1				; Now align the number to the delta exponent
  998: 1				; R4 points to the string of the last digits lost
  999: 1				;
 1000: 1					CMP	R7,#DIGIT+DIGIT+3
 1001+ 2  084A	BF 0B 00	CJNE	R7,#DIGIT+DIGIT+3,$+3
 1002: 1  084D	40 02				JC	LOAD4
 1003: 1  084F	7F 0A				MOV	R7,#DIGIT+DIGIT+2
 1004: 1				;
 1005: 1  0851	75 2A 00	LOAD4:		MOV	FP_CARRY,#00			;CLEAR THE CARRY
 1006: 1  0854	51 28				ACALL	RIGHT				;SHIFT THE NUMBER
 1007: 1				;
 1008: 1				; Set up for addition and subtraction
 1009: 1				;
 1010: 1  0856	7F 04				MOV	R7,#DIGIT			;LOOP COUNT
 1011: 1  0858	79 2E				MOV	R1,#FP_DIG78
 1012: 1  085A	74 9E				MOV	A,#9EH
 1013: 1  085C	C3				CLR	C
 1014: 1  085D	9C				SUBB	A,R4
 1015: 1  085E	D4				DA	A
 1016: 1  085F	CC				XCH	A,R4
 1017: 1  0860	70 01				JNZ	LOAD5
 1018: 1  0862	FC				MOV	R4,A
 1019: 1  0863			LOAD5:		CMP	A,#50H				;TEST FOR SUBTRACTION
 1020+ 2  0863	B4 50 00	CJNE	A,#50H,$+3
 1021: 1  0866	30 33 18			JNB	ADD_IN,SUBLP			;DO SUBTRACTION IF NO ADD_IN
 1022: 1  0869	B3				CPL	C				;FLIP CARRY FOR ADDITION
 1023: 1  086A	11 78				ACALL	ADDLP				;DO ADDITION
 1024: 1				;
 1025: 1  086C	50 08				JNC	ADD_R
 1026: 1  086E	05 2A				INC	FP_CARRY
 1027: 1  0870	7F 01				MOV	R7,#1
 1028: 1  0872	51 28				ACALL	RIGHT
 1029: 1  0874	31 DF				ACALL	INC_FP_EXP			;SHIFT AND BUMP EXPONENT
 1030: 1				;
 1031: 1  0876	21 D0		ADD_R:		AJMP	STORE_ALIGN_TEST_AND_EXIT
 1032: 1				;
 1033: 1  0878	E6		ADDLP:		MOV	A,@R0
 1034: 1  0879	37				ADDC	A,@R1
 1035: 1  087A	D4				DA	A
 1036: 1  087B	F7				MOV	@R1,A
 1037: 1  087C	18				DEC	R0
 1038: 1  087D	19				DEC	R1
 1039: 1  087E	DF F8				DJNZ	R7,ADDLP			;LOOP UNTIL DONE
 1040: 1  0880	22				RET
 1041: 1				;
 1042: 1				;
 1043: 1  0881	E6		SUBLP:		MOV	A,@R0				;NOW DO SUBTRACTION
 1044: 1  0882	FE				MOV	R6,A
 1045: 1  0883	E4				CLR	A
 1046: 1  0884	34 99				ADDC	A,#99H
 1047: 1  0886	97				SUBB	A,@R1
 1048: 1  0887	2E				ADD	A,R6

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 20



 Line  I  Addr  Code            Source

 1049: 1  0888	D4				DA	A
 1050: 1  0889	F7				MOV	@R1,A
 1051: 1  088A	18				DEC	R0
 1052: 1  088B	19				DEC	R1
 1053: 1  088C	DF F3				DJNZ	R7,SUBLP
 1054: 1  088E	40 11				JC	FSUB6
 1055: 1				;
 1056: 1				;
 1057: 1				; Need to complement the result and sign because the floating
 1058: 1				; point accumulator mantissa was larger than the external
 1059: 1				; memory and their signs were equal.
 1060: 1				;
 1061: 1  0890	B2 78				CPL	FP_SIGN.0
 1062: 1  0892	79 2E				MOV	R1,#FP_DIG78
 1063: 1  0894	7F 04				MOV	R7,#DIGIT			;LOOP COUNT
 1064: 1				;
 1065: 1  0896	74 9A		FSUB5:		MOV	A,#9AH
 1066: 1  0898	97				SUBB	A,@R1
 1067: 1  0899	24 00				ADD	A,#0
 1068: 1  089B	D4				DA	A
 1069: 1  089C	F7				MOV	@R1,A
 1070: 1  089D	19				DEC	R1
 1071: 1  089E	B3				CPL	C
 1072: 1  089F	DF F5				DJNZ	R7,FSUB5			;LOOP
 1073: 1				;
 1074: 1				; Now see how many zeros their are
 1075: 1				;
 1076: 1  08A1	78 2B		FSUB6:		MOV	R0,#FP_DIG12
 1077: 1  08A3	7F 00				MOV	R7,#0
 1078: 1				;
 1079: 1  08A5	E6		FSUB7:		MOV	A,@R0
 1080: 1  08A6	70 08				JNZ	FSUB8
 1081: 1  08A8	0F				INC	R7
 1082: 1  08A9	0F				INC	R7
 1083: 1  08AA	08				INC	R0
 1084: 1  08AB	B8 2F F7			CJNE	R0,#FP_SIGN,FSUB7
 1085: 1  08AE	41 18				AJMP	ZERO_AND_EXIT
 1086: 1				;
 1087: 1  08B0			FSUB8:		CMP	A,#10H
 1088+ 2  08B0	B4 10 00	CJNE	A,#10H,$+3
 1089: 1  08B3	50 01				JNC	FSUB9
 1090: 1  08B5	0F				INC	R7
 1091: 1				;
 1092: 1				; Now R7 has the number of leading zeros in the FP ACC
 1093: 1				;
 1094: 1  08B6	E5 30		FSUB9:		MOV	A,FP_EXP			;GET THE OLD EXPONENT
 1095: 1  08B8	C3				CLR	C
 1096: 1  08B9	9F				SUBB	A,R7				;SUBTRACT FROM THE NUMBER OF ZEROS
 1097: 1  08BA	60 0B				JZ	FSUB10
 1098: 1  08BC	40 09				JC	FSUB10
 1099: 1				;
 1100: 1  08BE	F5 30				MOV	FP_EXP,A			;SAVE THE NEW EXPONENT
 1101: 1				;
 1102: 1  08C0	51 62				ACALL	LEFT1				;SHIFT THE FP ACC
 1103: 1  08C2	75 2A 00			MOV	FP_CARRY,#0
 1104: 1  08C5	21 D0				AJMP	STORE_ALIGN_TEST_AND_EXIT

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 21



 Line  I  Addr  Code            Source

 1105: 1				;
 1106: 1  08C7	41 12		FSUB10:		AJMP	UNDERFLOW_AND_EXIT
 1107: 1				;
 1108: 1				;***************************************************************
 1109: 1				;
 1110: 1  08C9			FLOATING_COMP:	; Compare two floating point numbers
 1111: 1					; used for relational operations and is faster
 1112: 1					; than subtraction. ON RETURN, The carry is set
 1113: 1					; if ARG1 is > ARG2, else carry is not set
 1114: 1					; if ARG1 = ARG2, F0 gets set
 1115: 1				;
 1116: 1				;***************************************************************
 1117: 1				;
 1118: 1  08C9	51 D4				ACALL	MDES1				;SET UP THE REGISTERS
 1119: 1  08CB	E5 24				MOV	A,ARG_STACK
 1120: 1  08CD	24 0C				ADD	A,#FP_NUMBER_SIZE+FP_NUMBER_SIZE
 1121: 1  08CF	F5 24				MOV	ARG_STACK,A			;POP THE STACK TWICE, CLEAR THE CARRY
 1122: 1  08D1	EE				MOV	A,R6				;CHECK OUT EXPONENTS
 1123: 1  08D2	C2 D5				CLR	F0
 1124: 1  08D4	C3		        	CLR     C
 1125: 1  08D5	9F				SUBB	A,R7
 1126: 1  08D6	60 0A				JZ	EXPONENTS_EQUAL
 1127: 1  08D8	40 03				JC	ARG1_EXP_GT
 1128: 1				;
 1129: 1				; Now the ARG2 EXPONENT is > ARG1 EXPONENT
 1130: 1				;
 1131: 1  08DA			SIGNS_DIFFERENT:
 1132: 1				;
 1133: 1  08DA	EB				MOV	A,R3				;SEE IF SIGN OF ARG2 IS POSITIVE
 1134: 1  08DB	80 01				SJMP	ARG1_EXP_GT1
 1135: 1				;
 1136: 1  08DD			ARG1_EXP_GT:
 1137: 1				;
 1138: 1  08DD	EC				MOV	A,R4				;GET THE SIGN OF ARG1 EXPONENT
 1139: 1  08DE	60 01		ARG1_EXP_GT1:	JZ	ARG1_EXP_GT2
 1140: 1  08E0	B3				CPL	C
 1141: 1  08E1	22		ARG1_EXP_GT2:	RET
 1142: 1				;
 1143: 1  08E2			EXPONENTS_EQUAL:
 1144: 1				;
 1145: 1				; First, test the sign, then the mantissa
 1146: 1				;
 1147: 1  08E2	BD 00 F5			CJNE	R5,#0,SIGNS_DIFFERENT
 1148: 1				;
 1149: 1  08E5			BOTH_PLUS:
 1150: 1				;
 1151: 1  08E5	7F 04				MOV	R7,#DIGIT			;POINT AT MS DIGIT
 1152: 1  08E7	18				DEC	R0
 1153: 1  08E8	18				DEC	R0
 1154: 1  08E9	18				DEC	R0
 1155: 1  08EA	19				DEC	R1
 1156: 1  08EB	19				DEC	R1
 1157: 1  08EC	19				DEC	R1
 1158: 1				;
 1159: 1				; Now do the compare
 1160: 1				;

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 22



 Line  I  Addr  Code            Source

 1161: 1  08ED	E6		CLOOP:		MOV	A,@R0
 1162: 1  08EE	FE				MOV	R6,A
 1163: 1  08EF	E7				MOV	A,@R1
 1164: 1  08F0	9E				SUBB	A,R6
 1165: 1  08F1	70 EA				JNZ	ARG1_EXP_GT
 1166: 1  08F3	08				INC	R0
 1167: 1  08F4	09				INC	R1
 1168: 1  08F5	DF F6				DJNZ	R7,CLOOP
 1169: 1				;
 1170: 1				; If here, the numbers are the same, the carry is cleared
 1171: 1				;
 1172: 1  08F7	D2 D5				SETB	F0
 1173: 1  08F9	22				RET					;EXIT WITH EQUAL
 1174: 1				;
 1175: 1			;MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
 1176: 1			;
 1177: 1  08FA			FLOATING_MUL:						; Floating point multiply
 1178: 1			;
 1179: 1			;MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
 1180: 1			;
 1181: 1  08FA	51 D2				ACALL	MUL_DIV_EXP_AND_SIGN
 1182: 1				;
 1183: 1				; check for zero exponents
 1184: 1				;
 1185: 1  08FC	BE 00 02			CJNE	R6,#00,FMUL1			;ARG 2 EXP ZERO?
 1186: 1  08FF	41 18		FMUL0:		AJMP	ZERO_AND_EXIT
 1187: 1				;
 1188: 1				; calculate the exponent
 1189: 1				;
 1190: 1  0901	8D 2F		FMUL1:		MOV	FP_SIGN,R5			;SAVE THE SIGN, IN CASE OF FAILURE
 1191: 1				;
 1192: 1  0903	EF				MOV	A,R7
 1193: 1  0904	60 F9				JZ	FMUL0
 1194: 1  0906	2E				ADD	A,R6				;ADD THE EXPONENTS
 1195: 1  0907	20 E7 05			JB	ACC.7,FMUL_OVER
 1196: 1  090A	10 D7 06			JBC	CY,FMUL2			;SEE IF CARRY IS SET
 1197: 1				;
 1198: 1  090D	41 12				AJMP	UNDERFLOW_AND_EXIT
 1199: 1				;
 1200: 1  090F			FMUL_OVER:
 1201: 1				;
 1202: 1  090F	50 02				JNC	FMUL2				;OK IF SET
 1203: 1				;
 1204: 1  0911	41 01		FOV:		AJMP	OVERFLOW_AND_EXIT
 1205: 1				;
 1206: 1  0913	94 81		FMUL2:		SUBB	A,#129				;SUBTRACT THE EXPONENT BIAS
 1207: 1  0915	FE				MOV	R6,A				;SAVE IT FOR LATER
 1208: 1				;
 1209: 1				; Unpack and load R0
 1210: 1				;
 1211: 1  0916	31 EB				ACALL	UNPACK_R0
 1212: 1				;
 1213: 1				; Now set up for loop multiply
 1214: 1				;
 1215: 1  0918	7B 04				MOV	R3,#DIGIT
 1216: 1  091A	AC 01				MOV	R4,R1B0

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 23



 Line  I  Addr  Code            Source

 1217: 1				;
 1218: 1				;
 1219: 1				; Now, do the multiply and accumulate the product
 1220: 1				;
 1221: 1  091C	8C 01		FMUL3:		MOV	R1B0,R4
 1222: 1  091E	E7				MOV	A,@R1
 1223: 1  091F	FA				MOV	R2,A
 1224: 1  0920	51 98				ACALL	MUL_NIBBLE
 1225: 1				;
 1226: 1  0922	EA				MOV	A,R2
 1227: 1  0923	C4				SWAP	A
 1228: 1  0924	51 98				ACALL	MUL_NIBBLE
 1229: 1  0926	1C				DEC	R4
 1230: 1  0927	DB F3				DJNZ	R3,FMUL3
 1231: 1				;
 1232: 1				; Now, pack and restore the sign
 1233: 1				;
 1234: 1  0929	8E 30				MOV	FP_EXP,R6
 1235: 1  092B	8D 2F				MOV	FP_SIGN,R5
 1236: 1  092D	21 90				AJMP	PACK				;FINISH IT OFF
 1237: 1				;
 1238: 1				;DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
 1239: 1				;
 1240: 1  092F			FLOATING_DIV:
 1241: 1				;
 1242: 1				;DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
 1243: 1				;
 1244: 1  092F	51 D4				ACALL	MDES1
 1245: 1				;
 1246: 1				; Check the exponents
 1247: 1				;
 1248: 1  0931	8D 2F				MOV	FP_SIGN,R5			;SAVE THE SIGN
 1249: 1  0933	BF 00 06			CJNE	R7,#0,DIV0			;CLEARS THE CARRY
 1250: 1  0936	51 01				ACALL	OVERFLOW_AND_EXIT
 1251: 1  0938	E4				CLR	A
 1252: 1  0939	D2 E3				SETB	ACC.ZERO_DIVIDE
 1253: 1  093B	22				RET
 1254: 1				;
 1255: 1  093C	EE		DIV0:		MOV	A,R6				;GET EXPONENT
 1256: 1  093D	60 C0				JZ	FMUL1-2				;EXIT IF ZERO
 1257: 1  093F	9F				SUBB	A,R7				;DELTA EXPONENT
 1258: 1  0940	20 E7 04			JB	ACC.7,D_UNDER
 1259: 1  0943	50 04				JNC	DIV3
 1260: 1  0945	41 12				AJMP	UNDERFLOW_AND_EXIT
 1261: 1				;
 1262: 1  0947	50 C8		D_UNDER:	JNC	FOV
 1263: 1				;
 1264: 1  0949	24 81		DIV3:		ADD	A,#129				;CORRECTLY BIAS THE EXPONENT
 1265: 1  094B	F5 30				MOV	FP_EXP,A			;SAVE THE EXPONENT
 1266: 1  094D	51 E5				ACALL	LOADR1_MANTISSA			;LOAD THE DIVIDED
 1267: 1				;
 1268: 1  094F	7A 34				MOV	R2,#FP_ACCC			;SAVE LOCATION
 1269: 1  0951	AB 00				MOV	R3,R0B0				;SAVE POINTER IN R3
 1270: 1  0953	75 2A 00			MOV	FP_CARRY,#0			;ZERO CARRY BYTE
 1271: 1				;
 1272: 1  0956	7D FF		DIV4:		MOV	R5,#0FFH			;LOOP COUNT

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 24



 Line  I  Addr  Code            Source

 1273: 1  0958	D3				SETB	C
 1274: 1				;
 1275: 1  0959	8B 00		DIV5:		MOV	R0B0,R3				;RESTORE THE EXTERNAL POINTER
 1276: 1  095B	79 2E				MOV	R1,#FP_DIG78			;SET UP INTERNAL POINTER
 1277: 1  095D	7F 04				MOV	R7,#DIGIT			;LOOP COUNT
 1278: 1  095F	50 17				JNC	DIV7				;EXIT IF NO CARRY
 1279: 1				;
 1280: 1  0961	E6		DIV6:		MOV	A,@R0				;DO ACCUMLATION
 1281: 1  0962	FE				MOV	R6,A
 1282: 1  0963	E4				CLR	A
 1283: 1  0964	34 99				ADDC	A,#99H
 1284: 1  0966	9E				SUBB	A,R6
 1285: 1  0967	27				ADD	A,@R1
 1286: 1  0968	D4				DA	A
 1287: 1  0969	F7				MOV	@R1,A
 1288: 1  096A	18				DEC	R0
 1289: 1  096B	19				DEC	R1
 1290: 1  096C	DF F3				DJNZ	R7,DIV6				;LOOP
 1291: 1				;
 1292: 1  096E	0D				INC	R5				;SUBTRACT COUNTER
 1293: 1  096F	40 E8				JC	DIV5				;KEEP LOOPING IF CARRY
 1294: 1  0971	E7				MOV	A,@R1				;GET CARRY
 1295: 1  0972	94 01				SUBB	A,#1				;CARRY IS CLEARED
 1296: 1  0974	F7				MOV	@R1,A				;SAVE CARRY DIGIT
 1297: 1  0975	B3				CPL	C
 1298: 1  0976	80 E1				SJMP	DIV5				;LOOP
 1299: 1				;
 1300: 1				; Restore the result if carry was found
 1301: 1				;
 1302: 1  0978	11 78		DIV7:		ACALL	ADDLP				;ADD NUMBER BACK
 1303: 1  097A	77 00				MOV	@R1,#0				;CLEAR CARRY
 1304: 1  097C	8A 00				MOV	R0B0,R2				;GET SAVE COUNTER
 1305: 1  097E	A6 05				MOV	@R0,5				;SAVE COUNT BYTE
 1306: 1				;
 1307: 1  0980	0A				INC	R2				;ADJUST SAVE COUNTER
 1308: 1  0981	7F 01				MOV	R7,#1				;BUMP DIVIDEND
 1309: 1  0983	51 60				ACALL	LEFT
 1310: 1  0985	BA 3E CE			CJNE	R2,#FP_ACC8+2,DIV4
 1311: 1				;
 1312: 1  0988	D5 30 02			DJNZ	FP_EXP,DIV8
 1313: 1  098B	41 12				AJMP	UNDERFLOW_AND_EXIT
 1314: 1				;
 1315: 1  098D	75 2A 00	DIV8:		MOV	FP_CARRY,#0
 1316: 1				;
 1317: 1				;***************************************************************
 1318: 1				;
 1319: 1  0990			PACK:	; Pack the mantissa
 1320: 1				;
 1321: 1				;***************************************************************
 1322: 1				;
 1323: 1				; First, set up the pointers
 1324: 1				;
 1325: 1  0990	78 34				MOV	R0,#FP_ACCC
 1326: 1  0992	E6				MOV	A,@R0				;GET FP_ACCC
 1327: 1  0993	FE				MOV	R6,A				;SAVE FOR ZERO COUNT
 1328: 1  0994	60 03				JZ	PACK0				;JUMP OVER IF ZERO

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 25



 Line  I  Addr  Code            Source

 1329: 1  0996	31 DF				ACALL	INC_FP_EXP			;BUMP THE EXPONENT
 1330: 1  0998	18				DEC	R0
 1331: 1				;
 1332: 1  0999	08		PACK0:		INC	R0				;POINT AT FP_ACC1
 1333: 1				;
 1334: 1  099A	74 08		PACK1:		MOV	A,#8				;ADJUST NIBBLE POINTER
 1335: 1  099C	F9				MOV	R1,A
 1336: 1  099D	28				ADD	A,R0
 1337: 1  099E	F8				MOV	R0,A
 1338: 1					CMP	@R0,#5				;SEE IF ADJUSTING NEEDED
 1339+ 2  099F	B6 05 00	CJNE	@R0,#5,$+3
 1340: 1  09A2	40 13				JC	PACK3+1
 1341: 1				;
 1342: 1  09A4	D3		PACK2:		SETB	C
 1343: 1  09A5	E4				CLR	A
 1344: 1  09A6	18				DEC	R0
 1345: 1  09A7	36				ADDC	A,@R0
 1346: 1  09A8	D4				DA	A
 1347: 1  09A9	D6				XCHD	A,@R0				;SAVE THE VALUE
 1348: 1  09AA	30 E4 09			JNB	ACC.4,PACK3
 1349: 1  09AD	D9 F5				DJNZ	R1,PACK2
 1350: 1				;
 1351: 1  09AF	18				DEC	R0
 1352: 1  09B0	76 01				MOV	@R0,#1
 1353: 1  09B2	31 DF				ACALL	INC_FP_EXP
 1354: 1  09B4	80 06				SJMP	PACK4
 1355: 1				;
 1356: 1  09B6	19		PACK3:		DEC	R1
 1357: 1  09B7	E9				MOV	A,R1
 1358: 1  09B8	C3				CLR	C
 1359: 1  09B9	C8				XCH	A,R0
 1360: 1  09BA	98				SUBB	A,R0
 1361: 1  09BB	F8				MOV	R0,A
 1362: 1				;
 1363: 1  09BC	79 2B		PACK4:		MOV	R1,#FP_DIG12
 1364: 1				;
 1365: 1				; Now, pack
 1366: 1				;
 1367: 1  09BE	E6		PLOOP:		MOV	A,@R0
 1368: 1  09BF	C4				SWAP	A				;FLIP THE DIGITS
 1369: 1  09C0	08				INC	R0
 1370: 1  09C1	D6				XCHD	A,@R0
 1371: 1  09C2	42 06				ORL	6,A				;ACCUMULATE THE OR'ED DIGITS
 1372: 1  09C4	F7				MOV	@R1,A
 1373: 1  09C5	08				INC	R0
 1374: 1  09C6	09				INC	R1
 1375: 1  09C7	B9 2F F4			CJNE	R1,#FP_SIGN,PLOOP
 1376: 1  09CA	EE				MOV	A,R6
 1377: 1  09CB	70 03				JNZ	STORE_ALIGN_TEST_AND_EXIT
 1378: 1  09CD	75 30 00			MOV	FP_EXP,#0			;ZERO EXPONENT
 1379: 1				;
 1380: 1				;**************************************************************
 1381: 1				;
 1382: 1  09D0			STORE_ALIGN_TEST_AND_EXIT:				;Save the number align carry and exit
 1383: 1				;
 1384: 1				;**************************************************************

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 26



 Line  I  Addr  Code            Source

 1385: 1				;
 1386: 1  09D0	51 CB				ACALL	LOAD_POINTERS
 1387: 1  09D2	89 24				MOV	ARG_STACK,R1			;SET UP THE NEW STACK
 1388: 1  09D4	78 30				MOV	R0,#FP_EXP
 1389: 1				;
 1390: 1				; Now load the numbers
 1391: 1				;
 1392: 1  09D6	E6		STORE2:		MOV	A,@R0
 1393: 1  09D7	F7				MOV	@R1,A				;SAVE THE NUMBER
 1394: 1  09D8	18				DEC	R0
 1395: 1  09D9	19				DEC	R1
 1396: 1  09DA	B8 2A F9			CJNE	R0,#FP_CARRY,STORE2
 1397: 1				;
 1398: 1  09DD	E4				CLR	A				;NO ERRORS
 1399: 1				;
 1400: 1  09DE	22		PRET:		RET					;EXIT
 1401: 1				;
 1402: 1  09DF			INC_FP_EXP:
 1403: 1				;
 1404: 1  09DF	05 30				INC	FP_EXP
 1405: 1  09E1	E5 30				MOV	A,FP_EXP
 1406: 1  09E3	70 F9				JNZ	PRET				;EXIT IF NOT ZERO
 1407: 1  09E5	D0 E0				POP	ACC				;WASTE THE CALLING STACK
 1408: 1  09E7	D0 E0				POP	ACC
 1409: 1  09E9	41 01				AJMP	OVERFLOW_AND_EXIT
 1410: 1				;
 1411: 1			;***********************************************************************
 1412: 1			;
 1413: 1  09EB			UNPACK_R0:	; Unpack BCD digits and load into nibble locations
 1414: 1			;
 1415: 1			;***********************************************************************
 1416: 1				;
 1417: 1  09EB	C0 01				PUSH	R1B0
 1418: 1  09ED	79 32				MOV	R1,#FP_NIB8
 1419: 1				;
 1420: 1  09EF	E6		ULOOP:		MOV	A,@R0
 1421: 1  09F0	54 0F				ANL	A,#0FH
 1422: 1  09F2	F7				MOV	@R1,A				;SAVE THE NIBBLE
 1423: 1  09F3	E6				MOV	A,@R0
 1424: 1  09F4	C4				SWAP	A
 1425: 1  09F5	54 0F				ANL	A,#0FH
 1426: 1  09F7	19				DEC	R1
 1427: 1  09F8	F7				MOV	@R1,A				;SAVE THE NIBBLE AGAIN
 1428: 1  09F9	18				DEC	R0
 1429: 1  09FA	19				DEC	R1
 1430: 1  09FB	B9 2A F1			CJNE	R1,#FP_NIB1-1,ULOOP
 1431: 1				;
 1432: 1  09FE	D0 01				POP	R1B0
 1433: 1				;
 1434: 1  0A00	22		LOAD7:		RET
 1435: 1				;
 1436: 1				;**************************************************************
 1437: 1				;
 1438: 1  0A01			OVERFLOW_AND_EXIT:	;LOAD 99999999 E+127,  SET OV BIT, AND EXIT
 1439: 1				;
 1440: 1				;**************************************************************

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 27



 Line  I  Addr  Code            Source

 1441: 1				;
 1442: 1  0A01	78 2E				MOV	R0,#FP_DIG78
 1443: 1  0A03	74 99				MOV	A,#99H
 1444: 1				;
 1445: 1  0A05	F6		OVE1:		MOV	@R0,A
 1446: 1  0A06	18				DEC	R0
 1447: 1  0A07	B8 2A FB			CJNE	R0,#FP_CARRY,OVE1
 1448: 1				;
 1449: 1  0A0A	75 30 FF			MOV	FP_EXP,#0FFH
 1450: 1  0A0D	31 D0				ACALL	STORE_ALIGN_TEST_AND_EXIT
 1451: 1				;
 1452: 1  0A0F	D2 E1				SETB	ACC.OVERFLOW
 1453: 1  0A11	22				RET
 1454: 1				;
 1455: 1				;**************************************************************
 1456: 1				;
 1457: 1  0A12			UNDERFLOW_AND_EXIT:	;LOAD 0, SET UF BIT, AND EXIT
 1458: 1				;
 1459: 1				;**************************************************************
 1460: 1				;
 1461: 1  0A12	51 18				ACALL	ZERO_AND_EXIT
 1462: 1  0A14	E4				CLR		A
 1463: 1  0A15	D2 E0				SETB	ACC.UNDERFLOW
 1464: 1  0A17	22				RET
 1465: 1				;
 1466: 1				;**************************************************************
 1467: 1				;
 1468: 1  0A18			ZERO_AND_EXIT:		;LOAD 0, SET ZERO BIT, AND EXIT
 1469: 1				;
 1470: 1				;**************************************************************
 1471: 1				;
 1472: 1  0A18	51 1F				ACALL	FP_CLEAR
 1473: 1  0A1A	31 D0				ACALL	STORE_ALIGN_TEST_AND_EXIT
 1474: 1  0A1C	D2 E2				SETB	ACC.ZERO
 1475: 1  0A1E	22				RET					;EXIT
 1476: 1				;
 1477: 1				;**************************************************************
 1478: 1				;
 1479: 1  0A1F			FP_CLEAR:
 1480: 1				;
 1481: 1				; Clear internal storage
 1482: 1				;
 1483: 1				;**************************************************************
 1484: 1				;
 1485: 1  0A1F	E4				CLR	A
 1486: 1  0A20	78 3D				MOV	R0,#FP_ACC8+1
 1487: 1				;
 1488: 1  0A22	F6		FPC1:		MOV	@R0,A
 1489: 1  0A23	18				DEC	R0
 1490: 1  0A24	B8 29 FB			CJNE	R0,#FP_TEMP,FPC1
 1491: 1  0A27	22				RET
 1492: 1				;
 1493: 1				;**************************************************************
 1494: 1				;
 1495: 1  0A28			RIGHT:	; Shift ACCUMULATOR RIGHT the number of nibbles in R7
 1496: 1				; Save the shifted values in R4 if SAVE_ROUND is set

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 28



 Line  I  Addr  Code            Source

 1497: 1				;
 1498: 1				;**************************************************************
 1499: 1				;
 1500: 1  0A28	7C 00				MOV	R4,#0				;IN CASE OF NO SHIFT
 1501: 1				;
 1502: 1  0A2A	C3		RIGHT1:		CLR	C
 1503: 1  0A2B	EF				MOV	A,R7				;GET THE DIGITS TO SHIFT
 1504: 1  0A2C	60 22				JZ	RIGHT5-1			;EXIT IF ZERO
 1505: 1  0A2E	94 02				SUBB	A,#2				;TWO TO DO?
 1506: 1  0A30	50 1F				JNC	RIGHT5				;SHIFT TWO NIBBLES
 1507: 1				;
 1508: 1				; Swap one nibble then exit
 1509: 1				;
 1510: 1  0A32	C0 00		RIGHT3:		PUSH	R0B0				;SAVE POINTER REGISTER
 1511: 1  0A34	C0 01				PUSH	R1B0
 1512: 1				;
 1513: 1  0A36	79 2E				MOV	R1,#FP_DIG78			;LOAD THE POINTERS
 1514: 1  0A38	78 2D				MOV	R0,#FP_DIG56
 1515: 1  0A3A	EC				MOV	A,R4				;GET THE OVERFLOW REGISTER
 1516: 1  0A3B	D7				XCHD	A,@R1				;GET DIGIT 8
 1517: 1  0A3C	C4				SWAP	A				;FLIP FOR LOAD
 1518: 1  0A3D	FC				MOV	R4,A
 1519: 1				;
 1520: 1  0A3E	E7		RIGHTL:		MOV	A,@R1				;GET THE LOW ORDER BYTE
 1521: 1  0A3F	D6				XCHD	A,@R0				;SWAP NIBBLES
 1522: 1  0A40	C4				SWAP	A				;FLIP FOR STORE
 1523: 1  0A41	F7				MOV	@R1,A				;SAVE THE DIGITS
 1524: 1  0A42	18				DEC	R0				;BUMP THE POINTERS
 1525: 1  0A43	19				DEC	R1
 1526: 1  0A44	B9 2A F7			CJNE	R1,#FP_DIG12-1,RIGHTL	;LOOP
 1527: 1				;
 1528: 1  0A47	E7				MOV	A,@R1				;ACC = CH8
 1529: 1  0A48	C4				SWAP	A				;ACC = 8CH
 1530: 1  0A49	54 0F				ANL	A,#0FH				;ACC = 0CH
 1531: 1  0A4B	F7				MOV	@R1,A				;CARRY DONE
 1532: 1  0A4C	D0 01				POP	R1B0				;EXIT
 1533: 1  0A4E	D0 00				POP	R0B0				;RESTORE REGISTER
 1534: 1  0A50	22				RET
 1535: 1				;
 1536: 1  0A51	FF		RIGHT5:		MOV	R7,A				;SAVE THE NEW SHIFT NUMBER
 1537: 1  0A52	E4				CLR	A
 1538: 1  0A53	C5 2A				XCH	A,FP_CARRY			;SWAP THE NIBBLES
 1539: 1  0A55	C5 2B				XCH	A,FP_DIG12
 1540: 1  0A57	C5 2C				XCH	A,FP_DIG34
 1541: 1  0A59	C5 2D				XCH	A,FP_DIG56
 1542: 1  0A5B	C5 2E				XCH	A,FP_DIG78
 1543: 1  0A5D	FC				MOV	R4,A				;SAVE THE LAST DIGIT SHIFTED
 1544: 1  0A5E	80 CB				SJMP	RIGHT1+1
 1545: 1				;
 1546: 1				;***************************************************************
 1547: 1				;
 1548: 1  0A60			LEFT:	; Shift ACCUMULATOR LEFT the number of nibbles in R7
 1549: 1				;
 1550: 1				;***************************************************************
 1551: 1				;
 1552: 1  0A60	7C 00				MOV	R4,#00H				;CLEAR FOR SOME ENTRYS

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 29



 Line  I  Addr  Code            Source

 1553: 1				;
 1554: 1  0A62	C3		LEFT1:		CLR	C
 1555: 1  0A63	EF				MOV	A,R7				;GET SHIFT VALUE
 1556: 1  0A64	60 22				JZ	LEFT5-1				;EXIT IF ZERO
 1557: 1  0A66	94 02				SUBB	A,#2				;SEE HOW MANY BYTES TO SHIFT
 1558: 1  0A68	50 1F				JNC	LEFT5
 1559: 1				;
 1560: 1  0A6A	C0 00		LEFT3:		PUSH	R0B0				;SAVE POINTER
 1561: 1  0A6C	C0 01				PUSH	R1B0
 1562: 1  0A6E	78 2A				MOV	R0,#FP_CARRY
 1563: 1  0A70	79 2B				MOV	R1,#FP_DIG12
 1564: 1				;
 1565: 1  0A72	E6				MOV	A,@R0				;ACC=CHCL
 1566: 1  0A73	C4				SWAP	A				;ACC = CLCH
 1567: 1  0A74	F6				MOV	@R0,A				;ACC = CLCH, @R0 = CLCH
 1568: 1				;
 1569: 1  0A75	E7		LEFTL:		MOV	A,@R1				;DIG 12
 1570: 1  0A76	C4				SWAP	A				;DIG 21
 1571: 1  0A77	D6				XCHD	A,@R0
 1572: 1  0A78	F7				MOV	@R1,A				;SAVE IT
 1573: 1  0A79	08				INC	R0				;BUMP POINTERS
 1574: 1  0A7A	09				INC	R1
 1575: 1  0A7B	B8 2E F7			CJNE	R0,#FP_DIG78,LEFTL
 1576: 1				;
 1577: 1  0A7E	EC				MOV	A,R4
 1578: 1  0A7F	C4				SWAP	A
 1579: 1  0A80	D6				XCHD	A,@R0
 1580: 1  0A81	54 F0				ANL	A,#0F0H
 1581: 1  0A83	FC				MOV	R4,A
 1582: 1				;
 1583: 1  0A84	D0 01				POP	R1B0
 1584: 1  0A86	D0 00				POP	R0B0				;RESTORE
 1585: 1  0A88	22				RET					;DONE
 1586: 1				;
 1587: 1  0A89	FF		LEFT5:		MOV	R7,A				;RESTORE COUNT
 1588: 1  0A8A	E4				CLR	A
 1589: 1  0A8B	CC				XCH	A,R4				;GET THE RESTORATION BYTE
 1590: 1  0A8C	C5 2E				XCH	A,FP_DIG78			;DO THE SWAP
 1591: 1  0A8E	C5 2D				XCH	A,FP_DIG56
 1592: 1  0A90	C5 2C				XCH	A,FP_DIG34
 1593: 1  0A92	C5 2B				XCH	A,FP_DIG12
 1594: 1  0A94	C5 2A				XCH	A,FP_CARRY
 1595: 1  0A96	80 CB				SJMP	LEFT1+1
 1596: 1				;
 1597: 1  0A98			MUL_NIBBLE:
 1598: 1				;
 1599: 1				; Multiply the nibble in R7 by the FP_NIB locations
 1600: 1				; accumulate the product in FP_ACC
 1601: 1				;
 1602: 1				; Set up the pointers for multiplication
 1603: 1				;
 1604: 1  0A98	54 0F				ANL	A,#0FH				;STRIP OFF MS NIBBLE
 1605: 1  0A9A	FF				MOV	R7,A
 1606: 1  0A9B	78 3C				MOV	R0,#FP_ACC8
 1607: 1  0A9D	79 32				MOV	R1,#FP_NIB8
 1608: 1  0A9F	E4				CLR	A

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 30



 Line  I  Addr  Code            Source

 1609: 1  0AA0	F5 33				MOV	FP_ACCX,A
 1610: 1				;
 1611: 1  0AA2	18		MNLOOP:		DEC	R0				;BUMP POINTER TO PROPAGATE CARRY
 1612: 1  0AA3	26				ADD	A,@R0				;ATTEMPT TO FORCE CARRY
 1613: 1  0AA4	D4				DA	A				;BCD ADJUST
 1614: 1  0AA5	30 E4 03			JNB	ACC.4,MNL0			;DON'T ADJUST IF NO NEED
 1615: 1  0AA8	18				DEC	R0				;PROPAGATE CARRY TO THE NEXT DIGIT
 1616: 1  0AA9	06				INC	@R0				;DO THE ADJUSTING
 1617: 1  0AAA	08				INC	R0				;RESTORE R0
 1618: 1				;
 1619: 1  0AAB	D6		MNL0:		XCHD	A,@R0				;RESTORE INITIAL NUMBER
 1620: 1  0AAC	8F F0				MOV	B,R7				;GET THE NUBBLE TO MULTIPLY
 1621: 1  0AAE	E7				MOV	A,@R1				;GET THE OTHER NIBBLE
 1622: 1  0AAF	A4				MUL	AB					;DO THE MULTIPLY
 1623: 1  0AB0	75 F0 0A			MOV	B,#10				;NOW BCD ADJUST
 1624: 1  0AB3	84				DIV	AB
 1625: 1  0AB4	C5 F0				XCH	A,B				;GET THE REMAINDER
 1626: 1  0AB6	26				ADD	A,@R0				;PROPAGATE THE PARTIAL PRODUCTS
 1627: 1  0AB7	D4				DA	A				;BCD ADJUST
 1628: 1  0AB8	30 E4 02			JNB	ACC.4,MNL1			;PROPAGATE PARTIAL PRODUCT CARRY
 1629: 1  0ABB	05 F0				INC	B
 1630: 1				;
 1631: 1  0ABD	08		MNL1:		INC	R0
 1632: 1  0ABE	D6				XCHD	A,@R0				;SAVE THE NEW PRODUCT
 1633: 1  0ABF	18				DEC	R0
 1634: 1  0AC0	E5 F0				MOV	A,B				;GET BACK THE QUOTIENT
 1635: 1  0AC2	19				DEC	R1
 1636: 1  0AC3	B9 2A DC			CJNE	R1,#FP_NIB1-1,MNLOOP
 1637: 1				;
 1638: 1  0AC6	25 33				ADD	A,FP_ACCX			;GET THE OVERFLOW
 1639: 1  0AC8	D4				DA	A				;ADJUST
 1640: 1  0AC9	F6				MOV	@R0,A				;SAVE IT
 1641: 1  0ACA	22				RET					;EXIT
 1642: 1				;
 1643: 1				;***************************************************************
 1644: 1				;
 1645: 1  0ACB			LOAD_POINTERS:	; Load the ARG_STACK into R0 and bump R1
 1646: 1				;
 1647: 1				;***************************************************************
 1648: 1				;
 1649: 1  0ACB	A8 24				MOV	R0,ARG_STACK
 1650: 1  0ACD	74 06				MOV	A,#FP_NUMBER_SIZE
 1651: 1  0ACF	28				ADD	A,R0
 1652: 1  0AD0	F9				MOV	R1,A
 1653: 1  0AD1	22				RET
 1654: 1				;
 1655: 1				;***************************************************************
 1656: 1				;
 1657: 1  0AD2			MUL_DIV_EXP_AND_SIGN:
 1658: 1				;
 1659: 1				; Load the sign into R7, R6. R5 gets the sign for
 1660: 1				; multiply and divide.
 1661: 1				;
 1662: 1				;***************************************************************
 1663: 1				;
 1664: 1  0AD2	51 1F				ACALL	FP_CLEAR			;CLEAR INTERNAL MEMORY

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 31



 Line  I  Addr  Code            Source

 1665: 1				;
 1666: 1  0AD4	51 CB		MDES1:		ACALL	LOAD_POINTERS			;LOAD REGISTERS
 1667: 1  0AD6	E6				MOV	A,@R0				;ARG 1 EXP
 1668: 1  0AD7	FF				MOV	R7,A				;SAVED IN R7
 1669: 1  0AD8	E7				MOV	A,@R1				;ARG 2 EXP
 1670: 1  0AD9	FE				MOV	R6,A				;SAVED IN R6
 1671: 1  0ADA	18				DEC	R0				;BUMP POINTERS TO SIGN
 1672: 1  0ADB	19				DEC	R1
 1673: 1  0ADC	E6				MOV	A,@R0				;GET THE SIGN
 1674: 1  0ADD	FC				MOV	R4,A				;SIGN OF ARG1
 1675: 1  0ADE	E7				MOV	A,@R1				;GET SIGN OF NEXT ARG
 1676: 1  0ADF	FB				MOV	R3,A				;SIGN OF ARG2
 1677: 1  0AE0	6C				XRL	A,R4				;ACC GETS THE NEW SIGN
 1678: 1  0AE1	FD				MOV	R5,A				;R5 GETS THE NEW SIGN
 1679: 1				;
 1680: 1				; Bump the pointers to point at the LS digit
 1681: 1				;
 1682: 1  0AE2	18				DEC	R0
 1683: 1  0AE3	19				DEC	R1
 1684: 1				;
 1685: 1  0AE4	22				RET
 1686: 1				;
 1687: 1				;***************************************************************
 1688: 1				;
 1689: 1  0AE5			LOADR1_MANTISSA:
 1690: 1				;
 1691: 1				; Load the mantissa of R0 into FP_Digits
 1692: 1				;
 1693: 1				;***************************************************************
 1694: 1				;
 1695: 1  0AE5	C0 00				PUSH	R0B0				;SAVE REGISTER 1
 1696: 1  0AE7	78 2E				MOV	R0,#FP_DIG78			;SET UP THE POINTER
 1697: 1				;
 1698: 1  0AE9	E7		LOADR1:		MOV	A,@R1
 1699: 1  0AEA	F6				MOV	@R0,A
 1700: 1  0AEB	19				DEC	R1
 1701: 1  0AEC	18				DEC	R0
 1702: 1  0AED	B8 2A F9			CJNE	R0,#FP_CARRY,LOADR1
 1703: 1				;
 1704: 1  0AF0	D0 00				POP	R0B0
 1705: 1  0AF2	22				RET
 1706: 1				;
 1707: 1				;***************************************************************
 1708: 1				;
 1709: 1  0AF3			HEXSCAN:	; Scan a string to determine if it is a hex number
 1710: 1					; set carry if hex, else carry = 0
 1711: 1				;
 1712: 1				;***************************************************************
 1713: 1				;
 1714: 1  0AF3	71 B5				ACALL	GET_R1_CHARACTER
 1715: 1				;
 1716: 1  0AF5	E7		HEXSC1:		MOV	A,@R1				;GET THE CHARACTER
 1717: 1  0AF6	B1 7E				ACALL	DIGIT_CHECK			;SEE IF A DIGIT
 1718: 1  0AF8	40 0E				JC	HS1				;CONTINUE IF A DIGIT
 1719: 1  0AFA	71 0B				ACALL	HEX_CHECK			;SEE IF HEX
 1720: 1  0AFC	40 0A				JC	HS1

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 32



 Line  I  Addr  Code            Source

 1721: 1				;
 1722: 1  0AFE	C2 E5				CLR	ACC.5				;NO LOWER CASE
 1723: 1  0B00	B4 48 03			CJNE	A,#'H',HEXDON
 1724: 1  0B03	D3				SETB	C
 1725: 1  0B04	80 01				SJMP	HEXDO1				;NUMBER IS VALID HEX, MAYBE
 1726: 1				;
 1727: 1  0B06	C3		HEXDON:		CLR	C
 1728: 1				;
 1729: 1  0B07	22		HEXDO1:		RET
 1730: 1				;
 1731: 1  0B08	09		HS1:		INC	R1				;BUMP TO NEXT CHARACTER
 1732: 1  0B09	80 EA				SJMP	HEXSC1				;LOOP
 1733: 1				;
 1734: 1  0B0B			HEX_CHECK:	;CHECK FOR A VALID ASCII HEX, SET CARRY IF FOUND
 1735: 1				;
 1736: 1  0B0B	C2 E5				CLR	ACC.5				;WASTE LOWER CASE
 1737: 1					CMP	A,#'F'+1			;SEE IF F OR LESS
 1738+ 2  0B0D	B4 47 00	CJNE	A,#'F'+1,$+3
 1739: 1  0B10	40 01				JC	HC1
 1740: 1  0B12	22				RET
 1741: 1				;
 1742: 1  0B13			HC1:		CMP	A,#'A'				;SEE IF A OR GREATER
 1743+ 2  0B13	B4 41 00	CJNE	A,#'A',$+3
 1744: 1  0B16	B3				CPL	C
 1745: 1  0B17	22				RET
 1746: 1				;
 1747: 1				;***************************************************************
 1748: 1				;
 1749: 1  0B18			FLOATING_POINT_INPUT:	; Input a floating point number pointed to by R1
 1750: 1				;
 1751: 1				;***************************************************************
 1752: 1				;
 1753: 1  0B18	51 1F				ACALL	FP_CLEAR			;CLEAR EVERYTHING
 1754: 1  0B1A	71 B5				ACALL	GET_R1_CHARACTER
 1755: 1  0B1C	71 BB				ACALL	PLUS_MINUS_TEST
 1756: 1  0B1E	92 78				MOV	MSIGN,C				;SAVE THE MANTISSA SIGN
 1757: 1				;
 1758: 1				; Now, set up for input loop
 1759: 1				;
 1760: 1  0B20	78 34				MOV	R0,#FP_ACCC
 1761: 1  0B22	7E 7F				MOV	R6,#7FH				;BASE EXPONENT
 1762: 1  0B24	D2 D5				SETB	F0				;SET INITIAL FLAG
 1763: 1				;
 1764: 1  0B26	B1 7C		INLOOP:		ACALL	GET_DIGIT_CHECK
 1765: 1  0B28	50 07				JNC	GTEST				;IF NOT A CHARACTER, WHAT IS IT?
 1766: 1  0B2A	54 0F				ANL	A,#0FH				;STRIP ASCII
 1767: 1  0B2C	71 8E				ACALL	STDIG				;STORE THE DIGITS
 1768: 1				;
 1769: 1  0B2E	09		INLPIK:		INC	R1				;BUMP POINTER FOR LOOP
 1770: 1  0B2F	80 F5				SJMP	INLOOP				;LOOP FOR INPUT
 1771: 1				;
 1772: 1  0B31	B4 2E 0C	GTEST:		CJNE	A,#'.',GT1			;SEE IF A RADIX
 1773: 1  0B34	20 51 63			JB	FOUND_RADIX,INERR
 1774: 1  0B37	D2 51				SETB	FOUND_RADIX
 1775: 1  0B39	B8 34 F2			CJNE	R0,#FP_ACCC,INLPIK
 1776: 1  0B3C	D2 52				SETB	FIRST_RADIX			;SET IF FIRST RADIX

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 33



 Line  I  Addr  Code            Source

 1777: 1  0B3E	80 EE				SJMP	INLPIK				;GET ADDITIONAL DIGITS
 1778: 1				;
 1779: 1  0B40	20 D5 57	GT1:		JB	F0,INERR			;ERROR IF NOT CLEARED
 1780: 1  0B43	B4 65 02			CJNE	A,#'e',GT11			;CHECK FOR LOWER CASE
 1781: 1  0B46	80 03				SJMP	GT12
 1782: 1  0B48	B4 45 33	GT11:		CJNE	A,#'E',FINISH_UP
 1783: 1  0B4B	71 B4		GT12:		ACALL	INC_AND_GET_R1_CHARACTER
 1784: 1  0B4D	71 BB				ACALL	PLUS_MINUS_TEST
 1785: 1  0B4F	92 50				MOV	XSIGN,C				;SAVE SIGN STATUS
 1786: 1  0B51	B1 7C				ACALL	GET_DIGIT_CHECK
 1787: 1  0B53	50 45				JNC	INERR
 1788: 1				;
 1789: 1  0B55	54 0F				ANL	A,#0FH				;STRIP ASCII BIAS OFF THE CHARACTER
 1790: 1  0B57	FD				MOV	R5,A				;SAVE THE CHARACTER IN R5
 1791: 1				;
 1792: 1  0B58	09		GT2:		INC	R1
 1793: 1  0B59	B1 7C				ACALL	GET_DIGIT_CHECK
 1794: 1  0B5B	50 0D				JNC	FINISH1
 1795: 1  0B5D	54 0F				ANL	A,#0FH				;STRIP OFF BIAS
 1796: 1  0B5F	CD				XCH	A,R5				;GET THE LAST DIGIT
 1797: 1  0B60	75 F0 0A			MOV	B,#10				;MULTIPLY BY TEN
 1798: 1  0B63	A4				MUL	AB
 1799: 1  0B64	2D				ADD	A,R5				;ADD TO ORIGINAL VALUE
 1800: 1  0B65	FD				MOV	R5,A				;SAVE IN R5
 1801: 1  0B66	50 F0				JNC	GT2					;LOOP IF NO CARRY
 1802: 1  0B68	7D FF				MOV	R5,#0FFH			;FORCE AN ERROR
 1803: 1				;
 1804: 1  0B6A	ED		FINISH1:	MOV	A,R5				;GET THE SIGN
 1805: 1  0B6B	30 50 09			JNB	XSIGN,POSNUM			;SEE IF EXPONENT IS POS OR NEG
 1806: 1  0B6E	C3				CLR	C
 1807: 1  0B6F	9E				SUBB	A,R6
 1808: 1  0B70	F4				CPL	A
 1809: 1  0B71	04				INC	A
 1810: 1  0B72	40 09				JC	FINISH2
 1811: 1  0B74	74 01				MOV	A,#01H
 1812: 1  0B76	22				RET
 1813: 1				;
 1814: 1  0B77	2E		POSNUM:		ADD	A,R6				;ADD TO EXPONENT
 1815: 1  0B78	50 03				JNC	FINISH2
 1816: 1				;
 1817: 1  0B7A	74 02		POSNM1:		MOV	A,#02H
 1818: 1  0B7C	22				RET
 1819: 1				;
 1820: 1  0B7D	CE		FINISH2:	XCH	A,R6				;SAVE THE EXPONENT
 1821: 1				;
 1822: 1  0B7E			FINISH_UP:
 1823: 1				;
 1824: 1  0B7E	8E 30				MOV	FP_EXP,R6			;SAVE EXPONENT
 1825: 1  0B80	B8 34 02			CJNE	R0,#FP_ACCC,FINISH_UP1
 1826: 1  0B83	51 1F				ACALL	FP_CLEAR			;CLEAR THE MEMORY IF 0
 1827: 1  0B85	E5 24		FINISH_UP1:	MOV	A,ARG_STACK			;GET THE ARG STACK
 1828: 1  0B87	C3				CLR	C
 1829: 1  0B88	94 0C				SUBB	A,#FP_NUMBER_SIZE+FP_NUMBER_SIZE
 1830: 1  0B8A	F5 24				MOV	ARG_STACK,A			;ADJUST FOR STORE
 1831: 1  0B8C	21 90				AJMP	PACK
 1832: 1				;

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 34



 Line  I  Addr  Code            Source

 1833: 1  0B8E	C2 D5		STDIG:		CLR	F0				;CLEAR INITIAL DESIGNATOR
 1834: 1  0B90	70 0B				JNZ	STDIG1				;CONTINUE IF NOT ZERO
 1835: 1  0B92	B8 34 08			CJNE	R0,#FP_ACCC,STDIG1
 1836: 1  0B95	30 52 04			JNB	FIRST_RADIX,RET_X
 1837: 1				;
 1838: 1  0B98	DE 02		DECX:		DJNZ	R6,RET_X
 1839: 1				;
 1840: 1  0B9A	74 FF		INERR:		MOV	A,#0FFH
 1841: 1				;
 1842: 1  0B9C	22		RET_X:		RET
 1843: 1				;
 1844: 1  0B9D	20 53 02	STDIG1:		JB	DONE_LOAD,FRTEST
 1845: 1  0BA0	C2 52				CLR	FIRST_RADIX
 1846: 1				;
 1847: 1  0BA2	20 52 F3	FRTEST:		JB	FIRST_RADIX,DECX
 1848: 1				;
 1849: 1  0BA5	20 51 01	FDTEST:		JB	FOUND_RADIX,FDT1
 1850: 1  0BA8	0E				INC	R6
 1851: 1				;
 1852: 1  0BA9	20 53 F0	FDT1:		JB	DONE_LOAD,RET_X
 1853: 1  0BAC	B8 3D 02			CJNE	R0,#FP_ACC8+1,FDT2
 1854: 1  0BAF	D2 53				SETB	DONE_LOAD
 1855: 1				;
 1856: 1  0BB1	F6		FDT2:		MOV	@R0,A				;SAVE THE STRIPPED ACCUMULATOR
 1857: 1  0BB2	08				INC	R0				;BUMP THE POINTER
 1858: 1  0BB3	22				RET					;EXIT
 1859: 1				;
 1860: 1				;***************************************************************
 1861: 1				;
 1862: 1				; I/O utilities
 1863: 1				;
 1864: 1				;***************************************************************
 1865: 1				;
 1866: 1  0BB4			INC_AND_GET_R1_CHARACTER:
 1867: 1				;
 1868: 1  0BB4	09				INC	R1
 1869: 1				;
 1870: 1  0BB5			GET_R1_CHARACTER:
 1871: 1				;
 1872: 1  0BB5	E7				MOV	A,@R1				;GET THE CHARACTER
 1873: 1  0BB6	B4 20 0C			CJNE	A,#' ',PMT1			;SEE IF A SPACE
 1874: 1				;
 1875: 1				; Kill spaces
 1876: 1				;
 1877: 1  0BB9	80 F9				SJMP	INC_AND_GET_R1_CHARACTER
 1878: 1				;
 1879: 1  0BBB			PLUS_MINUS_TEST:
 1880: 1				;
 1881: 1  0BBB	B4 2B 02			CJNE	A,#'+',PMT0
 1882: 1  0BBE	80 04				SJMP	PMT3
 1883: 1  0BC0	B4 2D 02	PMT0:		CJNE	A,#'-',PMT1
 1884: 1				;
 1885: 1  0BC3	D3		PMT2:		SETB	C
 1886: 1				;
 1887: 1  0BC4	09		PMT3:		INC	R1
 1888: 1				;

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 35



 Line  I  Addr  Code            Source

 1889: 1  0BC5	22		PMT1:		RET
 1890: 1				;
 1891: 1				;***************************************************************
 1892: 1				;
 1893: 1  0BC6			FLOATING_POINT_OUTPUT:	; Output the number, format is in location 25
 1894: 1				;
 1895: 1				; IF FORMAT = 00 - FREE FLOATING
 1896: 1				;           = FX - EXPONENTIAL (X IS THE NUMBER OF SIG DIGITS)
 1897: 1				;           = NX - N = NUM BEFORE RADIX, X = NUM AFTER RADIX
 1898: 1				;                  N + X = 8 MAX
 1899: 1				;
 1900: 1				;***************************************************************
 1901: 1				;
 1902: 1  0BC6	51 D4				ACALL	MDES1				;GET THE NUMBER TO OUTPUT, R0 IS POINTER
 1903: 1  0BC8	11 28				ACALL	POP_AND_EXIT			;OUTPUT POPS THE STACK
 1904: 1  0BCA	EF				MOV	A,R7
 1905: 1  0BCB	FE				MOV	R6,A				;PUT THE EXPONENT IN R6
 1906: 1  0BCC	31 EB				ACALL	UNPACK_R0			;UNPACK THE NUMBER
 1907: 1  0BCE	78 2B				MOV	R0,#FP_NIB1			;POINT AT THE NUMBER
 1908: 1  0BD0	E5 25				MOV	A,FORMAT			;GET THE FORMAT
 1909: 1  0BD2	FB				MOV	R3,A				;SAVE IN CASE OF EXP FORMAT
 1910: 1  0BD3	60 49				JZ	FREE				;FREE FLOATING?
 1911: 1					CMP	A,#0F0H				;SEE IF EXPONENTIAL
 1912+ 2  0BD5	B4 F0 00	CJNE	A,#0F0H,$+3
 1913: 1  0BD8	50 73				JNC	EXPOUT
 1914: 1				;
 1915: 1				; If here, must be integer USING format
 1916: 1				;
 1917: 1  0BDA	EE				MOV	A,R6				;GET THE EXPONENT
 1918: 1  0BDB	70 02				JNZ	FPO1
 1919: 1  0BDD	7E 80				MOV	R6,#80H
 1920: 1  0BDF	EB		FPO1:		MOV	A,R3				;GET THE FORMAT
 1921: 1  0BE0	C4				SWAP	A				;SPLIT INTEGER AND FRACTION
 1922: 1  0BE1	54 0F				ANL	A,#0FH
 1923: 1  0BE3	FA				MOV	R2,A				;SAVE INTEGER
 1924: 1  0BE4	91 B3				ACALL	NUM_LT				;GET THE NUMBER OF INTEGERS
 1925: 1  0BE6	CA				XCH	A,R2				;FLIP FOR SUBB
 1926: 1  0BE7	C3				CLR	C
 1927: 1  0BE8	9A				SUBB	A,R2
 1928: 1  0BE9	FF				MOV	R7,A
 1929: 1  0BEA	50 06				JNC	FPO2
 1930: 1  0BEC	7D 3F				MOV	R5,#'?'				;OUTPUT A QUESTION MARK
 1931: 1  0BEE	91 E8				ACALL	SOUT1				;NUMBER IS TOO LARGE FOR FORMAT
 1932: 1  0BF0	81 1E				AJMP	FREE
 1933: 1  0BF2	BA 00 07	FPO2:		CJNE	R2,#00,USING0			;SEE IF ZERO
 1934: 1  0BF5	1F				DEC	R7
 1935: 1  0BF6	91 D5				ACALL	SS7
 1936: 1  0BF8	91 E2				ACALL	ZOUT				;OUTPUT A ZERO
 1937: 1  0BFA	80 06				SJMP	USING1
 1938: 1				;
 1939: 1  0BFC	91 D5		USING0:		ACALL	SS7				;OUTPUT SPACES, IF NEED TO
 1940: 1  0BFE	EA				MOV	A,R2				;OUTPUT DIGITS
 1941: 1  0BFF	FF				MOV	R7,A
 1942: 1  0C00	91 97				ACALL	OUTR0
 1943: 1				;
 1944: 1  0C02	EB		USING1:		MOV	A,R3

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 36



 Line  I  Addr  Code            Source

 1945: 1  0C03	54 0F				ANL	A,#0FH				;GET THE NUMBER RIGHT OF DP
 1946: 1  0C05	FA				MOV	R2,A				;SAVE IT
 1947: 1  0C06	60 BD				JZ	PMT1				;EXIT IF ZERO
 1948: 1  0C08	91 DE				ACALL	ROUT				;OUTPUT DP
 1949: 1  0C0A	91 BC				ACALL	NUM_RT
 1950: 1  0C0C	B5 02 03			CJNE	A,2,USINGX			;COMPARE A TO R2
 1951: 1				;
 1952: 1  0C0F	EA		USINGY:		MOV	A,R2
 1953: 1  0C10	81 CC				AJMP	Z7R7
 1954: 1				;
 1955: 1  0C12	50 FB		USINGX:		JNC	USINGY
 1956: 1				;
 1957: 1  0C14	CA		USING2:		XCH	A,R2
 1958: 1  0C15	C3				CLR	C
 1959: 1  0C16	9A				SUBB	A,R2
 1960: 1  0C17	CA				XCH	A,R2
 1961: 1  0C18	91 CC				ACALL	Z7R7				;OUTPUT ZEROS IF NEED TO
 1962: 1  0C1A	EA				MOV	A,R2
 1963: 1  0C1B	FF				MOV	R7,A
 1964: 1  0C1C	81 97				AJMP	OUTR0
 1965: 1				;
 1966: 1				; First, force exponential output, if need to
 1967: 1				;
 1968: 1  0C1E	EE		FREE:		MOV	A,R6				;GET THE EXPONENT
 1969: 1  0C1F	70 04				JNZ	FREE1				;IF ZERO, PRINT IT
 1970: 1  0C21	91 E6				ACALL	SOUT
 1971: 1  0C23	81 E2				AJMP	ZOUT
 1972: 1				;
 1973: 1  0C25	7B F0		FREE1:		MOV	R3,#0F0H			;IN CASE EXP NEEDED
 1974: 1  0C27	74 77				MOV	A,#80H-DIGIT-DIGIT-1
 1975: 1  0C29	2E				ADD	A,R6
 1976: 1  0C2A	40 21				JC	EXPOUT
 1977: 1  0C2C	94 F7				SUBB	A,#0F7H
 1978: 1  0C2E	40 1D				JC	EXPOUT
 1979: 1				;
 1980: 1				; Now, just print the number
 1981: 1				;
 1982: 1  0C30	91 D7				ACALL	SINOUT				;PRINT THE SIGN OF THE NUMBER
 1983: 1  0C32	91 B3				ACALL	NUM_LT				;GET THE NUMBER LEFT OF DP
 1984: 1  0C34	B4 08 02			CJNE	A,#8,FREE4
 1985: 1  0C37	81 97				AJMP	OUTR0
 1986: 1				;
 1987: 1  0C39	91 97		FREE4:		ACALL	OUTR0
 1988: 1  0C3B	91 A9				ACALL	ZTEST				;TEST FOR TRAILING ZEROS
 1989: 1  0C3D	60 57				JZ	U_RET				;DONE IF ALL TRAILING ZEROS
 1990: 1  0C3F	91 DE				ACALL	ROUT				;OUTPUT RADIX
 1991: 1				;
 1992: 1  0C41	7F 01		FREE2:		MOV	R7,#1				;OUTPUT ONE DIGIT
 1993: 1  0C43	91 97				ACALL	OUTR0
 1994: 1  0C45	70 4F				JNZ	U_RET
 1995: 1  0C47	91 A9				ACALL	ZTEST
 1996: 1  0C49	60 4B				JZ	U_RET
 1997: 1  0C4B	80 F4				SJMP	FREE2				;LOOP
 1998: 1				;
 1999: 1  0C4D	91 D7		EXPOUT:		ACALL	SINOUT				;PRINT THE SIGN
 2000: 1  0C4F	7F 01				MOV	R7,#1				;OUTPUT ONE CHARACTER

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 37



 Line  I  Addr  Code            Source

 2001: 1  0C51	91 97				ACALL	OUTR0
 2002: 1  0C53	91 DE				ACALL	ROUT				;OUTPUT RADIX
 2003: 1  0C55	EB				MOV	A,R3				;GET FORMAT
 2004: 1  0C56	54 0F				ANL	A,#0FH				;STRIP INDICATOR
 2005: 1  0C58	60 06				JZ	EXPOTX
 2006: 1				;
 2007: 1  0C5A	FF				MOV	R7,A				;OUTPUT THE NUMBER OF DIGITS
 2008: 1  0C5B	1F				DEC	R7				;ADJUST BECAUSE ONE CHAR ALREADY OUT
 2009: 1  0C5C	91 97				ACALL	OUTR0
 2010: 1  0C5E	80 02				SJMP	EXPOT4
 2011: 1				;
 2012: 1  0C60	91 41		EXPOTX:		ACALL	FREE2				;OUTPUT UNTIL TRAILING ZEROS
 2013: 1				;
 2014: 1  0C62	91 E6		EXPOT4:		ACALL	SOUT				;OUTPUT A SPACE
 2015: 1  0C64	7D 45				MOV	R5,#'E'
 2016: 1  0C66	91 E8				ACALL	SOUT1				;OUTPUT AN E
 2017: 1  0C68	EE				MOV	A,R6				;GET THE EXPONENT
 2018: 1  0C69	60 04				JZ	XOUT0				;EXIT IF ZERO
 2019: 1  0C6B	14				DEC	A				;ADJUST FOR THE DIGIT ALREADY OUTPUT
 2020: 1  0C6C	B4 80 05			CJNE	A,#80H,XOUT2			;SEE WHAT IT IS
 2021: 1				;
 2022: 1  0C6F	91 E6		XOUT0:		ACALL	SOUT
 2023: 1  0C71	E4				CLR	A
 2024: 1  0C72	80 0C				SJMP	XOUT4
 2025: 1				;
 2026: 1  0C74	40 06		XOUT2:		JC	XOUT3				;NEGATIVE EXPONENT
 2027: 1  0C76	7D 2B				MOV	R5,#'+'				;OUTPUT A PLUS SIGN
 2028: 1  0C78	91 E8				ACALL	SOUT1
 2029: 1  0C7A	80 04				SJMP	XOUT4
 2030: 1				;
 2031: 1  0C7C	91 DA		XOUT3:		ACALL	MOUT
 2032: 1  0C7E	F4				CPL	A				;FLIP BITS
 2033: 1  0C7F	04				INC	A				;BUMP
 2034: 1				;
 2035: 1  0C80	C2 E7		XOUT4:		CLR	ACC.7
 2036: 1  0C82	F8				MOV	R0,A
 2037: 1  0C83	7A 00				MOV	R2,#0
 2038: 1  0C85	79 27				MOV	R1,#LOW CONVT			;CONVERSION LOCATION
 2039: 1  0C87	7B 00				MOV	R3,#HIGH CONVT
 2040: 1  0C89	B1 0E				ACALL	CONVERT_BINARY_TO_ASCII_STRING
 2041: 1  0C8B	78 27				MOV	R0,#LOW CONVT			;NOW, OUTPUT EXPONENT
 2042: 1				;
 2043: 1  0C8D	E6		EXPOT5:		MOV	A,@R0				;GET THE CHARACTER
 2044: 1  0C8E	FD				MOV	R5,A				;OUTPUT IT
 2045: 1  0C8F	91 E8				ACALL	SOUT1
 2046: 1  0C91	08				INC	R0				;BUMP THE POINTER
 2047: 1  0C92	E8				MOV	A,R0				;GET THE POINTER
 2048: 1  0C93	B5 01 F7			CJNE	A,R1B0,EXPOT5			;LOOP
 2049: 1				;
 2050: 1  0C96	22		U_RET:		RET					;EXIT
 2051: 1				;
 2052: 1  0C97			OUTR0:	; Output the characters pointed to by R0, also bias ascii
 2053: 1				;
 2054: 1  0C97	EF				MOV	A,R7				;GET THE COUNTER
 2055: 1  0C98	60 0E				JZ	OUTR				;EXIT IF DONE
 2056: 1  0C9A	E6				MOV	A,@R0				;GET THE NUMBER

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 38



 Line  I  Addr  Code            Source

 2057: 1  0C9B	44 30				ORL	A,#30H				;ASCII BIAS
 2058: 1  0C9D	08				INC	R0				;BUMP POINTER AND COUNTER
 2059: 1  0C9E	1F				DEC	R7
 2060: 1  0C9F	FD				MOV	R5,A				;PUT CHARACTER IN OUTPUT REGISTER
 2061: 1  0CA0	91 E8				ACALL	SOUT1				;OUTPUT THE CHARACTER
 2062: 1  0CA2	E4				CLR	A				;JUST FOR TEST
 2063: 1  0CA3	B8 33 F1			CJNE	R0,#FP_NIB8+1,OUTR0
 2064: 1  0CA6	74 55				MOV	A,#55H				;KNOW WHERE EXIT OCCURED
 2065: 1				;
 2066: 1  0CA8	22		OUTR:		RET
 2067: 1				;
 2068: 1  0CA9	A9 00		ZTEST:		MOV	R1,R0B0				;GET POINTER REGISTER
 2069: 1				;
 2070: 1  0CAB	E7		ZT0:		MOV	A,@R1				;GET THE VALUE
 2071: 1  0CAC	70 04				JNZ	ZT1
 2072: 1  0CAE	09				INC	R1				;BUMP POINTER
 2073: 1  0CAF	B9 33 F9			CJNE	R1,#FP_NIB8+1,ZT0
 2074: 1				;
 2075: 1  0CB2	22		ZT1:		RET
 2076: 1				;
 2077: 1  0CB3	EE		NUM_LT:		MOV	A,R6				;GET EXPONENT
 2078: 1  0CB4	C3				CLR	C				;GET READY FOR SUBB
 2079: 1  0CB5	94 80				SUBB	A,#80H				;SUB EXPONENT BIAS
 2080: 1  0CB7	50 01				JNC	NL1				;OK IF NO CARRY
 2081: 1  0CB9	E4				CLR	A				;NO DIGITS LEFT
 2082: 1				;
 2083: 1  0CBA	FF		NL1:		MOV	R7,A				;SAVE THE COUNT
 2084: 1  0CBB	22				RET
 2085: 1				;
 2086: 1  0CBC	C3		NUM_RT:		CLR	C				;SUBB AGAIN
 2087: 1  0CBD	74 80				MOV	A,#80H				;EXPONENT BIAS
 2088: 1  0CBF	9E				SUBB	A,R6				;GET THE BIASED EXPONENT
 2089: 1  0CC0	50 01				JNC	NR1
 2090: 1  0CC2	E4				CLR	A
 2091: 1				;
 2092: 1  0CC3	22		NR1:		RET					;EXIT
 2093: 1				;
 2094: 1  0CC4	EF		SPACE7:		MOV	A,R7				;GET THE NUMBER OF SPACES
 2095: 1  0CC5	60 FC				JZ	NR1				;EXIT IF ZERO
 2096: 1  0CC7	91 E6				ACALL	SOUT				;OUTPUT A SPACE
 2097: 1  0CC9	1F				DEC	R7				;BUMP COUNTER
 2098: 1  0CCA	80 F8				SJMP	SPACE7				;LOOP
 2099: 1				;
 2100: 1  0CCC	FF		Z7R7:		MOV	R7,A
 2101: 1				;
 2102: 1  0CCD	EF		ZERO7:		MOV	A,R7				;GET COUNTER
 2103: 1  0CCE	60 F3				JZ	NR1				;EXIT IF ZERO
 2104: 1  0CD0	91 E2				ACALL	ZOUT				;OUTPUT A ZERO
 2105: 1  0CD2	1F				DEC	R7				;BUMP COUNTER
 2106: 1  0CD3	80 F8				SJMP	ZERO7				;LOOP
 2107: 1				;
 2108: 1  0CD5	91 C4		SS7:		ACALL	SPACE7
 2109: 1				;
 2110: 1  0CD7	EC		SINOUT:		MOV	A,R4				;GET THE SIGN
 2111: 1  0CD8	60 0C				JZ	SOUT				;OUTPUT A SPACE IF ZERO
 2112: 1				;

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 39



 Line  I  Addr  Code            Source

 2113: 1  0CDA	7D 2D		MOUT:		MOV	R5,#'-'
 2114: 1  0CDC	80 0A				SJMP	SOUT1				;OUTPUT A MINUS IF NOT
 2115: 1				;
 2116: 1  0CDE	7D 2E		ROUT:		MOV	R5,#'.'				;OUTPUT A RADIX
 2117: 1  0CE0	80 06				SJMP	SOUT1
 2118: 1				;
 2119: 1  0CE2	7D 30		ZOUT:		MOV	R5,#'0'				;OUTPUT A ZERO
 2120: 1  0CE4	80 02				SJMP	SOUT1
 2121: 1				;
 2122: 1  0CE6	7D 20		SOUT:		MOV	R5,#' '				;OUTPUT A SPACE
 2123: 1				;
 2124: 1  0CE8	A1 89		SOUT1:		AJMP	R5OUT
 2125: 1				;
 2126: 1				;
 2127: 1  0CEA	75 F0 0A	MULNUM10:	MOV	B,#10
 2128: 1				;
 2129: 1				;***************************************************************
 2130: 1				;
 2131: 1  0CED			MULNUM:	; Take the next digit in the acc (masked to 0FH)
 2132: 1				; accumulate in R3:R1
 2133: 1				;
 2134: 1				;***************************************************************
 2135: 1				;
 2136: 1  0CED	C0 E0				PUSH	ACC				;SAVE ACC
 2137: 1  0CEF	C0 F0				PUSH	B				;SAVE MULTIPLIER
 2138: 1  0CF1	E9				MOV	A,R1				;PUT LOW ORDER BITS IN ACC
 2139: 1  0CF2	A4				MUL	AB				;DO THE MULTIPLY
 2140: 1  0CF3	F9				MOV	R1,A				;PUT THE RESULT BACK
 2141: 1  0CF4	EB				MOV	A,R3				;GET THE HIGH ORDER BYTE
 2142: 1  0CF5	AB F0				MOV	R3,B				;SAVE THE OVERFLOW
 2143: 1  0CF7	D0 F0				POP	B				;GET THE MULTIPLIER
 2144: 1  0CF9	A4				MUL	AB				;DO IT
 2145: 1  0CFA	A2 D2				MOV	C,OV				;SAVE OVERFLOW IN F0
 2146: 1  0CFC	92 D5				MOV	F0,C
 2147: 1  0CFE	2B				ADD	A,R3				;ADD OVERFLOW TO HIGH RESULT
 2148: 1  0CFF	FB				MOV	R3,A				;PUT IT BACK
 2149: 1  0D00	D0 E0				POP	ACC				;GET THE ORIGINAL ACC BACK
 2150: 1  0D02	72 D5				ORL	C,F0				;OR CARRY AND OVERFLOW
 2151: 1  0D04	40 07				JC	MULX				;NO GOOD IF THE CARRY IS SET
 2152: 1				;
 2153: 1  0D06	54 0F		MUL11:		ANL	A,#0FH				;MASK OFF HIGH ORDER BITS
 2154: 1  0D08	29				ADD	A,R1				;NOW ADD THE ACC
 2155: 1  0D09	F9				MOV	R1,A				;PUT IT BACK
 2156: 1  0D0A	E4				CLR	A				;PROPAGATE THE CARRY
 2157: 1  0D0B	3B				ADDC	A,R3
 2158: 1  0D0C	FB				MOV	R3,A				;PUT IT BACK
 2159: 1				;
 2160: 1  0D0D	22		MULX:		RET					;EXIT WITH OR WITHOUT CARRY
 2161: 1				;
 2162: 1				;***************************************************************
 2163: 1				;
 2164: 1  0D0E			CONVERT_BINARY_TO_ASCII_STRING:
 2165: 1				;
 2166: 1				;R1 contains the address of the string
 2167: 1				;R0 contains the value to convert
 2168: 1				;DPTR, R7, R6, and ACC gets clobbered

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 40



 Line  I  Addr  Code            Source

 2169: 1				;
 2170: 1				;***************************************************************
 2171: 1				;
 2172: 1  0D0E	E4				CLR	A				;NO LEADING ZEROS
 2173: 1  0D0F	90 27 10			MOV	DPTR,#10000			;SUBTRACT 10000
 2174: 1  0D12	B1 2B				ACALL	RSUB				;DO THE SUBTRACTION
 2175: 1  0D14	90 03 E8			MOV	DPTR,#1000			;NOW 1000
 2176: 1  0D17	B1 2B				ACALL	RSUB
 2177: 1  0D19	90 00 64			MOV	DPTR,#100			;NOW 100
 2178: 1  0D1C	B1 2B				ACALL	RSUB
 2179: 1  0D1E	90 00 0A			MOV	DPTR,#10			;NOW 10
 2180: 1  0D21	B1 2B				ACALL	RSUB
 2181: 1  0D23	90 00 01			MOV	DPTR,#1				;NOW 1
 2182: 1  0D26	B1 2B				ACALL	RSUB
 2183: 1  0D28	60 20				JZ	RSUB2				;JUMP OVER RET
 2184: 1				;
 2185: 1  0D2A	22		RSUB_R:		RET
 2186: 1				;
 2187: 1  0D2B	7E FF		RSUB:		MOV	R6,#-1				;SET UP THE COUNTER
 2188: 1				;
 2189: 1  0D2D	0E		RSUB1:		INC	R6				;BUMP THE COUNTER
 2190: 1  0D2E	CA				XCH	A,R2				;DO A FAST COMPARE
 2191: 1					CMP	A,DPH
 2192+ 2  0D2F	B5 83 00	CJNE	A,DPH,$+3
 2193: 1  0D32	CA				XCH	A,R2
 2194: 1  0D33	40 12				JC	FAST_DONE
 2195: 1  0D35	C8				XCH	A,R0				;GET LOW BYTE
 2196: 1  0D36	95 82				SUBB	A,DPL				;SUBTRACT, CARRY IS CLEARED
 2197: 1  0D38	C8				XCH	A,R0				;PUT IT BACK
 2198: 1  0D39	CA				XCH	A,R2				;GET THE HIGH BYTE
 2199: 1  0D3A	95 83				SUBB	A,DPH				;ADD THE HIGH BYTE
 2200: 1  0D3C	CA				XCH	A,R2				;PUT IT BACK
 2201: 1  0D3D	50 EE				JNC	RSUB1				;LOOP UNTIL CARRY
 2202: 1				;
 2203: 1  0D3F	C8				XCH	A,R0
 2204: 1  0D40	25 82				ADD	A,DPL				;RESTORE R0
 2205: 1  0D42	C8				XCH	A,R0
 2206: 1  0D43	CA				XCH	A,R2
 2207: 1  0D44	35 83				ADDC	A,DPH
 2208: 1  0D46	CA				XCH	A,R2
 2209: 1				;
 2210: 1  0D47			FAST_DONE:
 2211: 1				;
 2212: 1  0D47	4E				ORL	A,R6				;OR THE COUNT VALUE
 2213: 1  0D48	60 E0				JZ	RSUB_R				;RETURN IF ZERO
 2214: 1				;
 2215: 1  0D4A	74 30		RSUB2:		MOV	A,#'0'				;GET THE ASCII BIAS
 2216: 1  0D4C	2E				ADD	A,R6				;ADD THE COUNT
 2217: 1				;
 2218: 1  0D4D	F7		RSUB4:		MOV	@R1,A				;PLACE THE VALUE IN MEMORY
 2219: 1  0D4E	09				INC	R1
 2220: 1				;
 2221: 1  0D4F	22				RET					;EXIT
 2222: 1				;
 2223: 1				;***************************************************************
 2224: 1				;

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 41



 Line  I  Addr  Code            Source

 2225: 1  0D50			HEXOUT:	; Output the hex number in R3:R1, supress leading zeros, if set
 2226: 1				;
 2227: 1				;***************************************************************
 2228: 1				;
 2229: 1  0D50	91 E6				ACALL	SOUT				;OUTPUT A SPACE
 2230: 1  0D52	A2 36				MOV	C,ZSURP				;GET ZERO SUPPRESSION BIT
 2231: 1  0D54	92 33				MOV	ADD_IN,C
 2232: 1  0D56	EB				MOV	A,R3				;GET HIGH NIBBLE AND PRINT IT
 2233: 1  0D57	B1 73				ACALL	HOUTHI
 2234: 1  0D59	EB				MOV	A,R3
 2235: 1  0D5A	B1 74				ACALL	HOUTLO
 2236: 1				;
 2237: 1  0D5C	C2 33		HEX2X:		CLR	ADD_IN				;DON'T SUPPRESS ZEROS
 2238: 1  0D5E	E9				MOV	A,R1				;GET LOW NIBBLE AND PRINT IT
 2239: 1  0D5F	B1 73				ACALL	HOUTHI
 2240: 1  0D61	E9				MOV	A,R1
 2241: 1  0D62	B1 74				ACALL	HOUTLO
 2242: 1  0D64	7D 48				MOV	R5,#'H'				;OUTPUT H TO INDICATE HEX MODE
 2243: 1				;
 2244: 1  0D66	81 E8		SOUT_1:		AJMP	SOUT1
 2245: 1				;
 2246: 1  0D68	C2 33		HOUT1:		CLR	ADD_IN				;PRINTED SOMETHING, SO CLEAR ADD_IN
 2247: 1  0D6A	24 90				ADD	A,#90H				;CONVERT TO ASCII
 2248: 1  0D6C	D4				DA	A
 2249: 1  0D6D	34 40				ADDC	A,#40H
 2250: 1  0D6F	D4				DA	A				;GOT IT HERE
 2251: 1  0D70	FD				MOV	R5,A				;OUTPUT THE BYTE
 2252: 1  0D71	80 F3				SJMP	SOUT_1
 2253: 1				;
 2254: 1  0D73	C4		HOUTHI:		SWAP	A				;SWAP TO OUTPUT HIGH NIBBLE
 2255: 1				;
 2256: 1  0D74	54 0F		HOUTLO:		ANL	A,#0FH				;STRIP
 2257: 1  0D76	70 F0				JNZ	HOUT1				;PRINT IF NOT ZERO
 2258: 1  0D78	30 33 ED			JNB	ADD_IN,HOUT1			;OUTPUT A ZERO IF NOT SUPRESSED
 2259: 1  0D7B	22				RET
 2260: 1				;
 2261: 1				;
 2262: 1  0D7C			GET_DIGIT_CHECK:	; Get a character, then check for digit
 2263: 1				;
 2264: 1  0D7C	71 B5				ACALL	GET_R1_CHARACTER
 2265: 1				;
 2266: 1  0D7E			DIGIT_CHECK:	;CHECK FOR A VALID ASCII DIGIT, SET CARRY IF FOUND
 2267: 1				;
 2268: 1					CMP	A,#'9'+1			;SEE IF ASCII 9 OR LESS
 2269+ 2  0D7E	B4 3A 00	CJNE	A,#'9'+1,$+3
 2270: 1  0D81	40 01				JC	DC1
 2271: 1  0D83	22				RET
 2272: 1				;
 2273: 1  0D84			DC1:		CMP	A,#'0'				;SEE IF ASCII 0 OR GREATER
 2274+ 2  0D84	B4 30 00	CJNE	A,#'0',$+3
 2275: 1  0D87	B3				CPL	C
 2276: 1  0D88	22				RET
 2277: 1				;
 2278: 1
 2279: 1  0D89	C0 E0		R5OUT:		PUSH	ACC				; ME
 2280: 1  0D8B	C0 00				PUSH	00H

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 42



 Line  I  Addr  Code            Source

 2281: 1  0D8D	A8 50				MOV	R0,FPCHR_OUT
 2282: 1  0D8F	ED				MOV	A,R5				; ME
 2283: 1  0D90	F6				MOV	@R0,A
 2284: 1  0D91	05 50				INC	FPCHR_OUT
 2285: 1  0D93	D0 00				POP	00H
 2286: 1  0D95	D0 E0				POP	ACC				; ME
 2287: 1  0D97	22				RET
 2288: 1
 2289: 1  0D98	01 0E		SQ_ERR:		JMP	BADPRM				; me
 2290: 1
 2291: 1			; Pop the ARG STACK and check for overflow
 2292: 1  0D9A			INC_ASTKA:
 2293: 1  0D9A	74 06				MOV	A,#FP_NUMBER_SIZE		;number to pop
 2294: 1  0D9C	80 16				SJMP	SETREG1
 2295: 1
 2296: 1			;Push ARG STACK and check for underflow
 2297: 1  0D9E			DEC_ASTKA:
 2298: 1  0D9E	74 FA				MOV	A,#-FP_NUMBER_SIZE
 2299: 1  0DA0	25 24				ADD	A,ARG_STACK
 2300: 1					CMP	A,#0
 2301+ 2  0DA2	B4 00 00	CJNE	A,#0,$+3
 2302: 1  0DA5	40 28				JC	E4YY
 2303: 1  0DA7	F5 24				MOV	ARG_STACK,A
 2304: 1  0DA9	F9				MOV	R1,A
 2305: 1  0DAA	22		SRT:		RET
 2306: 1
 2307: 1  0DAB	B1 9A		POPAS:		ACALL	INC_ASTKA
 2308: 1  0DAD	A1 C6				AJMP	VARCOP				;COPY THE VARIABLE
 2309: 1
 2310: 1  0DAF	B1 9E		PUSHAS:		ACALL	DEC_ASTKA
 2311: 1  0DB1	A1 C6				AJMP	VARCOP
 2312: 1
 2313: 1  0DB3	E4		SETREG:		CLR	A				;DON'T POP ANYTHING
 2314: 1  0DB4	A8 24		SETREG1:	MOV	R0,ARG_STACK
 2315: 1  0DB6	28				ADD	A,R0
 2316: 1  0DB7	40 16				JC	E4YY
 2317: 1  0DB9	F5 24				MOV	ARG_STACK,A
 2318: 1  0DBB	E6				MOV	A,@R0
 2319: 1  0DBC	22		A_D:		RET
 2320: 1
 2321: 1			;Routine to copy bottom arg on stack to address in R1.
 2322: 1  0DBD	B1 B3		MOVAS:  	ACALL   SETREG				;SET UP R0
 2323: 1  0DBF	E6		M_C:		MOV	A,@R0				;READ THE VALUE
 2324: 1  0DC0	F7				MOV	@R1,A				;SAVE IT
 2325: 1  0DC1	08		        	INC     R0
 2326: 1  0DC2	09		        	INC     R1
 2327: 1  0DC3	DC FA		        	DJNZ    R4,M_C  	        	;LOOP
 2328: 1  0DC5	22				RET					;EXIT
 2329: 1
 2330: 1
 2331: 1			; VARCOP - Copy a variable from R0 to R1
 2332: 1  0DC6	7C 06		VARCOP:		MOV	R4,#FP_NUMBER_SIZE		;LOAD THE LOOP COUNTER
 2333: 1  0DC8	E6		V_C:		MOV	A,@R0				;READ THE VALUE
 2334: 1  0DC9	F7				MOV	@R1,A				;SAVE IT
 2335: 1  0DCA	18				DEC	R0
 2336: 1  0DCB	19				DEC	R1

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 43



 Line  I  Addr  Code            Source

 2337: 1  0DCC	DC FA				DJNZ	R4,V_C				;LOOP
 2338: 1  0DCE	22				RET					;EXIT
 2339: 1			;
 2340: 1  0DCF	90 0E 02	E4YY:		MOV	DPTR,#EXA
 2341: 1  0DD2	01 0D				JMP	PRTERR				; me
 2342: 1
 2343: 1				; integer operator - INT
 2344: 1  0DD4	B1 B3		AINT:		ACALL	SETREG				;SET UP THE REGISTERS, CLEAR CARRY
 2345: 1  0DD6	94 81				SUBB	A,#129				;SUBTRACT EXPONENT BIAS
 2346: 1  0DD8	50 07				JNC	AI1				;JUMP IF ACC > 81H
 2347: 1				;
 2348: 1				; Force the number to be a zero
 2349: 1				;
 2350: 1  0DDA	B1 9A				ACALL	INC_ASTKA			;BUMP THE STACK
 2351: 1				;
 2352: 1  0DDC	90 0E 0A	P_Z:		MOV	DPTR,#ZRO			;PUT ZERO ON THE STACK
 2353: 1  0DDF	A1 F6				AJMP	PUSHC
 2354: 1				;
 2355: 1  0DE1	94 07		AI1:		SUBB	A,#7
 2356: 1  0DE3	50 10				JNC	AI3
 2357: 1  0DE5	F4				CPL	A
 2358: 1  0DE6	04				INC	A
 2359: 1  0DE7	FB				MOV	R3,A
 2360: 1  0DE8	18				DEC	R0				;POINT AT SIGN
 2361: 1				;
 2362: 1  0DE9	18		AI2:		DEC	R0				;NOW AT LSB'S
 2363: 1  0DEA	E6				MOV	A,@R0				;READ BYTE
 2364: 1  0DEB	54 F0				ANL	A,#0F0H				;STRIP NIBBLE
 2365: 1  0DED	F6				MOV	@R0,A				;WRITE BYTE
 2366: 1  0DEE	DB 01				DJNZ	R3,AI21
 2367: 1  0DF0	22				RET
 2368: 1  0DF1	E4		AI21:		CLR	A
 2369: 1  0DF2	F6				MOV	@R0,A				;CLEAR THE LOCATION
 2370: 1  0DF3	DB F4				DJNZ	R3,AI2
 2371: 1  0DF5	22		AI3:		RET					;EXIT
 2372: 1				;
 2373: 1				; PUSHC - Push constant pointed by DPTR on to the arg stack
 2374: 1  0DF6	B1 9E		PUSHC:		ACALL	DEC_ASTKA
 2375: 1  0DF8	7B 06				MOV	R3,#FP_number_SIZe		;LOOP COUNTER
 2376: 1  0DFA	E4		PCL:		CLR	A				;SET UP A
 2377: 1  0DFB	93				MOVC	A,@A+DPTR			;LOAD IT
 2378: 1  0DFC	F7				MOV	@R1,A				;SAVE IT
 2379: 1  0DFD	A3				INC	DPTR				;BUMP POINTERS
 2380: 1  0DFE	19				DEC	R1
 2381: 1  0DFF	DB F9				DJNZ	R3,PCL				;LOOP
 2382: 1  0E01	22					RET				;EXIT
 2383: 1			;
 2384: 1
 2385: 1  0E02	41 2D 53 54	EXA:		DB	'A-STACK',0
       1  0E06	41 43 4B 00
 2386: 1  0E0A	00 00 00	ZRO:		DB	00h,00h,00h
 2387: 1  0E0D	00 00 00			DB	00h,00h,00h			;0.0000000
 2388:
 2389:	  0E10	43 61 6C 69	MODE0:		DB	'Cali'
 2390:	  0E14	62 72 61 74			DB	'brat'
 2391:	  0E18	65 00				DB	'e',0

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 44



 Line  I  Addr  Code            Source

 2392:	  0E1A	43 20 4D 65	MODE1:		DB	'C Me'
 2393:	  0E1E	74 65 72 00			DB	'ter',0
 2394:	  0E22	4C 20 4D 65	MODE2:		DB 	'L Me'
 2395:	  0E26	74 65 72 00			DB	'ter',0
 2396:	  0E2A	46 72 71 20	MODE3:		DB	'Frq '
 2397:	  0E2E	43 6F 75 6E			DB	'Coun'
 2398:	  0E32	74 00				DB	't',0
 2399:	  0E34	46 72 71 20	MODE4:		DB	'Frq '
 2400:	  0E38	43 6F 75 6E			DB	'Coun'
 2401:	  0E3C	74 20 31 47			DB	't 1G'
 2402:	  0E40	48 7A 00			DB	'Hz',0
 2403:	  0E43	57 65 6C 63	WELCOME:	DB	'Welc'
 2404:	  0E47	6F 6D 65 20			DB	'ome '
 2405:	  0E4B	4B 65 74 69			DB	'Keti'
 2406:	  0E4F	6C 00				DB	'l',0
 2407:
 2408:	  0E51	00 CA 9A 3B	BINDEC:		DB	000h,0CAh,09Ah,03Bh		;1000000000
 2409:	  0E55	00 E1 F5 05			DB	000h,0E1h,0F5h,005h		; 100000000
 2410:	  0E59	80 96 98 00			DB	080h,096h,098h,000h		;  10000000
 2411:	  0E5D	40 42 0F 00			DB	040h,042h,0Fh,0000h		;   1000000
 2412:	  0E61	A0 86 01 00			DB	0A0h,086h,001h,000h		;    100000
 2413:	  0E65	10 27 00 00			DB	010h,027h,000h,000h		;     10000
 2414:	  0E69	E8 03 00 00			DB	0E8h,003h,000h,000h		;      1000
 2415:	  0E6D	64 00 00 00			DB	064h,000h,000h,000h		;       100
 2416:	  0E71	0A 00 00 00			DB	00Ah,000h,000h,000h		;        10
 2417:	  0E75	01 00 00 00			DB	001h,000h,000h,000h		;         1
 2418:
 2419:	  0E79	81 00 00	FPONE:		DB 	81h,00h,00h			;1.0000000
 2420:	  0E7C	00 00 10			DB	00h,00h,10h
 2421:	  0E7F	81 00 00	FPTWO:		DB 	81h,00h,00h			;2.0000000
 2422:	  0E82	00 00 20			DB	00h,00h,20h
 2423:	  0E85	81 00 27	FPPI:		DB	81h,00h,27h			;3.1415927
 2424:	  0E88	59 41 31			DB	59h,41h,31h
 2425:	  0E8B	78 00 00	FPCCAL:		DB	78h,00h,00h			;1nF=1e-9 Calibration Capasitor
 2426:	  0E8E	00 00 10			DB	00h,00h,10h
 2427:	  0E91	8D 00 00	FPpF:		DB	8Dh,00h,00h			;1e12 Pico Farad
 2428:	  0E94	00 00 10			DB	00h,00h,10h
 2429:	  0E97	8A 00 00	FPnF:		DB	8Ah,00h,00h			;1e9 Nano Farad or Nano Henry
 2430:	  0E9A	00 00 10			DB	00h,00h,10h
 2431:	  0E9D	87 00 00	FPuH:		DB	87h,00h,00h			;1e6 Micro Henry
 2432:	  0EA0	00 00 10			DB	00h,00h,10h
 2433:	  0EA3	84 00 00	FPmH:		DB	84h,00h,00h			;1e3 Milli Henry
 2434:	  0EA6	00 00 10			DB	00h,00h,10h
 2435:
 2436:						END
 2437:





                     register banks used:  ---

                     no errors



ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 45





ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 46





	       L I S T   O F   S Y M B O L S
	       =============================


SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
??ASEM_51			  NUMBER    8051
??VERSION			  NUMBER    0130
AC				  BIT	      D6
ACC				  DATA	      E0
ADDIT				  CODE	    0313	 478
ADDLP				  CODE	    0878	1033
ADD_IN				  BIT	      33	  14
ADD_R				  CODE	    0876	1031
AI1				  CODE	    0DE1	2355
AI2				  CODE	    0DE9	2362
AI21				  CODE	    0DF1	2368
AI3				  CODE	    0DF5	2371
AINT				  CODE	    0DD4	2344
ARG1_EXP_GT			  CODE	    08DD	1136
ARG1_EXP_GT1			  CODE	    08DE	1139
ARG1_EXP_GT2			  CODE	    08E1	1141
ARG_STACK			  NUMBER    0024	  11
A_D				  CODE	    0DBC	2319
B				  DATA	      F0
BADPRM				  CODE	    080E	 926
BIN2DEC				  CODE	    02D1	 427
BIN2DEC1			  CODE	    02D8	 430
BIN2DEC2			  CODE	    02DA	 431
BIN2DEC3			  CODE	    02EE	 446
BIN2DEC4			  CODE	    02F7	 451
BINDEC				  CODE	    0E51	2408
BOTH_PLUS			  CODE	    08E5	1149
CLOOP				  CODE	    08ED	1161
CMETER				  CODE	    01F2	 309
CMETER1				  CODE	    021A	 332
CMETER2				  CODE	    022E	 340
CMP				  MACRO	        	 883
CONVERT_BINARY_TO_ASCII_STRING	  CODE	    0D0E	2164
CONVT				  NUMBER    0027	  16
CY				  BIT	      D7
DC1				  CODE	    0D84	2273
DEBOUNCEINT0			  CODE	    0088	 106
DEBOUNCEINT01			  CODE	    008C	 108
DEBUG				  NUMBER    0000	   2
DECX				  CODE	    0B98	1838
DEC_ASTKA			  CODE	    0D9E	2297
DIGIT				  NUMBER    0004	  25
DIGIT_CHECK			  CODE	    0D7E	2266
DIV0				  CODE	    093C	1255
DIV3				  CODE	    0949	1264
DIV4				  CODE	    0956	1272
DIV5				  CODE	    0959	1275
DIV6				  CODE	    0961	1280
DIV7				  CODE	    0978	1302
DIV8				  CODE	    098D	1315

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 47



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
DONE_LOAD			  BIT	      53	  55
DPH				  DATA	      83
DPL				  DATA	      82
D_UNDER				  CODE	    0947	1262
E4YY				  CODE	    0DCF	2340
EA				  BIT	      AF
ES				  BIT	      AC
ET0				  BIT	      A9
ET1				  BIT	      AB
EX0				  BIT	      A8
EX1				  BIT	      AA
EXA				  CODE	    0E02	2385
EXPONENTS_EQUAL			  CODE	    08E2	1143
EXPOT4				  CODE	    0C62	2014
EXPOT5				  CODE	    0C8D	2043
EXPOTX				  CODE	    0C60	2012
EXPOUT				  CODE	    0C4D	1999
EXTI0				  CODE	    0003
EXTI1				  CODE	    0013
F0				  BIT	      D5
FAST_DONE			  CODE	    0D47	2210
FDT1				  CODE	    0BA9	1852
FDT2				  CODE	    0BB1	1856
FDTEST				  CODE	    0BA5	1849
FINISH1				  CODE	    0B6A	1804
FINISH2				  CODE	    0B7D	1820
FINISH_UP			  CODE	    0B7E	1822
FINISH_UP1			  CODE	    0B85	1827
FIRST_RADIX			  BIT	      52	  54
FLOATING_ADD			  CODE	    0816	 940
FLOATING_COMP			  CODE	    08C9	1110
FLOATING_DIV			  CODE	    092F	1240
FLOATING_INIT			  CODE	    0800	 915
FLOATING_MUL			  CODE	    08FA	1177
FLOATING_POINT_INPUT		  CODE	    0B18	1749
FLOATING_POINT_OUTPUT		  CODE	    0BC6	1893
FLOATING_SUB			  CODE	    080F	 930
FMUL0				  CODE	    08FF	1186
FMUL1				  CODE	    0901	1190
FMUL2				  CODE	    0913	1206
FMUL3				  CODE	    091C	1221
FMUL_OVER			  CODE	    090F	1200
FORMAT				  NUMBER    0025	  12
FOUND_RADIX			  BIT	      51	  53
FOV				  CODE	    0911	1204
FPC1				  CODE	    0A22	1488
FPCCAL				  CODE	    0E8B	2425
FPCHR_OUT			  NUMBER    0050	  77
FPMH				  CODE	    0EA3	2433
FPNF				  CODE	    0E97	2429
FPO1				  CODE	    0BDF	1920
FPO2				  CODE	    0BF2	1933
FPONE				  CODE	    0E79	2419
FPPF				  CODE	    0E91	2427
FPPI				  CODE	    0E85	2423
FPSTACK				  NUMBER    00FF	  87

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 48



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
FPTWO				  CODE	    0E7F	2421
FPUH				  CODE	    0E9D	2431
FP_ACC1				  NUMBER    0035	  66
FP_ACC2				  NUMBER    0036	  67
FP_ACC3				  NUMBER    0037	  68
FP_ACC4				  NUMBER    0038	  69
FP_ACC5				  NUMBER    0039	  70
FP_ACC6				  NUMBER    003A	  71
FP_ACC7				  NUMBER    003B	  72
FP_ACC8				  NUMBER    003C	  73
FP_ACCC				  NUMBER    0034	  65
FP_ACCS				  NUMBER    003D	  74
FP_ACCX				  NUMBER    0033	  64
FP_CARRY			  NUMBER    002A	  44
FP_CLEAR			  CODE	    0A1F	1479
FP_DIG12			  NUMBER    002B	  45
FP_DIG34			  NUMBER    002C	  46
FP_DIG56			  NUMBER    002D	  47
FP_DIG78			  NUMBER    002E	  48
FP_EXP				  NUMBER    0030	  50
FP_NIB1				  NUMBER    002B	  56
FP_NIB2				  NUMBER    002C	  57
FP_NIB3				  NUMBER    002D	  58
FP_NIB4				  NUMBER    002E	  59
FP_NIB5				  NUMBER    002F	  60
FP_NIB6				  NUMBER    0030	  61
FP_NIB7				  NUMBER    0031	  62
FP_NIB8				  NUMBER    0032	  63
FP_NUMBER_SIZE			  NUMBER    0006	  24
FP_SIGN				  NUMBER    002F	  49
FP_STATUS			  NUMBER    0028	  42
FP_TEMP				  NUMBER    0029	  43
FREE				  CODE	    0C1E	1968
FREE1				  CODE	    0C25	1973
FREE2				  CODE	    0C41	1992
FREE4				  CODE	    0C39	1987
FREQUENCY			  CODE	    010A	 177
FREQUENCY1			  CODE	    0112	 181
FRQCOUNT			  CODE	    0386	 590
FRQCOUNT1			  CODE	    03CF	 629
FRQFORMAT			  CODE	    03E1	 645
FRQFORMATDONE			  CODE	    043C	 693
FRQFORMATHZ			  CODE	    042A	 682
FRQFORMATHZ1			  CODE	    042D	 685
FRQFORMATKHZ			  CODE	    040C	 666
FRQFORMATKHZ1			  CODE	    0413	 670
FRQFORMATKHZ2			  CODE	    041A	 674
FRQFORMATMHZ1			  CODE	    03F5	 654
FRQFORMATMHZ2			  CODE	    03FC	 658
FRTEST				  CODE	    0BA2	1847
FSUB10				  CODE	    08C7	1106
FSUB5				  CODE	    0896	1065
FSUB6				  CODE	    08A1	1076
FSUB7				  CODE	    08A5	1079
FSUB8				  CODE	    08B0	1087
FSUB9				  CODE	    08B6	1094

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 49



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
GET_DIGIT_CHECK			  CODE	    0D7C	2262
GET_R1_CHARACTER		  CODE	    0BB5	1870
GT1				  CODE	    0B40	1779
GT11				  CODE	    0B48	1782
GT12				  CODE	    0B4B	1783
GT2				  CODE	    0B58	1792
GTEST				  CODE	    0B31	1772
HC1				  CODE	    0B13	1742
HEX2X				  CODE	    0D5C	2237
HEXDO1				  CODE	    0B07	1729
HEXDON				  CODE	    0B06	1727
HEXOUT				  CODE	    0D50	2225
HEXSC1				  CODE	    0AF5	1716
HEXSCAN				  CODE	    0AF3	1709
HEX_CHECK			  CODE	    0B0B	1734
HOUT1				  CODE	    0D68	2246
HOUTHI				  CODE	    0D73	2254
HOUTLO				  CODE	    0D74	2256
HS1				  CODE	    0B08	1731
IE				  DATA	      A8
IE0				  BIT	      89
IE0IRQ				  CODE	    0080	 101
IE1				  BIT	      8B
INC_AND_GET_R1_CHARACTER	  CODE	    0BB4	1866
INC_ASTKA			  CODE	    0D9A	2292
INC_FP_EXP			  CODE	    09DF	1402
INERR				  CODE	    0B9A	1840
INLOOP				  CODE	    0B26	1764
INLPIK				  CODE	    0B2E	1769
INT0				  BIT	      B2
INT1				  BIT	      B3
INTGRC				  BIT	      31	  13
INTMUL10			  CODE	    0327	 499
INTMUL2				  CODE	    0345	 527
INTMUL5				  CODE	    032C	 503
IP				  DATA	      B8
IT0				  BIT	      88
IT1				  BIT	      8A
LCCA				  NUMBER    007D	  83
LCCALC				  CODE	    0145	 219
LCCB				  NUMBER    0085	  84
LCCT				  NUMBER    008D	  85
LCDCHROUT			  CODE	    045D	 729
LCDCLEAR			  CODE	    0471	 745
LCDCLEAR1			  CODE	    0477	 748
LCDCLEARBUFF			  CODE	    04AB	 798
LCDCLEARBUFF1			  CODE	    04B1	 801
LCDCMDOUT			  CODE	    044D	 718
LCDDELAY			  CODE	    043D	 705
LCDINIT				  CODE	    0492	 784
LCDLINE				  NUMBER    0040	  76
LCDNIBOUT			  CODE	    0446	 712
LCDPRINTSTR			  CODE	    0481	 757
LCDSETADR			  CODE	    047C	 753
LCF1				  NUMBER    0065	  80
LCF2				  NUMBER    006D	  81

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 50



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
LCF3				  NUMBER    0075	  82
LCMETERGETFRQ			  CODE	    0122	 196
LCMETERINIT			  CODE	    0164	 237
LCMETERINIT1			  CODE	    016A	 240
LEFT				  CODE	    0A60	1548
LEFT1				  CODE	    0A62	1554
LEFT3				  CODE	    0A6A	1560
LEFT5				  CODE	    0A89	1587
LEFTL				  CODE	    0A75	1569
LMETER				  CODE	    025D	 366
LMETER1				  CODE	    027C	 385
LMETER2				  CODE	    0284	 390
LMETER3				  CODE	    02A2	 401
LOAD1				  CODE	    0830	 976
LOAD2				  CODE	    0840	 988
LOAD3				  CODE	    0848	 995
LOAD4				  CODE	    0851	1005
LOAD5				  CODE	    0863	1019
LOAD7				  CODE	    0A00	1434
LOADR1				  CODE	    0AE9	1698
LOADR1_MANTISSA			  CODE	    0AE5	1689
LOAD_POINTERS			  CODE	    0ACB	1645
MCUSTACK			  NUMBER    0090	  86
MDES1				  CODE	    0AD4	1666
MNL0				  CODE	    0AAB	1619
MNL1				  CODE	    0ABD	1631
MNLOOP				  CODE	    0AA2	1611
MODE				  NUMBER    0051	  78
MODE0				  CODE	    0E10	2389
MODE1				  CODE	    0E1A	2392
MODE2				  CODE	    0E22	2394
MODE3				  CODE	    0E2A	2396
MODE4				  CODE	    0E34	2399
MODEMAX				  NUMBER    0004	  89
MOUT				  CODE	    0CDA	2113
MOVAS				  CODE	    0DBD	2322
MSIGN				  BIT	      78	  51
MUL11				  CODE	    0D06	2153
MULNUM				  CODE	    0CED	2131
MULNUM10			  CODE	    0CEA	2127
MULX				  CODE	    0D0D	2160
MUL_DIV_EXP_AND_SIGN		  CODE	    0AD2	1657
MUL_NIBBLE			  CODE	    0A98	1597
M_C				  CODE	    0DBF	2323
NL1				  CODE	    0CBA	2083
NR1				  CODE	    0CC3	2092
NUM_LT				  CODE	    0CB3	2077
NUM_RT				  CODE	    0CBC	2086
OUTR				  CODE	    0CA8	2066
OUTR0				  CODE	    0C97	2052
OV				  BIT	      D2
OVE1				  CODE	    0A05	1445
OVERFLOW			  NUMBER    0001	  29
OVERFLOW_AND_EXIT		  CODE	    0A01	1438
P				  BIT	      D0
P0				  DATA	      80

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 51



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
P1				  DATA	      90
P2				  DATA	      A0
P3				  DATA	      B0
PACK				  CODE	    0990	1319
PACK0				  CODE	    0999	1332
PACK1				  CODE	    099A	1334
PACK2				  CODE	    09A4	1342
PACK3				  CODE	    09B6	1356
PACK4				  CODE	    09BC	1363
PCL				  CODE	    0DFA	2376
PCON				  DATA	      87
PLOOP				  CODE	    09BE	1367
PLUS_MINUS_TEST			  CODE	    0BBB	1879
PMT0				  CODE	    0BC0	1883
PMT1				  CODE	    0BC5	1889
PMT2				  CODE	    0BC3	1885
PMT3				  CODE	    0BC4	1887
POPAS				  CODE	    0DAB	2307
POP_AND_EXIT			  CODE	    0828	 967
POSNM1				  CODE	    0B7A	1817
POSNUM				  CODE	    0B77	1814
PRET				  CODE	    09DE	1400
PRNTCDPTRLCD			  CODE	    0488	 769
PRNTCDPTRLCD1			  CODE	    0491	 775
PRTERR				  CODE	    080D	 925
PS				  BIT	      BC
PSW				  DATA	      D0
PT0				  BIT	      B9
PT1				  BIT	      BB
PUSHAS				  CODE	    0DAF	2310
PUSHC				  CODE	    0DF6	2374
PX0				  BIT	      B8
PX1				  BIT	      BA
P_Z				  CODE	    0DDC	2352
R0B0				  NUMBER    0000	  26
R1B0				  NUMBER    0001	  27
R5OUT				  CODE	    0D89	2279
RB8				  BIT	      9A
RD				  BIT	      B7
REN				  BIT	      9C
RESET				  CODE	    0000
RET_X				  CODE	    0B9C	1842
RI				  BIT	      98
RIGHT				  CODE	    0A28	1495
RIGHT1				  CODE	    0A2A	1502
RIGHT3				  CODE	    0A32	1510
RIGHT5				  CODE	    0A51	1536
RIGHTL				  CODE	    0A3E	1520
ROUT				  CODE	    0CDE	2116
RS0				  BIT	      D3
RS1				  BIT	      D4
RSUB				  CODE	    0D2B	2187
RSUB1				  CODE	    0D2D	2189
RSUB2				  CODE	    0D4A	2215
RSUB4				  CODE	    0D4D	2218
RSUB_R				  CODE	    0D2A	2185

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 52



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
RXD				  BIT	      B0
SBUF				  DATA	      99
SCON				  DATA	      98
SE1				  CODE	    0822	 961
SETMODE				  CODE	    0096	 114
SETMODE1			  CODE	    009C	 117
SETMODE2			  CODE	    00A7	 122
SETMODE3			  CODE	    00AC	 124
SETMODE4			  CODE	    00B1	 126
SETMODE5			  CODE	    00B6	 128
SETREG				  CODE	    0DB3	2313
SETREG1				  CODE	    0DB4	2314
SIGNS_DIFFERENT			  CODE	    08DA	1131
SINOUT				  CODE	    0CD7	2110
SINT				  CODE	    0023
SM0				  BIT	      9F
SM1				  BIT	      9E
SM2				  BIT	      9D
SOUT				  CODE	    0CE6	2122
SOUT1				  CODE	    0CE8	2124
SOUT_1				  CODE	    0D66	2244
SP				  DATA	      81
SPACE7				  CODE	    0CC4	2094
SQ_ERR				  CODE	    0D98	2289
SRT				  CODE	    0DAA	2305
SS7				  CODE	    0CD5	2108
START				  CODE	    00E0	 151
START0				  CODE	    00BB	 132
START01				  CODE	    00C3	 137
START02				  CODE	    00DE	 150
START1				  CODE	    00ED	 158
START2				  CODE	    00F3	 162
START3				  CODE	    00FB	 167
START4				  CODE	    0103	 172
STDIG				  CODE	    0B8E	1833
STDIG1				  CODE	    0B9D	1844
STORE2				  CODE	    09D6	1392
STORE_ALIGN_TEST_AND_EXIT	  CODE	    09D0	1382
SUBIT				  CODE	    02FA	 455
SUBLP				  CODE	    0881	1043
SWAP_AND_EXIT			  CODE	    081E	 954
T0				  BIT	      B4
T1				  BIT	      B5
TB8				  BIT	      9B
TCON				  DATA	      88
TF0				  BIT	      8D
TF0OVF				  NUMBER    0052	  79
TF1				  BIT	      8F
TH0				  DATA	      8C
TH1				  DATA	      8D
TI				  BIT	      99
TIMER0				  CODE	    000B
TIMER1				  CODE	    001B
TL0				  DATA	      8A
TL1				  DATA	      8B
TMOD				  DATA	      89

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 53



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
TR0				  BIT	      8C
TR1				  BIT	      8E
TXD				  BIT	      B1
ULOOP				  CODE	    09EF	1420
UNDERFLOW			  NUMBER    0000	  28
UNDERFLOW_AND_EXIT		  CODE	    0A12	1457
UNPACK_R0			  CODE	    09EB	1413
USING0				  CODE	    0BFC	1939
USING1				  CODE	    0C02	1944
USING2				  CODE	    0C14	1957
USINGX				  CODE	    0C12	1955
USINGY				  CODE	    0C0F	1952
U_RET				  CODE	    0C96	2050
VARCOP				  CODE	    0DC6	2332
V_C				  CODE	    0DC8	2333
WAIT				  CODE	    037F	 578
WAIT1				  CODE	    0380	 579
WAIT100				  CODE	    0376	 572
WAIT1001			  CODE	    037A	 574
WAIT512MS			  CODE	    0369	 561
WAIT512MS1			  CODE	    036F	 564
WAITASEC			  CODE	    0352	 544
WAITASEC1			  CODE	    035A	 549
WAITASEC2			  CODE	    035F	 551
WAITASEC3			  CODE	    0362	 553
WELCOME				  CODE	    0E43	2403
WR				  BIT	      B6
XOUT0				  CODE	    0C6F	2022
XOUT2				  CODE	    0C74	2026
XOUT3				  CODE	    0C7C	2031
XOUT4				  CODE	    0C80	2035
XSIGN				  BIT	      50	  52
Z7R7				  CODE	    0CCC	2100
ZERO				  NUMBER    0002	  30
ZERO7				  CODE	    0CCD	2102
ZERO_AND_EXIT			  CODE	    0A18	1468
ZERO_DIVIDE			  NUMBER    0003	  31
ZOUT				  CODE	    0CE2	2119
ZRO				  CODE	    0E0A	2386
ZSURP				  BIT	      36	  15
ZT0				  CODE	    0CAB	2070
ZT1				  CODE	    0CB2	2075
ZTEST				  CODE	    0CA9	2068
