
ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 1





       MCS-51 Family Macro Assembler   A S E M - 5 1   V 1.3
       =====================================================



	Source File:	LCMeter.a51
	Object File:	LCMeter.hex
	List File:	LCMeter.lst



 Line  I  Addr  Code            Source

    1:
    2:		N      0000	DEBUG		EQU 0
    3:
    4:				$INCLUDE	(LCMeter.inc)
    5: 1			;***********************************************************************
    6: 1			;
    7: 1			; The following values MUST be provided by the user
    8: 1			;
    9: 1			;***********************************************************************
   10: 1			;
   11: 1	N      0024	ARG_STACK	EQU	24H				;ARGUMENT STACK POINTER
   12: 1	N      0025	FORMAT		EQU	25H				;LOCATION OF OUTPUT FORMAT BYTE
   13: 1	B	 31	INTGRC		BIT	26H.1				;BIT SET IF INTEGER ERROR
   14: 1	B	 33	ADD_IN		BIT	26H.3				;DCMPXZ IN BASIC BACKAGE
   15: 1	B	 36	ZSURP		BIT	26H.6				;ZERO SUPRESSION FOR HEX PRINT
   16: 1	N      0027	CONVT		EQU	27H				;String addr TO CONVERT NUMBERS
   17: 1			;
   18: 1			;***********************************************************************
   19: 1			;
   20: 1			; The following equates are used internally
   21: 1			;
   22: 1			;***********************************************************************
   23: 1			;
   24: 1	N      0006	FP_NUMBER_SIZE	EQU	6
   25: 1	N      0004	DIGIT		EQU	4
   26: 1	N      0000	R0B0		EQU	0
   27: 1	N      0001	R1B0		EQU	1
   28: 1	N      0000	UNDERFLOW	EQU	0
   29: 1	N      0001	OVERFLOW	EQU	1
   30: 1	N      0002	ZERO		EQU	2
   31: 1	N      0003	ZERO_DIVIDE	EQU	3
   32: 1			;
   33: 1			;***********************************************************************
   34: 1				;**************************************************************
   35: 1				;
   36: 1				; The following internal locations are used by the math pack
   37: 1				; ordering is important and the FP_DIGITS must be bit
   38: 1				; addressable
   39: 1				;
   40: 1				;***************************************************************
   41: 1				;
   42: 1	N      0028	FP_STATUS	EQU	28H				;28 NOT used data pointer me
   43: 1	N      0029	FP_TEMP		EQU	FP_STATUS+1			;29 NOT USED

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 2



 Line  I  Addr  Code            Source

   44: 1	N      002A	FP_CARRY	EQU	FP_STATUS+2			;2A USED FOR BITS
   45: 1	N      002B	FP_DIG12	EQU	FP_CARRY+1			;2B
   46: 1	N      002C	FP_DIG34	EQU	FP_CARRY+2			;2C
   47: 1	N      002D	FP_DIG56	EQU	FP_CARRY+3			;2D
   48: 1	N      002E	FP_DIG78	EQU	FP_CARRY+4			;2E
   49: 1	N      002F	FP_SIGN		EQU	FP_CARRY+5			;2F
   50: 1	N      0030	FP_EXP		EQU	FP_CARRY+6			;30
   51: 1	B	 78	MSIGN		BIT	FP_SIGN.0			;2F.0
   52: 1	B	 50	XSIGN		BIT	FP_CARRY.0			;2A.0
   53: 1	B	 51	FOUND_RADIX	BIT	FP_CARRY.1			;2A.1
   54: 1	B	 52	FIRST_RADIX	BIT	FP_CARRY.2			;2A.2
   55: 1	B	 53	DONE_LOAD	BIT	FP_CARRY.3			;2A.3
   56: 1	N      002B	FP_NIB1		EQU	FP_DIG12			;2B
   57: 1	N      002C	FP_NIB2		EQU	FP_NIB1+1			;2C
   58: 1	N      002D	FP_NIB3		EQU	FP_NIB1+2			;2D
   59: 1	N      002E	FP_NIB4		EQU	FP_NIB1+3			;2E
   60: 1	N      002F	FP_NIB5		EQU	FP_NIB1+4			;2F
   61: 1	N      0030	FP_NIB6		EQU	FP_NIB1+5			;30
   62: 1	N      0031	FP_NIB7		EQU	FP_NIB1+6			;31
   63: 1	N      0032	FP_NIB8		EQU	FP_NIB1+7			;32
   64: 1	N      0033	FP_ACCX		EQU	FP_NIB1+8			;33
   65: 1	N      0034	FP_ACCC		EQU	FP_NIB1+9			;34
   66: 1	N      0035	FP_ACC1		EQU	FP_NIB1+10			;35
   67: 1	N      0036	FP_ACC2		EQU	FP_NIB1+11			;36
   68: 1	N      0037	FP_ACC3		EQU	FP_NIB1+12			;37
   69: 1	N      0038	FP_ACC4		EQU	FP_NIB1+13			;38
   70: 1	N      0039	FP_ACC5		EQU	FP_NIB1+14			;39
   71: 1	N      003A	FP_ACC6		EQU	FP_NIB1+15			;3A
   72: 1	N      003B	FP_ACC7		EQU	FP_NIB1+16			;3B
   73: 1	N      003C	FP_ACC8		EQU	FP_NIB1+17			;3C
   74: 1	N      003D	FP_ACCS		EQU	FP_NIB1+18			;3D
   75: 1
   76: 1	N      0040	LCDLINE		EQU	40h				;16 Bytes
   77: 1	N      0050	FPCHR_OUT	EQU	50h				;Holds addrss to next byte during FP number
       1			convertion
   78: 1	N      0051	MODE		EQU	51h				;Current mode (0-4)
   79: 1	N      0065	LCF1		EQU	60H+FP_NUMBER_SIZE-1		;LC Meter F1
   80: 1	N      006D	LCF2		EQU	68h+FP_NUMBER_SIZE-1		;LC Meter F2
   81: 1	N      0075	LCF3		EQU	70h+FP_NUMBER_SIZE-1		;LC Meter F3
   82: 1	N      007D	LCCA		EQU	78h+FP_NUMBER_SIZE-1		;((F1/F2)^2)-1
   83: 1	N      0085	LCCB		EQU	80h+FP_NUMBER_SIZE-1		;((1/2*Pi*F1)^2)*LCCA
   84: 1	N      008D	LCCT		EQU	88h+FP_NUMBER_SIZE-1		;Temp
   85: 1	N      0090	MCUSTACK	EQU	90h
   86: 1	N      00FF	FPSTACK		EQU	0FFh
   87: 1
   88: 1	N      0004	MODEMAX		EQU	4
   89: 1
   90:
   91:				;RESET:***********************************************
   92:		N      0000			ORG	0000h
   93:	  0000	01 BB				AJMP	START0
   94:				;IE0IRQ:**********************************************
   95:		N      0003			ORG	0003h
   96:	  0003	01 80				AJMP	IE0IRQ
   97:				;------------------------------------------------------------------
   98:

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 3



 Line  I  Addr  Code            Source

   99:		N      0080			ORG	0080h
  100:	  0080	05 51		IE0IRQ:		INC	MODE
  101:	  0082	11 96				ACALL	SETMODE
  102:	  0084	11 88				ACALL	DEBOUNCEINT0
  103:	  0086	01 E3				AJMP	START
  104:
  105:	  0088	7E 00		DEBOUNCEINT0:	MOV	R6,#00h
  106:	  008A	7F 00				MOV	R7,#00h
  107:	  008C	30 B2 F9	DEBOUNCEINT01:	JNB	P3.2,DEBOUNCEINT0
  108:	  008F	DE FB				DJNZ	R6,DEBOUNCEINT01
  109:	  0091	DF F9				DJNZ	R7,DEBOUNCEINT01
  110:	  0093	C2 89				CLR	IE0
  111:	  0095	32				RETI
  112:
  113:	  0096	E5 51		SETMODE:	MOV	A,MODE
  114:	  0098	B4 05 01			CJNE	A,#MODEMAX+1,SETMODE1
  115:	  009B	E4				CLR	A
  116:	  009C	F5 51		SETMODE1:	MOV	MODE,A
  117:	  009E	FF				MOV	R7,A
  118:	  009F	90 0E 40			MOV	DPTR,#MODE0
  119:	  00A2	DF 03				DJNZ	R7,SETMODE2
  120:	  00A4	90 0E 4A			MOV	DPTR,#MODE1
  121:	  00A7	DF 03		SETMODE2:	DJNZ	R7,SETMODE3
  122:	  00A9	90 0E 52			MOV	DPTR,#MODE2
  123:	  00AC	DF 03		SETMODE3:	DJNZ	R7,SETMODE4
  124:	  00AE	90 0E 5A			MOV	DPTR,#MODE3
  125:	  00B1	DF 03		SETMODE4:	DJNZ	R7,SETMODE5
  126:	  00B3	90 0E 64			MOV	DPTR,#MODE4
  127:	  00B6	91 87		SETMODE5:	ACALL	LCDCLEAR
  128:	  00B8	91 9E				ACALL	PRNTCDPTRLCD
  129:	  00BA	22				RET
  130:
  131:	  00BB	E4		START0:		CLR	A
  132:	  00BC	C2 94				CLR	P1.4				;L/C
  133:	  00BE	C2 95				CLR	P1.5				;CAL
  134:	  00C0	F5 A8				MOV	IE,A				;Disable all interrupts
  135:	  00C2	F8				MOV	R0,A
  136:	  00C3	F6		START01:	MOV	@R0,A				;Clear the ram
  137:	  00C4	D8 FD				DJNZ	R0,START01
  138:	  00C6	75 81 90			MOV	SP,#MCUSTACK			;Init stack pointer.
  139:	  00C9	D2 A8				SETB	EX0				;Enable INT0
  140:	  00CB	D2 AF				SETB	EA				;Enable interrupts
  141:	  00CD	12 08 00			LCALL	FLOATING_INIT
  142:	  00D0	71 81				ACALL	WAITASEC
  143:	  00D2	91 A8				ACALL	LCDINIT
  144:	  00D4	E4				CLR	A
  145:	  00D5	91 92				ACALL	LCDSETADR
  146:	  00D7	90 0E 73			MOV	DPTR,#WELCOME
  147:	  00DA	91 9E				ACALL	PRNTCDPTRLCD
  148:	  00DC	71 81				ACALL	WAITASEC
  149:	  00DE	75 51 00			MOV	MODE,#00h
  150:	  00E1	11 96		START02:	ACALL	SETMODE
  151:	  00E3	91 C1		START:		ACALL	LCDCLEARLINE
  152:	  00E5	AF 51				MOV	R7,MODE
  153:	  00E7	DF 04				DJNZ	R7,START1
  154:						;C Meter

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 4



 Line  I  Addr  Code            Source

  155:	  00E9	31 FF				ACALL	CMeter
  156:	  00EB	80 F6				SJMP	START
  157:	  00ED	DF 04		START1:		DJNZ	R7,START2
  158:						;L Meter
  159:	  00EF	51 6A				ACALL	LMeter
  160:	  00F1	80 F0				SJMP	START
  161:	  00F3	DF 04		START2:		DJNZ	R7,START3
  162:						;30MHz
  163:	  00F5	31 06				ACALL	FREQUENCY
  164:	  00F7	80 EA				SJMP	START
  165:	  00F9	DF 04		START3:		DJNZ	R7,START4
  166:						;1GHz
  167:	  00FB	31 20				ACALL	FREQUENCY1GHZ
  168:	  00FD	80 E4				SJMP	START
  169:	  00FF			START4:		;Calibrate
  170:	  00FF	31 8B				ACALL	LCMETERINIT
  171:	  0101	75 51 01			MOV	MODE,#01h			;C Meter
  172:	  0104	80 DB				SJMP	START02
  173:
  174:	  0106	C2 94		FREQUENCY:	CLR	P1.4				;C
  175:	  0108	C2 95				CLR	P1.5				;F1
  176:	  010A	74 01				MOV	A,#01h				;CH1, 30MHz
  177:	  010C	71 AB				ACALL	FRQCOUNT
  178:	  010E	78 44				MOV	R0,#LCDLINE+4			;Decimal buffer
  179:	  0110	51 DE				ACALL	BIN2DEC
  180:	  0112	FF				MOV	R7,A				;Number of digits
  181:	  0113	71 F7				ACALL	FRQFORMAT
  182:	  0115	74 40				MOV	A,#40h				;Output result
  183:	  0117	91 92				ACALL	LCDSETADR
  184:	  0119	78 40				MOV	R0,#LCDLINE
  185:	  011B	7F 10				MOV	R7,#10h
  186:	  011D	91 97				ACALL	LCDPRINTSTR
  187:	  011F	22				RET
  188:
  189:	  0120	C2 94		FREQUENCY1GHZ:	CLR	P1.4				;C
  190:	  0122	C2 95				CLR	P1.5				;F1
  191:	  0124	74 02				MOV	A,#02h				;CH2, 1GHz
  192:	  0126	71 AB				ACALL	FRQCOUNT
  193:	  0128	71 5C				ACALL	INTMUL10
  194:	  012A	71 5C				ACALL	INTMUL10
  195:	  012C	71 5C				ACALL	INTMUL10
  196:	  012E	78 44				MOV	R0,#LCDLINE+4			;Decimal buffer
  197:	  0130	51 DE				ACALL	BIN2DEC
  198:	  0132	FF				MOV	R7,A				;Number of digits
  199:	  0133	71 F7				ACALL	FRQFORMAT
  200:	  0135	74 40				MOV	A,#40h				;Output result
  201:	  0137	91 92				ACALL	LCDSETADR
  202:	  0139	78 40				MOV	R0,#LCDLINE
  203:	  013B	7F 10				MOV	R7,#10h
  204:	  013D	91 97				ACALL	LCDPRINTSTR
  205:	  013F	22				RET
  206:
  207:				;------------------------------------------------------------------
  208:				;Get LC meter frquency
  209:				;IN:	R1 points to FP buffer
  210:				;OUT:	Nothing

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 5



 Line  I  Addr  Code            Source

  211:				;------------------------------------------------------------------
  212:	  0140	C0 01		LCMETERGETFRQ:	PUSH	01h				;Save R1
  213:	  0142	74 FA				MOV	A,#250
  214:	  0144	71 A4				ACALL	WAIT				;Wait 25ms for relay to kick in / out
  215:	  0146	74 FA				MOV	A,#250
  216:	  0148	71 A4				ACALL	WAIT				;Wait 25ms for relay to kick in / out
  217:	  014A	74 00				MOV	A,#00h				;CH0, LC Meter
  218:	  014C	71 AB				ACALL	FRQCOUNT
  219:	  014E	78 40				MOV	R0,#LCDLINE
  220:	  0150	51 DE				ACALL	BIN2DEC
  221:	  0152	78 40				MOV	R0,#LCDLINE
  222:	  0154	79 27				MOV	R1,#CONVT
  223:	  0156	7F 0A				MOV	R7,#0Ah
  224:	  0158	E6		LCMETERGETFRQ1:	MOV	A,@R0
  225:	  0159	F7				MOV	@R1,A
  226:	  015A	08				INC	R0
  227:	  015B	09				INC	R1
  228:	  015C	DF FA				DJNZ	R7,LCMETERGETFRQ1
  229:	  015E	74 0D				MOV	A,#0Dh
  230:	  0160	F3				MOVX	@R1,A
  231:	  0161	79 27				MOV	R1,#CONVT
  232:	  0163	12 0B 18			LCALL	FLOATING_POINT_INPUT
  233:	  0166	D0 01				POP	01h				;Restore R1
  234:	  0168	12 0D AB			LCALL	POPAS				;POP ARGUMENT TO R1
  235:	  016B	22				RET
  236:
  237:				;------------------------------------------------------------------
  238:				;Calculate X=((Fa/Fb)^2)-1
  239:				;IN:	Fa=R0, Fb=R1
  240:				;OUT:	Nothing
  241:				;------------------------------------------------------------------
  242:	  016C	C0 01		LCCALC:		PUSH	01h
  243:	  016E	12 0D AF			LCALL	PUSHAS				; PUSH R0 TO ARGUMENT
  244:	  0171	D0 00				POP	00h
  245:	  0173	12 0D AF			LCALL	PUSHAS				; PUSH R0 TO ARGUMENT
  246:	  0176	12 09 2F			LCALL	FLOATING_DIV
  247:	  0179	A8 24				MOV	R0,ARG_STACK
  248:	  017B	12 0D AF			LCALL	PUSHAS				; PUSH R0 TO ARGUMENT
  249:	  017E	12 08 FA			LCALL	FLOATING_MUL
  250:	  0181	90 0E 10			MOV	DPTR,#FPONE
  251:	  0184	12 0D F6			LCALL	PUSHC				; PUSH ARG IN DPTR TO STACK
  252:	  0187	12 08 0F			LCALL	FLOATING_SUB
  253:	  018A	22				RET
  254:
  255:				;------------------------------------------------------------------
  256:				;Get LC meter frquency F1 and F2. Calculatr LCCA=((F1/F2)^2)-1 and LCCB=LCCA*((1/(2*Pi*F1))^2)*(1/Cc
				al)
  257:				;IN:	Nothing
  258:				;OUT:	Nothing
  259:				;------------------------------------------------------------------
  260:	  018B	C2 94		LCMETERINIT:	CLR	P1.4				;C
  261:	  018D	C2 95				CLR	P1.5				;F1
  262:	  018F	7F 05				MOV	R7,#05h
  263:	  0191	C0 07		LCMETERINIT1:	PUSH	07h
  264:	  0193	71 81				ACALL	WAITASEC
  265:	  0195	74 2E				MOV	A,#'.'

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 6



 Line  I  Addr  Code            Source

  266:	  0197	91 73				ACALL	LCDCHROUT
  267:	  0199	D0 07				POP	07h
  268:	  019B	DF F4				DJNZ	R7,LCMETERINIT1
  269:	  019D	C2 95				CLR	P1.5				;F1
  270:	  019F	79 65				MOV	R1,#LCF1
  271:	  01A1	31 40				ACALL	LCMETERGETFRQ			;Get F1
  272:	  01A3	D2 95				SETB	P1.5				;F2
  273:	  01A5	79 6D				MOV	R1,#LCF2
  274:	  01A7	31 40				ACALL	LCMETERGETFRQ			;Get F2
  275:	  01A9	C2 95				CLR	P1.5				;F1
  276:						;Calculate LCCA=((F1/F2)^2)-1
  277:	  01AB	78 65				MOV	R0,#LCF1
  278:	  01AD	79 6D				MOV	R1,#LCF2
  279:	  01AF	31 6C				ACALL	LCCALC
  280:						;Save result to LCCA
  281:	  01B1	79 7D				MOV	R1,#LCCA
  282:	  01B3	12 0D AB			LCALL	POPAS				;POP ARGUMENT TO R1
  283:						;Calculate A=(1/(2*Pi*F1))^2
  284:	  01B6	90 0E 16			MOV	DPTR,#FPTWO
  285:	  01B9	12 0D F6			LCALL	PUSHC				;PUSH ARG IN DPTR TO STACK
  286:	  01BC	90 0E 1C			MOV	DPTR,#FPPI
  287:	  01BF	12 0D F6			LCALL	PUSHC				;PUSH ARG IN DPTR TO STACK
  288:	  01C2	12 08 FA			LCALL	FLOATING_MUL
  289:	  01C5	78 65				MOV	R0,#LCF1
  290:	  01C7	12 0D AF			LCALL	PUSHAS				;PUSH R0 TO ARGUMENT
  291:	  01CA	12 08 FA			LCALL	FLOATING_MUL
  292:	  01CD	79 8D				MOV	R1,#LCCT
  293:	  01CF	12 0D AB			LCALL	POPAS				;POP ARGUMENT TO R1
  294:	  01D2	90 0E 10			MOV	DPTR,#FPONE
  295:	  01D5	12 0D F6			LCALL	PUSHC				;PUSH ARG IN DPTR TO STACK
  296:	  01D8	78 8D				MOV	R0,#LCCT
  297:	  01DA	12 0D AF			LCALL	PUSHAS				;PUSH R0 TO ARGUMENT
  298:	  01DD	12 09 2F			LCALL	FLOATING_DIV
  299:	  01E0	A8 24				MOV	R0,ARG_STACK
  300:	  01E2	12 0D AF			LCALL	PUSHAS				;PUSH R0 TO ARGUMENT
  301:	  01E5	12 08 FA			LCALL	FLOATING_MUL
  302:						;Calculate LCCB=A*LCCA*(1/Ccal)
  303:	  01E8	78 7D				MOV	R0,#LCCA
  304:	  01EA	12 0D AF			LCALL	PUSHAS				;PUSH R0 TO ARGUMENT
  305:	  01ED	12 08 FA			LCALL	FLOATING_MUL
  306:	  01F0	90 0E 22			MOV	DPTR,#FPCCAL
  307:	  01F3	12 0D F6			LCALL	PUSHC				;PUSH ARG IN DPTR TO STACK
  308:	  01F6	12 09 2F			LCALL	FLOATING_DIV
  309:						;Save result to LCCB
  310:	  01F9	79 85				MOV	R1,#LCCB
  311:	  01FB	12 0D AB			LCALL	POPAS				;POP ARGUMENT TO R1
  312:	  01FE	22				RET
  313:
  314:				;------------------------------------------------------------------
  315:				;Capacitance meter: Cx=((F1/F3)^2)-1)/((F1/F2)^2)-1)*Ccal
  316:				;IN:	Nothing
  317:				;OUT:	Nothing
  318:				;------------------------------------------------------------------
  319:	  01FF	C2 94		CMETER:		CLR	P1.4				;C
  320:	  0201	C2 95				CLR	P1.5				;F1
  321:	  0203	79 75				MOV	R1,#LCF3

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 7



 Line  I  Addr  Code            Source

  322:	  0205	31 40				ACALL	LCMETERGETFRQ			;Get F3
  323:						;Calculate A=((F1/F3)^2)-1
  324:	  0207	78 65				MOV	R0,#LCF1
  325:	  0209	79 75				MOV	R1,#LCF3
  326:	  020B	31 6C				ACALL	LCCALC
  327:						;Calculate B=A/LCCA
  328:	  020D	78 7D				MOV	R0,#LCCA
  329:	  020F	12 0D AF			LCALL	PUSHAS				;PUSH R0 TO ARGUMENT
  330:	  0212	12 09 2F			LCALL	FLOATING_DIV
  331:						;Calculate Cx=A/B*Ccal
  332:	  0215	90 0E 22			MOV	DPTR,#FPCCAL
  333:	  0218	12 0D F6			LCALL	PUSHC				;PUSH ARG IN DPTR TO STACK
  334:	  021B	12 08 FA			LCALL	FLOATING_MUL
  335:	  021E	A8 24				MOV	R0,ARG_STACK
  336:	  0220	18				DEC	R0
  337:	  0221	E6				MOV	A,@R0
  338:	  0222	08				INC	R0
  339:	  0223	60 02				JZ	CMETER1
  340:	  0225	E4				CLR	A
  341:	  0226	F6				MOV	@R0,A
  342:	  0227	E6		CMETER1:	MOV	A,@R0
  343:	  0228	75 4E 70			MOV	LCDLINE+14,#'p'
  344:	  022B	90 0E 28			MOV	DPTR,#FPP
  345:	  022E	60 0B				JZ	CMETER2
  346:	  0230	B4 78 00			CJNE	A,#78h,$+3
  347:	  0233	40 06				JC	CMETER2
  348:	  0235	75 4E 6E			MOV	LCDLINE+14,#'n'
  349:	  0238	90 0E 2E			MOV	DPTR,#FPN
  350:	  023B	12 0D F6	CMETER2:	LCALL	PUSHC				;PUSH ARG IN DPTR TO STACK
  351:	  023E	12 08 FA			LCALL	FLOATING_MUL
  352:	  0241	75 40 43			MOV	LCDLINE,#'C'
  353:	  0244	75 41 20			MOV	LCDLINE+1,#' '
  354:	  0247	75 42 3D			MOV	LCDLINE+2,#'='
  355:	  024A	75 43 20			MOV	LCDLINE+3,#' '
  356:	  024D	75 4F 46			MOV	LCDLINE+15,#'F'
  357:	  0250	75 50 44			MOV	FPCHR_OUT,#LCDLINE+4
  358:	  0253	75 25 53			MOV	FORMAT,#53h
  359:	  0256	E5 24				MOV	A,ARG_STACK
  360:	  0258	C3				CLR	C
  361:	  0259	94 05				SUBB	A,#05h
  362:	  025B	F8				MOV	R0,A
  363:	  025C	12 0B C6			LCALL	FLOATING_POINT_OUTPUT
  364:	  025F	74 40				MOV	A,#40h				;Output result
  365:	  0261	91 92				ACALL	LCDSETADR
  366:	  0263	78 40				MOV	R0,#LCDLINE
  367:	  0265	7F 10				MOV	R7,#10h
  368:	  0267	91 97				ACALL	LCDPRINTSTR
  369:	  0269	22				RET
  370:
  371:				;------------------------------------------------------------------
  372:				;Inductance meter Lx=((F1/F3)^2)-1)*((F1/F2)^2)-1)*((1/(2*Pi*F1))^2)*(1/Ccal)
  373:				;IN:	Nothing
  374:				;OUT:	Nothing
  375:				;------------------------------------------------------------------
  376:	  026A	D2 94		LMETER:		SETB	P1.4				;L
  377:	  026C	C2 95				CLR	P1.5				;F1

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 8



 Line  I  Addr  Code            Source

  378:	  026E	79 75				MOV	R1,#LCF3
  379:	  0270	31 40				ACALL	LCMETERGETFRQ			;Get F3
  380:						;Calculate A=((F1/F3)^2)-1
  381:	  0272	78 65				MOV	R0,#LCF1
  382:	  0274	79 75				MOV	R1,#LCF3
  383:	  0276	31 6C				ACALL	LCCALC
  384:						;Calculate B=A*LCCB
  385:	  0278	78 85				MOV	R0,#LCCB
  386:	  027A	12 0D AF			LCALL	PUSHAS				;PUSH R2:R0 TO ARGUMENT
  387:	  027D	12 08 FA			LCALL	FLOATING_MUL
  388:	  0280	A8 24				MOV	R0,ARG_STACK
  389:	  0282	18				DEC	R0
  390:	  0283	E6				MOV	A,@R0
  391:	  0284	08				INC	R0
  392:	  0285	60 02				JZ	LMETER1
  393:	  0287	E4				CLR	A
  394:	  0288	F6				MOV	@R0,A
  395:	  0289	E6		LMETER1:	MOV	A,@R0
  396:	  028A	B4 80 00			CJNE	A,#80h,$+3
  397:	  028D	40 02				JC	LMETER2
  398:	  028F	E4				CLR	A
  399:	  0290	F6				MOV	@R0,A
  400:	  0291	75 4E 6E	LMETER2:	MOV	LCDLINE+14,#'n'
  401:	  0294	90 0E 2E			MOV	DPTR,#FPN
  402:	  0297	60 16				JZ	LMETER3
  403:	  0299	B4 7B 00			CJNE	A,#7Bh,$+3
  404:	  029C	40 11				JC	LMETER3
  405:	  029E	75 4E 75			MOV	LCDLINE+14,#'u'
  406:	  02A1	90 0E 34			MOV	DPTR,#FPU
  407:	  02A4	B4 7E 00			CJNE	A,#7Eh,$+3
  408:	  02A7	40 06				JC	LMETER3
  409:	  02A9	75 4E 6D			MOV	LCDLINE+14,#'m'
  410:	  02AC	90 0E 3A			MOV	DPTR,#FPM
  411:	  02AF	12 0D F6	LMETER3:	LCALL	PUSHC				;PUSH ARG IN DPTR TO STACK
  412:	  02B2	12 08 FA			LCALL	FLOATING_MUL
  413:	  02B5	75 40 4C			MOV	LCDLINE,#'L'
  414:	  02B8	75 41 20			MOV	LCDLINE+1,#' '
  415:	  02BB	75 42 3D			MOV	LCDLINE+2,#'='
  416:	  02BE	75 43 20			MOV	LCDLINE+3,#' '
  417:	  02C1	75 4F 48			MOV	LCDLINE+15,#'H'
  418:	  02C4	75 50 44			MOV	FPCHR_OUT,#LCDLINE+4
  419:	  02C7	75 25 53			MOV	FORMAT,#53h
  420:	  02CA	E5 24				MOV	A,ARG_STACK
  421:	  02CC	C3				CLR	C
  422:	  02CD	94 05				SUBB	A,#05h
  423:	  02CF	F8				MOV	R0,A
  424:	  02D0	12 0B C6			LCALL	FLOATING_POINT_OUTPUT
  425:	  02D3	74 40				MOV	A,#40h				;Output result
  426:	  02D5	91 92				ACALL	LCDSETADR
  427:	  02D7	78 40				MOV	R0,#LCDLINE
  428:	  02D9	7F 10				MOV	R7,#10h
  429:	  02DB	91 97				ACALL	LCDPRINTSTR
  430:	  02DD	22				RET
  431:
  432:				;------------------------------------------------------------------
  433:				;Binary to decimal converter

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 9



 Line  I  Addr  Code            Source

  434:				;Converts R7:R6:R5:R4 to decimal pointed to by R0
  435:				;Returns with number of digits in A
  436:				;------------------------------------------------------------------
  437:	  02DE	C0 00		BIN2DEC:	PUSH	00h
  438:	  02E0	90 03 34			MOV	DPTR,#BINDEC
  439:	  02E3	7A 0A				MOV	R2,#0Ah
  440:	  02E5	7B 2F		BIN2DEC1:	MOV	R3,#2Fh
  441:	  02E7	0B		BIN2DEC2:	INC	R3
  442:	  02E8	71 07				ACALL	SUBIT
  443:	  02EA	50 FB				JNC	BIN2DEC2
  444:	  02EC	71 20				ACALL	ADDIT
  445:	  02EE	EB				MOV	A,R3
  446:	  02EF	F6				MOV	@R0,A
  447:	  02F0	08				INC	R0
  448:	  02F1	A3				INC	DPTR
  449:	  02F2	A3				INC	DPTR
  450:	  02F3	A3				INC	DPTR
  451:	  02F4	A3				INC	DPTR
  452:	  02F5	DA EE				DJNZ	R2,BIN2DEC1
  453:	  02F7	D0 00				POP	00h
  454:						;Remove leading zeroes
  455:	  02F9	7A 09				MOV	R2,#09h
  456:	  02FB	E6		BIN2DEC3:	MOV	A,@R0
  457:	  02FC	B4 30 05			CJNE	A,#30h,BIN2DEC4
  458:	  02FF	76 20				MOV	@R0,#20h
  459:	  0301	08				INC	R0
  460:	  0302	DA F7				DJNZ	R2,BIN2DEC3
  461:	  0304	0A		BIN2DEC4:	INC	R2
  462:	  0305	EA				MOV	A,R2
  463:	  0306	22				RET
  464:
  465:	  0307	E4		SUBIT:		CLR	A
  466:	  0308	93				MOVC	A,@A+DPTR
  467:	  0309	CC				XCH	A,R4
  468:	  030A	C3				CLR	C
  469:	  030B	9C				SUBB	A,R4
  470:	  030C	FC				MOV	R4,A
  471:	  030D	74 01				MOV	A,#01h
  472:	  030F	93				MOVC	A,@A+DPTR
  473:	  0310	CD				XCH	A,R5
  474:	  0311	9D				SUBB	A,R5
  475:	  0312	FD				MOV	R5,A
  476:	  0313	74 02				MOV	A,#02h
  477:	  0315	93				MOVC	A,@A+DPTR
  478:	  0316	CE				XCH	A,R6
  479:	  0317	9E				SUBB	A,R6
  480:	  0318	FE				MOV	R6,A
  481:	  0319	74 03				MOV	A,#03h
  482:	  031B	93				MOVC	A,@A+DPTR
  483:	  031C	CF				XCH	A,R7
  484:	  031D	9F				SUBB	A,R7
  485:	  031E	FF				MOV	R7,A
  486:	  031F	22				RET
  487:
  488:	  0320	E4		ADDIT:		CLR	A
  489:	  0321	93				MOVC	A,@A+DPTR

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 10



 Line  I  Addr  Code            Source

  490:	  0322	2C				ADD	A,R4
  491:	  0323	FC				MOV	R4,A
  492:	  0324	74 01				MOV	A,#01h
  493:	  0326	93				MOVC	A,@A+DPTR
  494:	  0327	3D				ADDC	A,R5
  495:	  0328	FD				MOV	R5,A
  496:	  0329	74 02				MOV	A,#02h
  497:	  032B	93				MOVC	A,@A+DPTR
  498:	  032C	3E				ADDC	A,R6
  499:	  032D	FE				MOV	R6,A
  500:	  032E	74 03				MOV	A,#03h
  501:	  0330	93				MOVC	A,@A+DPTR
  502:	  0331	3F				ADDC	A,R7
  503:	  0332	FF				MOV	R7,A
  504:	  0333	22				RET
  505:
  506:	  0334	00 CA 9A 3B	BINDEC:		DB 000h,0CAh,09Ah,03Bh			;1000000000
  507:	  0338	00 E1 F5 05			DB 000h,0E1h,0F5h,005h			; 100000000
  508:	  033C	80 96 98 00			DB 080h,096h,098h,000h			;  10000000
  509:	  0340	40 42 0F 00			DB 040h,042h,0Fh,0000h			;   1000000
  510:	  0344	A0 86 01 00			DB 0A0h,086h,001h,000h			;    100000
  511:	  0348	10 27 00 00			DB 010h,027h,000h,000h			;     10000
  512:	  034C	E8 03 00 00			DB 0E8h,003h,000h,000h			;      1000
  513:	  0350	64 00 00 00			DB 064h,000h,000h,000h			;       100
  514:	  0354	0A 00 00 00			DB 00Ah,000h,000h,000h			;        10
  515:	  0358	01 00 00 00			DB 001h,000h,000h,000h			;         1
  516:
  517:				;------------------------------------------------------------------
  518:				;Multiply R7:R6:R5:R4 by 10
  519:				;------------------------------------------------------------------
  520:	  035C	EC		INTMUL10:	MOV	A,R4
  521:	  035D	F8				MOV	R0,A
  522:	  035E	ED				MOV	A,R5
  523:	  035F	F9				MOV	R1,A
  524:	  0360	EE				MOV	A,R6
  525:	  0361	FA				MOV	R2,A
  526:	  0362	EF				MOV	A,R7
  527:	  0363	FB				MOV	R3,A
  528:	  0364	71 74				ACALL	INTMUL2
  529:	  0366	71 74				ACALL	INTMUL2
  530:	  0368	EC				MOV	A,R4
  531:	  0369	28				ADD	A,R0
  532:	  036A	FC				MOV	R4,A
  533:	  036B	ED				MOV	A,R5
  534:	  036C	39				ADDC	A,R1
  535:	  036D	FD				MOV	R5,A
  536:	  036E	EE				MOV	A,R6
  537:	  036F	3A				ADDC	A,R2
  538:	  0370	FE				MOV	R6,A
  539:	  0371	EF				MOV	A,R7
  540:	  0372	3B				ADDC	A,R3
  541:	  0373	FF				MOV	R7,A
  542:	  0374	EC		INTMUL2:	MOV	A,R4
  543:	  0375	2C				ADD	A,R4
  544:	  0376	FC				MOV	R4,A
  545:	  0377	ED				MOV	A,R5

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 11



 Line  I  Addr  Code            Source

  546:	  0378	3D				ADDC	A,R5
  547:	  0379	FD				MOV	R5,A
  548:	  037A	EE				MOV	A,R6
  549:	  037B	3E				ADDC	A,R6
  550:	  037C	FE				MOV	R6,A
  551:	  037D	EF				MOV	A,R7
  552:	  037E	3F				ADDC	A,R7
  553:	  037F	FF				MOV	R7,A
  554:	  0380	22				RET
  555:
  556:				;------------------------------------------------------------------
  557:				;Wait loop. Waits 1 second
  558:				;------------------------------------------------------------------
  559:	  0381	7F F9		WAITASEC:	MOV	R7,#0F9h
  560:	  0383	7E 33				MOV	R6,#51
  561:	  0385	7D 10				MOV	R5,#16
  562:		N      0000	IF DEBUG=1
  563:						MOV	R5,#01
  564:				ENDIF
  565:	  0387	DF FE		WAITASEC1:	DJNZ	R7,WAITASEC1
  566:	  0389	DE FC				DJNZ	R6,WAITASEC1
  567:	  038B	DD FA				DJNZ	R5,WAITASEC1
  568:	  038D	22				RET
  569:
  570:				;------------------------------------------------------------------
  571:				;Wait loop. Waits 0.256 seconds
  572:				;------------------------------------------------------------------
  573:	  038E	7F F9		WAIT256MS:	MOV	R7,#0F9h
  574:	  0390	7E 33				MOV	R6,#51
  575:	  0392	7D 02				MOV	R5,#02
  576:	  0394	DF FE		WAIT256MS1:	DJNZ	R7,WAIT256MS1
  577:	  0396	DE FC				DJNZ	R6,WAIT256MS1
  578:	  0398	DD FA				DJNZ	R5,WAIT256MS1
  579:	  039A	22				RET
  580:
  581:				;------------------------------------------------------------------
  582:				;Wait functions
  583:				;------------------------------------------------------------------
  584:	  039B	C0 07		WAIT100:	PUSH	07h				;Save R7
  585:	  039D	7F 64				MOV	R7,#64h
  586:	  039F	DF FE		WAIT1001:	DJNZ	R7,WAIT1001			;Wait loop, 100uS
  587:	  03A1	D0 07				POP	07h				;Restore R7
  588:	  03A3	22				RET
  589:
  590:	  03A4	CF		WAIT:		XCH	A,R7
  591:	  03A5	71 9B		WAIT1:		ACALL	WAIT100
  592:	  03A7	DF FC				DJNZ	R7,WAIT1
  593:	  03A9	CF				XCH	A,R7
  594:	  03AA	22				RET
  595:
  596:				;------------------------------------------------------------------
  597:				;Frequency counter. LSB from 74HC590 read at P0, TL0, TH0 and
  598:				;TF0 bit. 25 bits total, max 33554431 Hz
  599:				;IN:	A Channel (0-3)
  600:				;OUT:	32 Bit result in R7:R6:R5:R4
  601:				;------------------------------------------------------------------

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 12



 Line  I  Addr  Code            Source

  602:	  03AB	C0 E0		FRQCOUNT:	PUSH	ACC
  603:	  03AD	D2 93				SETB	P1.3				;DISABLE COUNT
  604:	  03AF	C2 92				CLR	P1.2				;RESET 74HC590
  605:	  03B1	D2 92				SETB	P1.2
  606:						;Select channel
  607:	  03B3	A2 E0				MOV	C,ACC.0
  608:	  03B5	92 90				MOV	P1.0,C
  609:	  03B7	A2 E1				MOV	C,ACC.1
  610:	  03B9	92 91				MOV	P1.1,C
  611:	  03BB	75 8A 00			MOV	TL0,#00h
  612:	  03BE	75 8C 00			MOV	TH0,#00h
  613:	  03C1	E5 89				MOV	A,TMOD
  614:	  03C3	D2 E0				SETB	ACC.0				;M00
  615:	  03C5	C2 E1				CLR	ACC.1				;M01
  616:	  03C7	D2 E2				SETB	ACC.2				;C/T0#
  617:	  03C9	C2 E3				CLR	ACC.3				;GATE0
  618:	  03CB	F5 89				MOV	TMOD,A
  619:	  03CD	E5 88				MOV	A,TCON
  620:	  03CF	D2 E4				SETB	ACC.4				;TR0
  621:	  03D1	C2 E5				CLR	ACC.5				;TF0
  622:	  03D3	F5 88				MOV	TCON,A
  623:	  03D5	D0 E0				POP	ACC
  624:	  03D7	14				DEC	A
  625:	  03D8	60 08				JZ	FRQCOUNT1
  626:	  03DA	C2 93				CLR	P1.3				;ENABLR COUNT
  627:	  03DC	71 8E				ACALL	WAIT256MS
  628:	  03DE	D2 93				SETB	P1.3				;DISABLE COUNT
  629:	  03E0	80 06				SJMP	FRQCOUNT2
  630:	  03E2	C2 93		FRQCOUNT1:	CLR	P1.3				;ENABLR COUNT
  631:	  03E4	71 81				ACALL	WAITASEC
  632:	  03E6	D2 93				SETB	P1.3				;DISABLE COUNT
  633:	  03E8	E5 80		FRQCOUNT2:	MOV	A,P0				;8 BITS FROM 74HC590
  634:	  03EA	FC				MOV	R4,A
  635:	  03EB	E5 8A				MOV	A,TL0				;8 BITS FROM
  636:	  03ED	FD				MOV	R5,A
  637:	  03EE	E5 8C				MOV	A,TH0				;8 BITS FROM
  638:	  03F0	FE				MOV	R6,A
  639:	  03F1	E4				CLR	A				;TF0 Is the 25th bit
  640:	  03F2	A2 8D				MOV	C,TF0
  641:	  03F4	33				RLC	A
  642:	  03F5	FF				MOV	R7,A
  643:	  03F6	22				RET
  644:
  645:				;------------------------------------------------------------------
  646:				;Format frequency conter text line
  647:				;	LCDLINE+4 Decimal result
  648:				;	R7 Number of digits
  649:				;OUT:	Formatted LCDLINE
  650:				;------------------------------------------------------------------
  651:	  03F7	75 40 46	FRQFORMAT:	MOV	LCDLINE+0,#'F'
  652:	  03FA	75 41 3D			MOV	LCDLINE+1,#'='
  653:	  03FD	75 42 20			MOV	LCDLINE+2,#' '
  654:	  0400	78 43				MOV	R0,#LCDLINE+3
  655:	  0402	79 45				MOV	R1,#LCDLINE+5
  656:	  0404	BF 07 00			CJNE	R7,#07h,$+3
  657:	  0407	40 19				JC	FRQFORMATKHZ

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 13



 Line  I  Addr  Code            Source

  658:						;MHz
  659:	  0409	7F 09				MOV	R7,#09h
  660:	  040B	E7		FRQFORMATMHZ1:	MOV	A,@R1
  661:	  040C	BF 06 03			CJNE	R7,#06h,FRQFORMATMHZ2
  662:	  040F	76 2E				MOV	@R0,#'.'
  663:	  0411	08				INC	R0
  664:	  0412	F6		FRQFORMATMHZ2:	MOV	@R0,A
  665:	  0413	08				INC	R0
  666:	  0414	09				INC	R1
  667:	  0415	DF F4				DJNZ	R7,FRQFORMATMHZ1
  668:	  0417	75 4D 4D			MOV	LCDLINE+13,#'M'
  669:	  041A	75 4E 48			MOV	LCDLINE+14,#'H'
  670:	  041D	75 4F 7A			MOV	LCDLINE+15,#'z'
  671:	  0420	80 30				SJMP	FRQFORMATDONE
  672:	  0422	BF 04 00	FRQFORMATKHZ:	CJNE	R7,#04h,$+3
  673:	  0425	40 19				JC	FRQFORMATHZ
  674:						;KHz
  675:	  0427	7F 09				MOV	R7,#09h
  676:	  0429	E7		FRQFORMATKHZ1:	MOV	A,@R1
  677:	  042A	BF 03 03			CJNE	R7,#03h,FRQFORMATKHZ2
  678:	  042D	76 2E				MOV	@R0,#'.'
  679:	  042F	08				INC	R0
  680:	  0430	F6		FRQFORMATKHZ2:	MOV	@R0,A
  681:	  0431	08				INC	R0
  682:	  0432	09				INC	R1
  683:	  0433	DF F4				DJNZ	R7,FRQFORMATKHZ1
  684:	  0435	75 4D 4B			MOV	LCDLINE+13,#'K'
  685:	  0438	75 4E 48			MOV	LCDLINE+14,#'H'
  686:	  043B	75 4F 7A			MOV	LCDLINE+15,#'z'
  687:	  043E	80 12				SJMP	FRQFORMATDONE
  688:	  0440			FRQFORMATHZ:	;Hz
  689:	  0440	08				INC	R0
  690:	  0441	7F 09				MOV	R7,#09h
  691:	  0443	E7		FRQFORMATHZ1:	MOV	A,@R1
  692:	  0444	F6				MOV	@R0,A
  693:	  0445	08				INC	R0
  694:	  0446	09				INC	R1
  695:	  0447	DF FA				DJNZ	R7,FRQFORMATHZ1
  696:	  0449	75 4D 48			MOV	LCDLINE+13,#'H'
  697:	  044C	75 4E 7A			MOV	LCDLINE+14,#'z'
  698:	  044F	75 4F 20			MOV	LCDLINE+15,#' '
  699:	  0452	22		FRQFORMATDONE:	RET
  700:
  701:				;------------------------------------------------------------------
  702:				;LCD Output.
  703:				;------------------------------------------------------------------
  704:		N      0000	IF DEBUG=1
  705:				TXBYTE:		MOV	SBUF,A
  706:						JNB	TI,$
  707:						CLR	TI
  708:						RET
  709:				ENDIF
  710:
  711:	  0453	C0 07		LCDDELAY:	PUSH	07h
  712:	  0455	7F 00				MOV	R7,#00h
  713:	  0457	DF FE				DJNZ	R7,$

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 14



 Line  I  Addr  Code            Source

  714:	  0459	D0 07				POP	07h
  715:	  045B	22				RET
  716:
  717:				;A contains nibble, ACC.4 contains RS
  718:	  045C	D2 E5		LCDNIBOUT:	SETB	ACC.5				;E
  719:	  045E	F5 A0				MOV	P2,A
  720:	  0460	C2 A5				CLR	P2.5				;Negative edge on E
  721:	  0462	22				RET
  722:
  723:				;A contains byte
  724:	  0463	C0 E0		LCDCMDOUT:	PUSH	ACC
  725:	  0465	C4				SWAP	A				;High nibble first
  726:	  0466	54 0F				ANL	A,#0Fh
  727:	  0468	91 5C				ACALL	LCDNIBOUT
  728:	  046A	D0 E0				POP	ACC
  729:	  046C	54 0F				ANL	A,#0Fh
  730:	  046E	91 5C				ACALL	LCDNIBOUT
  731:	  0470	91 53				ACALL	LCDDELAY			;Wait for BF to clear
  732:	  0472	22				RET
  733:
  734:				;A contains byte
  735:	  0473			LCDCHROUT:
  736:		N      0000	IF DEBUG=1
  737:						AJMP	TXBYTE
  738:				ENDIF
  739:	  0473	C0 E0				PUSH	ACC
  740:	  0475	C4				SWAP	A				;High nibble first
  741:	  0476	54 0F				ANL	A,#0Fh
  742:	  0478	D2 E4				SETB	ACC.4				;RS
  743:	  047A	91 5C				ACALL	LCDNIBOUT
  744:	  047C	D0 E0				POP	ACC
  745:	  047E	54 0F				ANL	A,#0Fh
  746:	  0480	D2 E4				SETB	ACC.4				;RS
  747:	  0482	91 5C				ACALL	LCDNIBOUT
  748:	  0484	91 53				ACALL	LCDDELAY			;Wait for BF to clear
  749:	  0486	22				RET
  750:
  751:	  0487	74 01		LCDCLEAR:	MOV	A,#00000001b
  752:	  0489	91 63				ACALL	LCDCMDOUT
  753:	  048B	7F 00				MOV	R7,#00h
  754:	  048D	91 53		LCDCLEAR1:	ACALL	LCDDELAY
  755:	  048F	DF FC				DJNZ	R7,LCDCLEAR1
  756:	  0491	22				RET
  757:
  758:				;A contais address
  759:	  0492	44 80		LCDSETADR:	ORL	A,#10000000b
  760:	  0494	91 63				ACALL	LCDCMDOUT
  761:	  0496	22				RET
  762:
  763:	  0497	E6		LCDPRINTSTR:	MOV	A,@R0
  764:	  0498	91 73				ACALL	LCDCHROUT
  765:	  049A	08				INC	R0
  766:	  049B	DF FA				DJNZ	R7,LCDPRINTSTR
  767:		N      0000	IF DEBUG=1
  768:						MOV	A,#0DH
  769:						ACALL	LCDCHROUT

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 15



 Line  I  Addr  Code            Source

  770:						MOV	A,#0AH
  771:						ACALL	LCDCHROUT
  772:				ENDIF
  773:	  049D	22				RET
  774:
  775:	  049E	E4		PRNTCDPTRLCD:	CLR	A
  776:	  049F	93				MOVC	A,@A+DPTR
  777:	  04A0	60 05				JZ	PRNTCDPTRLCD1
  778:	  04A2	91 73				ACALL	LCDCHROUT
  779:	  04A4	A3				INC	DPTR
  780:	  04A5	80 F7				SJMP	PRNTCDPTRLCD
  781:	  04A7			PRNTCDPTRLCD1:
  782:		N      0000	IF DEBUG=1
  783:						MOV	A,#0DH
  784:						ACALL	LCDCHROUT
  785:						MOV	A,#0AH
  786:						ACALL	LCDCHROUT
  787:				ENDIF
  788:	  04A7	22				RET
  789:
  790:	  04A8	74 03		LCDINIT:	MOV	A,#00000011b			;Function set
  791:	  04AA	91 5C				ACALL	LCDNIBOUT
  792:	  04AC	91 53				ACALL	LCDDELAY			;Wait for BF to clear
  793:	  04AE	74 28				MOV	A,#00101000b
  794:	  04B0	91 63				ACALL	LCDCMDOUT
  795:	  04B2	74 28				MOV	A,#00101000b
  796:	  04B4	91 63				ACALL	LCDCMDOUT
  797:	  04B6	74 0C				MOV	A,#00001100b			;Display ON/OFF
  798:	  04B8	91 63				ACALL	LCDCMDOUT
  799:	  04BA	91 87				ACALL	LCDCLEAR			;Clear
  800:	  04BC	74 06				MOV	A,#00000110b			;Cursor direction
  801:	  04BE	91 63				ACALL	LCDCMDOUT
  802:	  04C0	22				RET
  803:
  804:	  04C1	78 40		LCDCLEARLINE:	MOV	R0,#LCDLINE			;Get logic levels
  805:	  04C3	7F 10				MOV	R7,#10h
  806:	  04C5	74 20				MOV	A,#20H
  807:	  04C7	F6		LCDCLEARLINE1:	MOV	@R0,A
  808:	  04C8	08				INC	R0
  809:	  04C9	DF FC				DJNZ	R7,LCDCLEARLINE1
  810:	  04CB	22				RET
  811:
  812:		N      0800			ORG	0800h
  813:
  814:				$INCLUDE	(FP52INT.a51)
  815: 1			; This is a complete BCD floating point package for the 8051 micro-
  816: 1			; controller. It provides 8 digits of accuracy with exponents that
  817: 1			; range from +127 to -127. The mantissa is in packed BCD, while the
  818: 1			; exponent is expressed in pseudo-twos complement. A ZERO exponent
  819: 1			; is used to express the number ZERO. An exponent value of 80H or
  820: 1			; greater than means the exponent is positive, i.e. 80H = E 0,
  821: 1			; 81H = E+1, 82H = E+2 and so on. If the exponent is 7FH or less,
  822: 1			; the exponent is negative, 7FH = E-1, 7EH = E-2, and so on.
  823: 1			; ALL NUMBERS ARE ASSUMED TO BE NORMALIZED and all results are
  824: 1			; normalized after calculation. A normalized mantissa is >=.10 and
  825: 1			; <=.99999999.

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 16



 Line  I  Addr  Code            Source

  826: 1			;
  827: 1			; The numbers in memory assumed to be stored as follows:
  828: 1			;
  829: 1			; EXPONENT OF ARGUMENT 2   =   VALUE OF ARG_STACK+FP_NUMBER_SIZE
  830: 1			; SIGN OF ARGUMENT 2       =   VALUE OF ARG_STACK+FP_NUMBER_SIZE-1
  831: 1			; DIGIT 78 OF ARGUMENT 2   =   VALUE OF ARG_STACK+FP_NUMBER_SIZE-2
  832: 1			; DIGIT 56 OF ARGUMENT 2   =   VALUE OF ARG_STACK+FP_NUMBER_SIZE-3
  833: 1			; DIGIT 34 OF ARGUMENT 2   =   VALUE OF ARG_STACK+FP_NUMBER_SIZE-4
  834: 1			; DIGIT 12 OF ARGUMENT 2   =   VALUE OF ARG_STACK+FP_NUMBER_SIZE-5
  835: 1			;
  836: 1			; EXPONENT OF ARGUMENT 1   =   VALUE OF ARG_STACK
  837: 1			; SIGN OF ARGUMENT 1       =   VALUE OF ARG_STACK-1
  838: 1			; DIGIT 78 OF ARGUMENT 1   =   VALUE OF ARG_STACK-2
  839: 1			; DIGIT 56 OF ARGUMENT 1   =   VALUE OF ARG_STACK-3
  840: 1			; DIGIT 34 OF ARGUMENT 1   =   VALUE OF ARG_STACK-4
  841: 1			; DIGIT 12 OF ARGUMENT 1   =   VALUE OF ARG_STACK-5
  842: 1			;
  843: 1			; The operations are performed thusly:
  844: 1			;
  845: 1			; ARG_STACK+FP_NUMBER_SIZE = ARG_STACK+FP_NUMBER_SIZE # ARG_STACK
  846: 1			;
  847: 1			; Which is ARGUMENT 2 = ARGUMENT 2 # ARGUMENT 1
  848: 1			;
  849: 1			; Where # can be ADD, SUBTRACT, MULTIPLY OR DIVIDE.
  850: 1			;
  851: 1			; Note that the stack gets popped after an operation.
  852: 1			;
  853: 1			; The FP_COMP instruction POPS the ARG_STACK TWICE and returns status.
  854: 1			;
  855: 1			;**********************************************************************
  856: 1			;
  857: 1			;**********************************************************************
  858: 1			;
  859: 1			; STATUS ON RETURN - After performing an operation (+, -, *, /)
  860: 1			;                    the accumulator contains the following status
  861: 1			;
  862: 1			; ACCUMULATOR - BIT 0 - FLOATING POINT UNDERFLOW OCCURED
  863: 1			;
  864: 1			;             - BIT 1 - FLOATING POINT OVERFLOW OCCURED
  865: 1			;
  866: 1			;             - BIT 2 - RESULT WAS ZER0
  867: 1			;
  868: 1			;             - BIT 3 - DIVIDE BY ZERO ATTEMPTED
  869: 1			;
  870: 1			;             - BIT 4 - NOT USED, 0 RETURNED
  871: 1			;
  872: 1			;             - BIT 5 - NOT USED, 0 RETURNED
  873: 1			;
  874: 1			;             - BIT 6 - NOT USED, 0 RETURNED
  875: 1			;
  876: 1			;             - BIT 7 - NOT USED, 0 RETURNED
  877: 1			;
  878: 1			; NOTE: When underflow occures, a ZERO result is returned.
  879: 1			;       When overflow or divide by zero occures, a result of
  880: 1			;       .99999999 E+127 is returned and it is up to the user
  881: 1			;       to handle these conditions as needed in the program.

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 17



 Line  I  Addr  Code            Source

  882: 1			;
  883: 1			; NOTE: The Compare instruction returns F0 = 0 if ARG 1 = ARG 2
  884: 1			;       and returns a CARRY FLAG = 1 if ARG 1 is > ARG 2
  885: 1			;
  886: 1			;***********************************************************************
  887: 1			;
  888: 1
  889: 1			CMP MACRO REGISTER,CONSTANT
  890: 1			CJNE	REGISTER,CONSTANT,$+3
  891: 1			ENDM
  892: 1
  893: 1			;
  894: 1			;FP_BASE	EQU	$
  895: 1
  896: 1				;**************************************************************
  897: 1				;
  898: 1				; The floating point entry points and jump table
  899: 1				;
  900: 1				;**************************************************************
  901: 1				;
  902: 1			;		AJMP	FLOATING_ADD
  903: 1			;		AJMP	FLOATING_SUB
  904: 1			;		AJMP	FLOATING_COMP
  905: 1			;		AJMP	FLOATING_MUL
  906: 1			;		AJMP	FLOATING_DIV
  907: 1			;		AJMP	HEXSCAN
  908: 1			;		AJMP	FLOATING_POINT_INPUT
  909: 1			;		AJMP	FLOATING_POINT_OUTPUT
  910: 1			;		AJMP	MULNUM10
  911: 1			;		AJMP	HEXOUT
  912: 1			;		AJMP	PUSHAS				;PUSH R0 TO ARGUMENT
  913: 1			;		AJMP	POPAS				;POP ARGUMENT TO R1
  914: 1			;		AJMP	MOVAS				;COPY ARGUMENT TO R1
  915: 1			;		AJMP	AINT				;INT FUNCTION
  916: 1			;		AJMP	PUSHC				;PUSH ARG IN CODE MEM POINTED TO BY DPTR TO
       1			STACK
  917: 1
  918: 1				;
  919: 1				;IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII
  920: 1				;
  921: 1  0800			FLOATING_INIT:
  922: 1				;
  923: 1				;IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII
  924: 1				;
  925: 1  0800	75 24 FF			MOV	ARG_STACK,#FPSTACK
  926: 1  0803	75 25 00			MOV	FORMAT,#00h
  927: 1  0806	75 50 40			MOV	FPCHR_OUT,#LCDLINE
  928: 1  0809	75 27 40			MOV	CONVT,#LCDLINE
  929: 1  080C	22				RET
  930: 1
  931: 1  080D	22		PRTERR:		RET
  932: 1  080E	22		BADPRM:		RET
  933: 1
  934: 1				;
  935: 1				;
  936: 1  080F			FLOATING_SUB:

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 18



 Line  I  Addr  Code            Source

  937: 1				;
  938: 1  080F	A8 24				MOV	R0,ARG_STACK
  939: 1  0811	18				DEC	R0				;POINT TO SIGN
  940: 1  0812	E6				MOV	A,@R0				;READ SIGN
  941: 1  0813	B2 E0				CPL	ACC.0
  942: 1  0815	F6				MOV	@R0,A
  943: 1				;
  944: 1				;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
  945: 1				;
  946: 1  0816			FLOATING_ADD:
  947: 1				;
  948: 1				;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
  949: 1				;
  950: 1				;
  951: 1  0816	51 D4				ACALL 	MDES1				;R7=TOS EXP, R6=TOS-1 EXP, R4=TOS SIGN
  952: 1											;R3=TOS-1 SIGN, OPERATION IS R1 # R0
  953: 1				;
  954: 1  0818	EF				MOV	A,R7				;GET TOS EXPONENT
  955: 1  0819	60 0D				JZ	POP_AND_EXIT			;IF TOS=0 THEN POP AND EXIT
  956: 1  081B	BE 00 12			CJNE	R6,#0,LOAD1			;CLEAR CARRY EXIT IF ZERO
  957: 1				;
  958: 1				;**************************************************************
  959: 1				;
  960: 1  081E			SWAP_AND_EXIT:						; Swap external args and return
  961: 1				;
  962: 1				;**************************************************************
  963: 1				;
  964: 1  081E	51 CB				ACALL	LOAD_POINTERS
  965: 1  0820	7F 06				MOV	R7,#FP_NUMBER_SIZE
  966: 1				;
  967: 1  0822	E6		SE1:		MOV	A,@R0				;SWAP THE ARGUMENTS
  968: 1  0823	F7				MOV	@R1,A
  969: 1  0824	18				DEC	R0
  970: 1  0825	19				DEC	R1
  971: 1  0826	DF FA				DJNZ	R7,SE1
  972: 1				;
  973: 1  0828			POP_AND_EXIT:
  974: 1				;
  975: 1  0828	E5 24				MOV	A,ARG_STACK			;POP THE STACK
  976: 1  082A	24 06				ADD	A,#FP_NUMBER_SIZE
  977: 1  082C	F5 24				MOV	ARG_STACK,A
  978: 1  082E	E4				CLR	A
  979: 1  082F	22				RET
  980: 1				;
  981: 1				;
  982: 1  0830	9E		LOAD1:		SUBB	A,R6				;A = ARG 1 EXP - ARG 2 EXP
  983: 1  0831	8F 30				MOV	FP_EXP,R7			;SAVE EXPONENT AND SIGN
  984: 1  0833	8C 2F				MOV	FP_SIGN,R4
  985: 1  0835	50 09				JNC	LOAD2				;ARG1 EXPONENT IS LARGER OR SAME
  986: 1  0837	8E 30				MOV	FP_EXP,R6
  987: 1  0839	8B 2F				MOV	FP_SIGN,R3
  988: 1  083B	F4				CPL	A
  989: 1  083C	04				INC	A				;COMPENSATE FOR EXP DELTA
  990: 1  083D	C8				XCH	A,R0				;FORCE R0 TO POINT AT THE LARGEST
  991: 1  083E	C9				XCH	A,R1				;EXPONENT
  992: 1  083F	C8				XCH	A,R0

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 19



 Line  I  Addr  Code            Source

  993: 1				;
  994: 1  0840	FF		LOAD2:		MOV	R7,A				;SAVE THE EXPONENT DELTA IN R7
  995: 1  0841	C2 33				CLR	ADD_IN
  996: 1  0843	BD 00 02			CJNE	R5,#0,LOAD3
  997: 1  0846	D2 33				SETB	ADD_IN
  998: 1				;
  999: 1				; Load the R1 mantissa
 1000: 1				;
 1001: 1  0848	51 E5		LOAD3:		ACALL	LOADR1_MANTISSA			;LOAD THE SMALLEST NUMBER
 1002: 1				;
 1003: 1				; Now align the number to the delta exponent
 1004: 1				; R4 points to the string of the last digits lost
 1005: 1				;
 1006: 1					CMP	R7,#DIGIT+DIGIT+3
 1007+ 2  084A	BF 0B 00	CJNE	R7,#DIGIT+DIGIT+3,$+3
 1008: 1  084D	40 02				JC	LOAD4
 1009: 1  084F	7F 0A				MOV	R7,#DIGIT+DIGIT+2
 1010: 1				;
 1011: 1  0851	75 2A 00	LOAD4:		MOV	FP_CARRY,#00			;CLEAR THE CARRY
 1012: 1  0854	51 28				ACALL	RIGHT				;SHIFT THE NUMBER
 1013: 1				;
 1014: 1				; Set up for addition and subtraction
 1015: 1				;
 1016: 1  0856	7F 04				MOV	R7,#DIGIT			;LOOP COUNT
 1017: 1  0858	79 2E				MOV	R1,#FP_DIG78
 1018: 1  085A	74 9E				MOV	A,#9EH
 1019: 1  085C	C3				CLR	C
 1020: 1  085D	9C				SUBB	A,R4
 1021: 1  085E	D4				DA	A
 1022: 1  085F	CC				XCH	A,R4
 1023: 1  0860	70 01				JNZ	LOAD5
 1024: 1  0862	FC				MOV	R4,A
 1025: 1  0863			LOAD5:		CMP	A,#50H				;TEST FOR SUBTRACTION
 1026+ 2  0863	B4 50 00	CJNE	A,#50H,$+3
 1027: 1  0866	30 33 18			JNB	ADD_IN,SUBLP			;DO SUBTRACTION IF NO ADD_IN
 1028: 1  0869	B3				CPL	C				;FLIP CARRY FOR ADDITION
 1029: 1  086A	11 78				ACALL	ADDLP				;DO ADDITION
 1030: 1				;
 1031: 1  086C	50 08				JNC	ADD_R
 1032: 1  086E	05 2A				INC	FP_CARRY
 1033: 1  0870	7F 01				MOV	R7,#1
 1034: 1  0872	51 28				ACALL	RIGHT
 1035: 1  0874	31 DF				ACALL	INC_FP_EXP			;SHIFT AND BUMP EXPONENT
 1036: 1				;
 1037: 1  0876	21 D0		ADD_R:		AJMP	STORE_ALIGN_TEST_AND_EXIT
 1038: 1				;
 1039: 1  0878	E6		ADDLP:		MOV	A,@R0
 1040: 1  0879	37				ADDC	A,@R1
 1041: 1  087A	D4				DA	A
 1042: 1  087B	F7				MOV	@R1,A
 1043: 1  087C	18				DEC	R0
 1044: 1  087D	19				DEC	R1
 1045: 1  087E	DF F8				DJNZ	R7,ADDLP			;LOOP UNTIL DONE
 1046: 1  0880	22				RET
 1047: 1				;
 1048: 1				;

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 20



 Line  I  Addr  Code            Source

 1049: 1  0881	E6		SUBLP:		MOV	A,@R0				;NOW DO SUBTRACTION
 1050: 1  0882	FE				MOV	R6,A
 1051: 1  0883	E4				CLR	A
 1052: 1  0884	34 99				ADDC	A,#99H
 1053: 1  0886	97				SUBB	A,@R1
 1054: 1  0887	2E				ADD	A,R6
 1055: 1  0888	D4				DA	A
 1056: 1  0889	F7				MOV	@R1,A
 1057: 1  088A	18				DEC	R0
 1058: 1  088B	19				DEC	R1
 1059: 1  088C	DF F3				DJNZ	R7,SUBLP
 1060: 1  088E	40 11				JC	FSUB6
 1061: 1				;
 1062: 1				;
 1063: 1				; Need to complement the result and sign because the floating
 1064: 1				; point accumulator mantissa was larger than the external
 1065: 1				; memory and their signs were equal.
 1066: 1				;
 1067: 1  0890	B2 78				CPL	FP_SIGN.0
 1068: 1  0892	79 2E				MOV	R1,#FP_DIG78
 1069: 1  0894	7F 04				MOV	R7,#DIGIT			;LOOP COUNT
 1070: 1				;
 1071: 1  0896	74 9A		FSUB5:		MOV	A,#9AH
 1072: 1  0898	97				SUBB	A,@R1
 1073: 1  0899	24 00				ADD	A,#0
 1074: 1  089B	D4				DA	A
 1075: 1  089C	F7				MOV	@R1,A
 1076: 1  089D	19				DEC	R1
 1077: 1  089E	B3				CPL	C
 1078: 1  089F	DF F5				DJNZ	R7,FSUB5			;LOOP
 1079: 1				;
 1080: 1				; Now see how many zeros their are
 1081: 1				;
 1082: 1  08A1	78 2B		FSUB6:		MOV	R0,#FP_DIG12
 1083: 1  08A3	7F 00				MOV	R7,#0
 1084: 1				;
 1085: 1  08A5	E6		FSUB7:		MOV	A,@R0
 1086: 1  08A6	70 08				JNZ	FSUB8
 1087: 1  08A8	0F				INC	R7
 1088: 1  08A9	0F				INC	R7
 1089: 1  08AA	08				INC	R0
 1090: 1  08AB	B8 2F F7			CJNE	R0,#FP_SIGN,FSUB7
 1091: 1  08AE	41 18				AJMP	ZERO_AND_EXIT
 1092: 1				;
 1093: 1  08B0			FSUB8:		CMP	A,#10H
 1094+ 2  08B0	B4 10 00	CJNE	A,#10H,$+3
 1095: 1  08B3	50 01				JNC	FSUB9
 1096: 1  08B5	0F				INC	R7
 1097: 1				;
 1098: 1				; Now R7 has the number of leading zeros in the FP ACC
 1099: 1				;
 1100: 1  08B6	E5 30		FSUB9:		MOV	A,FP_EXP			;GET THE OLD EXPONENT
 1101: 1  08B8	C3				CLR	C
 1102: 1  08B9	9F				SUBB	A,R7				;SUBTRACT FROM THE NUMBER OF ZEROS
 1103: 1  08BA	60 0B				JZ	FSUB10
 1104: 1  08BC	40 09				JC	FSUB10

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 21



 Line  I  Addr  Code            Source

 1105: 1				;
 1106: 1  08BE	F5 30				MOV	FP_EXP,A			;SAVE THE NEW EXPONENT
 1107: 1				;
 1108: 1  08C0	51 62				ACALL	LEFT1				;SHIFT THE FP ACC
 1109: 1  08C2	75 2A 00			MOV	FP_CARRY,#0
 1110: 1  08C5	21 D0				AJMP	STORE_ALIGN_TEST_AND_EXIT
 1111: 1				;
 1112: 1  08C7	41 12		FSUB10:		AJMP	UNDERFLOW_AND_EXIT
 1113: 1				;
 1114: 1				;***************************************************************
 1115: 1				;
 1116: 1  08C9			FLOATING_COMP:	; Compare two floating point numbers
 1117: 1					; used for relational operations and is faster
 1118: 1					; than subtraction. ON RETURN, The carry is set
 1119: 1					; if ARG1 is > ARG2, else carry is not set
 1120: 1					; if ARG1 = ARG2, F0 gets set
 1121: 1				;
 1122: 1				;***************************************************************
 1123: 1				;
 1124: 1  08C9	51 D4				ACALL	MDES1				;SET UP THE REGISTERS
 1125: 1  08CB	E5 24				MOV	A,ARG_STACK
 1126: 1  08CD	24 0C				ADD	A,#FP_NUMBER_SIZE+FP_NUMBER_SIZE
 1127: 1  08CF	F5 24				MOV	ARG_STACK,A			;POP THE STACK TWICE, CLEAR THE CARRY
 1128: 1  08D1	EE				MOV	A,R6				;CHECK OUT EXPONENTS
 1129: 1  08D2	C2 D5				CLR	F0
 1130: 1  08D4	C3		        	CLR     C
 1131: 1  08D5	9F				SUBB	A,R7
 1132: 1  08D6	60 0A				JZ	EXPONENTS_EQUAL
 1133: 1  08D8	40 03				JC	ARG1_EXP_GT
 1134: 1				;
 1135: 1				; Now the ARG2 EXPONENT is > ARG1 EXPONENT
 1136: 1				;
 1137: 1  08DA			SIGNS_DIFFERENT:
 1138: 1				;
 1139: 1  08DA	EB				MOV	A,R3				;SEE IF SIGN OF ARG2 IS POSITIVE
 1140: 1  08DB	80 01				SJMP	ARG1_EXP_GT1
 1141: 1				;
 1142: 1  08DD			ARG1_EXP_GT:
 1143: 1				;
 1144: 1  08DD	EC				MOV	A,R4				;GET THE SIGN OF ARG1 EXPONENT
 1145: 1  08DE	60 01		ARG1_EXP_GT1:	JZ	ARG1_EXP_GT2
 1146: 1  08E0	B3				CPL	C
 1147: 1  08E1	22		ARG1_EXP_GT2:	RET
 1148: 1				;
 1149: 1  08E2			EXPONENTS_EQUAL:
 1150: 1				;
 1151: 1				; First, test the sign, then the mantissa
 1152: 1				;
 1153: 1  08E2	BD 00 F5			CJNE	R5,#0,SIGNS_DIFFERENT
 1154: 1				;
 1155: 1  08E5			BOTH_PLUS:
 1156: 1				;
 1157: 1  08E5	7F 04				MOV	R7,#DIGIT			;POINT AT MS DIGIT
 1158: 1  08E7	18				DEC	R0
 1159: 1  08E8	18				DEC	R0
 1160: 1  08E9	18				DEC	R0

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 22



 Line  I  Addr  Code            Source

 1161: 1  08EA	19				DEC	R1
 1162: 1  08EB	19				DEC	R1
 1163: 1  08EC	19				DEC	R1
 1164: 1				;
 1165: 1				; Now do the compare
 1166: 1				;
 1167: 1  08ED	E6		CLOOP:		MOV	A,@R0
 1168: 1  08EE	FE				MOV	R6,A
 1169: 1  08EF	E7				MOV	A,@R1
 1170: 1  08F0	9E				SUBB	A,R6
 1171: 1  08F1	70 EA				JNZ	ARG1_EXP_GT
 1172: 1  08F3	08				INC	R0
 1173: 1  08F4	09				INC	R1
 1174: 1  08F5	DF F6				DJNZ	R7,CLOOP
 1175: 1				;
 1176: 1				; If here, the numbers are the same, the carry is cleared
 1177: 1				;
 1178: 1  08F7	D2 D5				SETB	F0
 1179: 1  08F9	22				RET					;EXIT WITH EQUAL
 1180: 1				;
 1181: 1			;MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
 1182: 1			;
 1183: 1  08FA			FLOATING_MUL:						; Floating point multiply
 1184: 1			;
 1185: 1			;MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
 1186: 1			;
 1187: 1  08FA	51 D2				ACALL	MUL_DIV_EXP_AND_SIGN
 1188: 1				;
 1189: 1				; check for zero exponents
 1190: 1				;
 1191: 1  08FC	BE 00 02			CJNE	R6,#00,FMUL1			;ARG 2 EXP ZERO?
 1192: 1  08FF	41 18		FMUL0:		AJMP	ZERO_AND_EXIT
 1193: 1				;
 1194: 1				; calculate the exponent
 1195: 1				;
 1196: 1  0901	8D 2F		FMUL1:		MOV	FP_SIGN,R5			;SAVE THE SIGN, IN CASE OF FAILURE
 1197: 1				;
 1198: 1  0903	EF				MOV	A,R7
 1199: 1  0904	60 F9				JZ	FMUL0
 1200: 1  0906	2E				ADD	A,R6				;ADD THE EXPONENTS
 1201: 1  0907	20 E7 05			JB	ACC.7,FMUL_OVER
 1202: 1  090A	10 D7 06			JBC	CY,FMUL2			;SEE IF CARRY IS SET
 1203: 1				;
 1204: 1  090D	41 12				AJMP	UNDERFLOW_AND_EXIT
 1205: 1				;
 1206: 1  090F			FMUL_OVER:
 1207: 1				;
 1208: 1  090F	50 02				JNC	FMUL2				;OK IF SET
 1209: 1				;
 1210: 1  0911	41 01		FOV:		AJMP	OVERFLOW_AND_EXIT
 1211: 1				;
 1212: 1  0913	94 81		FMUL2:		SUBB	A,#129				;SUBTRACT THE EXPONENT BIAS
 1213: 1  0915	FE				MOV	R6,A				;SAVE IT FOR LATER
 1214: 1				;
 1215: 1				; Unpack and load R0
 1216: 1				;

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 23



 Line  I  Addr  Code            Source

 1217: 1  0916	31 EB				ACALL	UNPACK_R0
 1218: 1				;
 1219: 1				; Now set up for loop multiply
 1220: 1				;
 1221: 1  0918	7B 04				MOV	R3,#DIGIT
 1222: 1  091A	AC 01				MOV	R4,R1B0
 1223: 1				;
 1224: 1				;
 1225: 1				; Now, do the multiply and accumulate the product
 1226: 1				;
 1227: 1  091C	8C 01		FMUL3:		MOV	R1B0,R4
 1228: 1  091E	E7				MOV	A,@R1
 1229: 1  091F	FA				MOV	R2,A
 1230: 1  0920	51 98				ACALL	MUL_NIBBLE
 1231: 1				;
 1232: 1  0922	EA				MOV	A,R2
 1233: 1  0923	C4				SWAP	A
 1234: 1  0924	51 98				ACALL	MUL_NIBBLE
 1235: 1  0926	1C				DEC	R4
 1236: 1  0927	DB F3				DJNZ	R3,FMUL3
 1237: 1				;
 1238: 1				; Now, pack and restore the sign
 1239: 1				;
 1240: 1  0929	8E 30				MOV	FP_EXP,R6
 1241: 1  092B	8D 2F				MOV	FP_SIGN,R5
 1242: 1  092D	21 90				AJMP	PACK				;FINISH IT OFF
 1243: 1				;
 1244: 1				;DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
 1245: 1				;
 1246: 1  092F			FLOATING_DIV:
 1247: 1				;
 1248: 1				;DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
 1249: 1				;
 1250: 1  092F	51 D4				ACALL	MDES1
 1251: 1				;
 1252: 1				; Check the exponents
 1253: 1				;
 1254: 1  0931	8D 2F				MOV	FP_SIGN,R5			;SAVE THE SIGN
 1255: 1  0933	BF 00 06			CJNE	R7,#0,DIV0			;CLEARS THE CARRY
 1256: 1  0936	51 01				ACALL	OVERFLOW_AND_EXIT
 1257: 1  0938	E4				CLR	A
 1258: 1  0939	D2 E3				SETB	ACC.ZERO_DIVIDE
 1259: 1  093B	22				RET
 1260: 1				;
 1261: 1  093C	EE		DIV0:		MOV	A,R6				;GET EXPONENT
 1262: 1  093D	60 C0				JZ	FMUL1-2				;EXIT IF ZERO
 1263: 1  093F	9F				SUBB	A,R7				;DELTA EXPONENT
 1264: 1  0940	20 E7 04			JB	ACC.7,D_UNDER
 1265: 1  0943	50 04				JNC	DIV3
 1266: 1  0945	41 12				AJMP	UNDERFLOW_AND_EXIT
 1267: 1				;
 1268: 1  0947	50 C8		D_UNDER:	JNC	FOV
 1269: 1				;
 1270: 1  0949	24 81		DIV3:		ADD	A,#129				;CORRECTLY BIAS THE EXPONENT
 1271: 1  094B	F5 30				MOV	FP_EXP,A			;SAVE THE EXPONENT
 1272: 1  094D	51 E5				ACALL	LOADR1_MANTISSA			;LOAD THE DIVIDED

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 24



 Line  I  Addr  Code            Source

 1273: 1				;
 1274: 1  094F	7A 34				MOV	R2,#FP_ACCC			;SAVE LOCATION
 1275: 1  0951	AB 00				MOV	R3,R0B0				;SAVE POINTER IN R3
 1276: 1  0953	75 2A 00			MOV	FP_CARRY,#0			;ZERO CARRY BYTE
 1277: 1				;
 1278: 1  0956	7D FF		DIV4:		MOV	R5,#0FFH			;LOOP COUNT
 1279: 1  0958	D3				SETB	C
 1280: 1				;
 1281: 1  0959	8B 00		DIV5:		MOV	R0B0,R3				;RESTORE THE EXTERNAL POINTER
 1282: 1  095B	79 2E				MOV	R1,#FP_DIG78			;SET UP INTERNAL POINTER
 1283: 1  095D	7F 04				MOV	R7,#DIGIT			;LOOP COUNT
 1284: 1  095F	50 17				JNC	DIV7				;EXIT IF NO CARRY
 1285: 1				;
 1286: 1  0961	E6		DIV6:		MOV	A,@R0				;DO ACCUMLATION
 1287: 1  0962	FE				MOV	R6,A
 1288: 1  0963	E4				CLR	A
 1289: 1  0964	34 99				ADDC	A,#99H
 1290: 1  0966	9E				SUBB	A,R6
 1291: 1  0967	27				ADD	A,@R1
 1292: 1  0968	D4				DA	A
 1293: 1  0969	F7				MOV	@R1,A
 1294: 1  096A	18				DEC	R0
 1295: 1  096B	19				DEC	R1
 1296: 1  096C	DF F3				DJNZ	R7,DIV6				;LOOP
 1297: 1				;
 1298: 1  096E	0D				INC	R5				;SUBTRACT COUNTER
 1299: 1  096F	40 E8				JC	DIV5				;KEEP LOOPING IF CARRY
 1300: 1  0971	E7				MOV	A,@R1				;GET CARRY
 1301: 1  0972	94 01				SUBB	A,#1				;CARRY IS CLEARED
 1302: 1  0974	F7				MOV	@R1,A				;SAVE CARRY DIGIT
 1303: 1  0975	B3				CPL	C
 1304: 1  0976	80 E1				SJMP	DIV5				;LOOP
 1305: 1				;
 1306: 1				; Restore the result if carry was found
 1307: 1				;
 1308: 1  0978	11 78		DIV7:		ACALL	ADDLP				;ADD NUMBER BACK
 1309: 1  097A	77 00				MOV	@R1,#0				;CLEAR CARRY
 1310: 1  097C	8A 00				MOV	R0B0,R2				;GET SAVE COUNTER
 1311: 1  097E	A6 05				MOV	@R0,5				;SAVE COUNT BYTE
 1312: 1				;
 1313: 1  0980	0A				INC	R2				;ADJUST SAVE COUNTER
 1314: 1  0981	7F 01				MOV	R7,#1				;BUMP DIVIDEND
 1315: 1  0983	51 60				ACALL	LEFT
 1316: 1  0985	BA 3E CE			CJNE	R2,#FP_ACC8+2,DIV4
 1317: 1				;
 1318: 1  0988	D5 30 02			DJNZ	FP_EXP,DIV8
 1319: 1  098B	41 12				AJMP	UNDERFLOW_AND_EXIT
 1320: 1				;
 1321: 1  098D	75 2A 00	DIV8:		MOV	FP_CARRY,#0
 1322: 1				;
 1323: 1				;***************************************************************
 1324: 1				;
 1325: 1  0990			PACK:	; Pack the mantissa
 1326: 1				;
 1327: 1				;***************************************************************
 1328: 1				;

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 25



 Line  I  Addr  Code            Source

 1329: 1				; First, set up the pointers
 1330: 1				;
 1331: 1  0990	78 34				MOV	R0,#FP_ACCC
 1332: 1  0992	E6				MOV	A,@R0				;GET FP_ACCC
 1333: 1  0993	FE				MOV	R6,A				;SAVE FOR ZERO COUNT
 1334: 1  0994	60 03				JZ	PACK0				;JUMP OVER IF ZERO
 1335: 1  0996	31 DF				ACALL	INC_FP_EXP			;BUMP THE EXPONENT
 1336: 1  0998	18				DEC	R0
 1337: 1				;
 1338: 1  0999	08		PACK0:		INC	R0				;POINT AT FP_ACC1
 1339: 1				;
 1340: 1  099A	74 08		PACK1:		MOV	A,#8				;ADJUST NIBBLE POINTER
 1341: 1  099C	F9				MOV	R1,A
 1342: 1  099D	28				ADD	A,R0
 1343: 1  099E	F8				MOV	R0,A
 1344: 1					CMP	@R0,#5				;SEE IF ADJUSTING NEEDED
 1345+ 2  099F	B6 05 00	CJNE	@R0,#5,$+3
 1346: 1  09A2	40 13				JC	PACK3+1
 1347: 1				;
 1348: 1  09A4	D3		PACK2:		SETB	C
 1349: 1  09A5	E4				CLR	A
 1350: 1  09A6	18				DEC	R0
 1351: 1  09A7	36				ADDC	A,@R0
 1352: 1  09A8	D4				DA	A
 1353: 1  09A9	D6				XCHD	A,@R0				;SAVE THE VALUE
 1354: 1  09AA	30 E4 09			JNB	ACC.4,PACK3
 1355: 1  09AD	D9 F5				DJNZ	R1,PACK2
 1356: 1				;
 1357: 1  09AF	18				DEC	R0
 1358: 1  09B0	76 01				MOV	@R0,#1
 1359: 1  09B2	31 DF				ACALL	INC_FP_EXP
 1360: 1  09B4	80 06				SJMP	PACK4
 1361: 1				;
 1362: 1  09B6	19		PACK3:		DEC	R1
 1363: 1  09B7	E9				MOV	A,R1
 1364: 1  09B8	C3				CLR	C
 1365: 1  09B9	C8				XCH	A,R0
 1366: 1  09BA	98				SUBB	A,R0
 1367: 1  09BB	F8				MOV	R0,A
 1368: 1				;
 1369: 1  09BC	79 2B		PACK4:		MOV	R1,#FP_DIG12
 1370: 1				;
 1371: 1				; Now, pack
 1372: 1				;
 1373: 1  09BE	E6		PLOOP:		MOV	A,@R0
 1374: 1  09BF	C4				SWAP	A				;FLIP THE DIGITS
 1375: 1  09C0	08				INC	R0
 1376: 1  09C1	D6				XCHD	A,@R0
 1377: 1  09C2	42 06				ORL	6,A				;ACCUMULATE THE OR'ED DIGITS
 1378: 1  09C4	F7				MOV	@R1,A
 1379: 1  09C5	08				INC	R0
 1380: 1  09C6	09				INC	R1
 1381: 1  09C7	B9 2F F4			CJNE	R1,#FP_SIGN,PLOOP
 1382: 1  09CA	EE				MOV	A,R6
 1383: 1  09CB	70 03				JNZ	STORE_ALIGN_TEST_AND_EXIT
 1384: 1  09CD	75 30 00			MOV	FP_EXP,#0			;ZERO EXPONENT

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 26



 Line  I  Addr  Code            Source

 1385: 1				;
 1386: 1				;**************************************************************
 1387: 1				;
 1388: 1  09D0			STORE_ALIGN_TEST_AND_EXIT:				;Save the number align carry and exit
 1389: 1				;
 1390: 1				;**************************************************************
 1391: 1				;
 1392: 1  09D0	51 CB				ACALL	LOAD_POINTERS
 1393: 1  09D2	89 24				MOV	ARG_STACK,R1			;SET UP THE NEW STACK
 1394: 1  09D4	78 30				MOV	R0,#FP_EXP
 1395: 1				;
 1396: 1				; Now load the numbers
 1397: 1				;
 1398: 1  09D6	E6		STORE2:		MOV	A,@R0
 1399: 1  09D7	F7				MOV	@R1,A				;SAVE THE NUMBER
 1400: 1  09D8	18				DEC	R0
 1401: 1  09D9	19				DEC	R1
 1402: 1  09DA	B8 2A F9			CJNE	R0,#FP_CARRY,STORE2
 1403: 1				;
 1404: 1  09DD	E4				CLR	A				;NO ERRORS
 1405: 1				;
 1406: 1  09DE	22		PRET:		RET					;EXIT
 1407: 1				;
 1408: 1  09DF			INC_FP_EXP:
 1409: 1				;
 1410: 1  09DF	05 30				INC	FP_EXP
 1411: 1  09E1	E5 30				MOV	A,FP_EXP
 1412: 1  09E3	70 F9				JNZ	PRET				;EXIT IF NOT ZERO
 1413: 1  09E5	D0 E0				POP	ACC				;WASTE THE CALLING STACK
 1414: 1  09E7	D0 E0				POP	ACC
 1415: 1  09E9	41 01				AJMP	OVERFLOW_AND_EXIT
 1416: 1				;
 1417: 1			;***********************************************************************
 1418: 1			;
 1419: 1  09EB			UNPACK_R0:	; Unpack BCD digits and load into nibble locations
 1420: 1			;
 1421: 1			;***********************************************************************
 1422: 1				;
 1423: 1  09EB	C0 01				PUSH	R1B0
 1424: 1  09ED	79 32				MOV	R1,#FP_NIB8
 1425: 1				;
 1426: 1  09EF	E6		ULOOP:		MOV	A,@R0
 1427: 1  09F0	54 0F				ANL	A,#0FH
 1428: 1  09F2	F7				MOV	@R1,A				;SAVE THE NIBBLE
 1429: 1  09F3	E6				MOV	A,@R0
 1430: 1  09F4	C4				SWAP	A
 1431: 1  09F5	54 0F				ANL	A,#0FH
 1432: 1  09F7	19				DEC	R1
 1433: 1  09F8	F7				MOV	@R1,A				;SAVE THE NIBBLE AGAIN
 1434: 1  09F9	18				DEC	R0
 1435: 1  09FA	19				DEC	R1
 1436: 1  09FB	B9 2A F1			CJNE	R1,#FP_NIB1-1,ULOOP
 1437: 1				;
 1438: 1  09FE	D0 01				POP	R1B0
 1439: 1				;
 1440: 1  0A00	22		LOAD7:		RET

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 27



 Line  I  Addr  Code            Source

 1441: 1				;
 1442: 1				;**************************************************************
 1443: 1				;
 1444: 1  0A01			OVERFLOW_AND_EXIT:	;LOAD 99999999 E+127,  SET OV BIT, AND EXIT
 1445: 1				;
 1446: 1				;**************************************************************
 1447: 1				;
 1448: 1  0A01	78 2E				MOV	R0,#FP_DIG78
 1449: 1  0A03	74 99				MOV	A,#99H
 1450: 1				;
 1451: 1  0A05	F6		OVE1:		MOV	@R0,A
 1452: 1  0A06	18				DEC	R0
 1453: 1  0A07	B8 2A FB			CJNE	R0,#FP_CARRY,OVE1
 1454: 1				;
 1455: 1  0A0A	75 30 FF			MOV	FP_EXP,#0FFH
 1456: 1  0A0D	31 D0				ACALL	STORE_ALIGN_TEST_AND_EXIT
 1457: 1				;
 1458: 1  0A0F	D2 E1				SETB	ACC.OVERFLOW
 1459: 1  0A11	22				RET
 1460: 1				;
 1461: 1				;**************************************************************
 1462: 1				;
 1463: 1  0A12			UNDERFLOW_AND_EXIT:	;LOAD 0, SET UF BIT, AND EXIT
 1464: 1				;
 1465: 1				;**************************************************************
 1466: 1				;
 1467: 1  0A12	51 18				ACALL	ZERO_AND_EXIT
 1468: 1  0A14	E4				CLR		A
 1469: 1  0A15	D2 E0				SETB	ACC.UNDERFLOW
 1470: 1  0A17	22				RET
 1471: 1				;
 1472: 1				;**************************************************************
 1473: 1				;
 1474: 1  0A18			ZERO_AND_EXIT:		;LOAD 0, SET ZERO BIT, AND EXIT
 1475: 1				;
 1476: 1				;**************************************************************
 1477: 1				;
 1478: 1  0A18	51 1F				ACALL	FP_CLEAR
 1479: 1  0A1A	31 D0				ACALL	STORE_ALIGN_TEST_AND_EXIT
 1480: 1  0A1C	D2 E2				SETB	ACC.ZERO
 1481: 1  0A1E	22				RET					;EXIT
 1482: 1				;
 1483: 1				;**************************************************************
 1484: 1				;
 1485: 1  0A1F			FP_CLEAR:
 1486: 1				;
 1487: 1				; Clear internal storage
 1488: 1				;
 1489: 1				;**************************************************************
 1490: 1				;
 1491: 1  0A1F	E4				CLR	A
 1492: 1  0A20	78 3D				MOV	R0,#FP_ACC8+1
 1493: 1				;
 1494: 1  0A22	F6		FPC1:		MOV	@R0,A
 1495: 1  0A23	18				DEC	R0
 1496: 1  0A24	B8 29 FB			CJNE	R0,#FP_TEMP,FPC1

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 28



 Line  I  Addr  Code            Source

 1497: 1  0A27	22				RET
 1498: 1				;
 1499: 1				;**************************************************************
 1500: 1				;
 1501: 1  0A28			RIGHT:	; Shift ACCUMULATOR RIGHT the number of nibbles in R7
 1502: 1				; Save the shifted values in R4 if SAVE_ROUND is set
 1503: 1				;
 1504: 1				;**************************************************************
 1505: 1				;
 1506: 1  0A28	7C 00				MOV	R4,#0				;IN CASE OF NO SHIFT
 1507: 1				;
 1508: 1  0A2A	C3		RIGHT1:		CLR	C
 1509: 1  0A2B	EF				MOV	A,R7				;GET THE DIGITS TO SHIFT
 1510: 1  0A2C	60 22				JZ	RIGHT5-1			;EXIT IF ZERO
 1511: 1  0A2E	94 02				SUBB	A,#2				;TWO TO DO?
 1512: 1  0A30	50 1F				JNC	RIGHT5				;SHIFT TWO NIBBLES
 1513: 1				;
 1514: 1				; Swap one nibble then exit
 1515: 1				;
 1516: 1  0A32	C0 00		RIGHT3:		PUSH	R0B0				;SAVE POINTER REGISTER
 1517: 1  0A34	C0 01				PUSH	R1B0
 1518: 1				;
 1519: 1  0A36	79 2E				MOV	R1,#FP_DIG78			;LOAD THE POINTERS
 1520: 1  0A38	78 2D				MOV	R0,#FP_DIG56
 1521: 1  0A3A	EC				MOV	A,R4				;GET THE OVERFLOW REGISTER
 1522: 1  0A3B	D7				XCHD	A,@R1				;GET DIGIT 8
 1523: 1  0A3C	C4				SWAP	A				;FLIP FOR LOAD
 1524: 1  0A3D	FC				MOV	R4,A
 1525: 1				;
 1526: 1  0A3E	E7		RIGHTL:		MOV	A,@R1				;GET THE LOW ORDER BYTE
 1527: 1  0A3F	D6				XCHD	A,@R0				;SWAP NIBBLES
 1528: 1  0A40	C4				SWAP	A				;FLIP FOR STORE
 1529: 1  0A41	F7				MOV	@R1,A				;SAVE THE DIGITS
 1530: 1  0A42	18				DEC	R0				;BUMP THE POINTERS
 1531: 1  0A43	19				DEC	R1
 1532: 1  0A44	B9 2A F7			CJNE	R1,#FP_DIG12-1,RIGHTL	;LOOP
 1533: 1				;
 1534: 1  0A47	E7				MOV	A,@R1				;ACC = CH8
 1535: 1  0A48	C4				SWAP	A				;ACC = 8CH
 1536: 1  0A49	54 0F				ANL	A,#0FH				;ACC = 0CH
 1537: 1  0A4B	F7				MOV	@R1,A				;CARRY DONE
 1538: 1  0A4C	D0 01				POP	R1B0				;EXIT
 1539: 1  0A4E	D0 00				POP	R0B0				;RESTORE REGISTER
 1540: 1  0A50	22				RET
 1541: 1				;
 1542: 1  0A51	FF		RIGHT5:		MOV	R7,A				;SAVE THE NEW SHIFT NUMBER
 1543: 1  0A52	E4				CLR	A
 1544: 1  0A53	C5 2A				XCH	A,FP_CARRY			;SWAP THE NIBBLES
 1545: 1  0A55	C5 2B				XCH	A,FP_DIG12
 1546: 1  0A57	C5 2C				XCH	A,FP_DIG34
 1547: 1  0A59	C5 2D				XCH	A,FP_DIG56
 1548: 1  0A5B	C5 2E				XCH	A,FP_DIG78
 1549: 1  0A5D	FC				MOV	R4,A				;SAVE THE LAST DIGIT SHIFTED
 1550: 1  0A5E	80 CB				SJMP	RIGHT1+1
 1551: 1				;
 1552: 1				;***************************************************************

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 29



 Line  I  Addr  Code            Source

 1553: 1				;
 1554: 1  0A60			LEFT:	; Shift ACCUMULATOR LEFT the number of nibbles in R7
 1555: 1				;
 1556: 1				;***************************************************************
 1557: 1				;
 1558: 1  0A60	7C 00				MOV	R4,#00H				;CLEAR FOR SOME ENTRYS
 1559: 1				;
 1560: 1  0A62	C3		LEFT1:		CLR	C
 1561: 1  0A63	EF				MOV	A,R7				;GET SHIFT VALUE
 1562: 1  0A64	60 22				JZ	LEFT5-1				;EXIT IF ZERO
 1563: 1  0A66	94 02				SUBB	A,#2				;SEE HOW MANY BYTES TO SHIFT
 1564: 1  0A68	50 1F				JNC	LEFT5
 1565: 1				;
 1566: 1  0A6A	C0 00		LEFT3:		PUSH	R0B0				;SAVE POINTER
 1567: 1  0A6C	C0 01				PUSH	R1B0
 1568: 1  0A6E	78 2A				MOV	R0,#FP_CARRY
 1569: 1  0A70	79 2B				MOV	R1,#FP_DIG12
 1570: 1				;
 1571: 1  0A72	E6				MOV	A,@R0				;ACC=CHCL
 1572: 1  0A73	C4				SWAP	A				;ACC = CLCH
 1573: 1  0A74	F6				MOV	@R0,A				;ACC = CLCH, @R0 = CLCH
 1574: 1				;
 1575: 1  0A75	E7		LEFTL:		MOV	A,@R1				;DIG 12
 1576: 1  0A76	C4				SWAP	A				;DIG 21
 1577: 1  0A77	D6				XCHD	A,@R0
 1578: 1  0A78	F7				MOV	@R1,A				;SAVE IT
 1579: 1  0A79	08				INC	R0				;BUMP POINTERS
 1580: 1  0A7A	09				INC	R1
 1581: 1  0A7B	B8 2E F7			CJNE	R0,#FP_DIG78,LEFTL
 1582: 1				;
 1583: 1  0A7E	EC				MOV	A,R4
 1584: 1  0A7F	C4				SWAP	A
 1585: 1  0A80	D6				XCHD	A,@R0
 1586: 1  0A81	54 F0				ANL	A,#0F0H
 1587: 1  0A83	FC				MOV	R4,A
 1588: 1				;
 1589: 1  0A84	D0 01				POP	R1B0
 1590: 1  0A86	D0 00				POP	R0B0				;RESTORE
 1591: 1  0A88	22				RET					;DONE
 1592: 1				;
 1593: 1  0A89	FF		LEFT5:		MOV	R7,A				;RESTORE COUNT
 1594: 1  0A8A	E4				CLR	A
 1595: 1  0A8B	CC				XCH	A,R4				;GET THE RESTORATION BYTE
 1596: 1  0A8C	C5 2E				XCH	A,FP_DIG78			;DO THE SWAP
 1597: 1  0A8E	C5 2D				XCH	A,FP_DIG56
 1598: 1  0A90	C5 2C				XCH	A,FP_DIG34
 1599: 1  0A92	C5 2B				XCH	A,FP_DIG12
 1600: 1  0A94	C5 2A				XCH	A,FP_CARRY
 1601: 1  0A96	80 CB				SJMP	LEFT1+1
 1602: 1				;
 1603: 1  0A98			MUL_NIBBLE:
 1604: 1				;
 1605: 1				; Multiply the nibble in R7 by the FP_NIB locations
 1606: 1				; accumulate the product in FP_ACC
 1607: 1				;
 1608: 1				; Set up the pointers for multiplication

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 30



 Line  I  Addr  Code            Source

 1609: 1				;
 1610: 1  0A98	54 0F				ANL	A,#0FH				;STRIP OFF MS NIBBLE
 1611: 1  0A9A	FF				MOV	R7,A
 1612: 1  0A9B	78 3C				MOV	R0,#FP_ACC8
 1613: 1  0A9D	79 32				MOV	R1,#FP_NIB8
 1614: 1  0A9F	E4				CLR	A
 1615: 1  0AA0	F5 33				MOV	FP_ACCX,A
 1616: 1				;
 1617: 1  0AA2	18		MNLOOP:		DEC	R0				;BUMP POINTER TO PROPAGATE CARRY
 1618: 1  0AA3	26				ADD	A,@R0				;ATTEMPT TO FORCE CARRY
 1619: 1  0AA4	D4				DA	A				;BCD ADJUST
 1620: 1  0AA5	30 E4 03			JNB	ACC.4,MNL0			;DON'T ADJUST IF NO NEED
 1621: 1  0AA8	18				DEC	R0				;PROPAGATE CARRY TO THE NEXT DIGIT
 1622: 1  0AA9	06				INC	@R0				;DO THE ADJUSTING
 1623: 1  0AAA	08				INC	R0				;RESTORE R0
 1624: 1				;
 1625: 1  0AAB	D6		MNL0:		XCHD	A,@R0				;RESTORE INITIAL NUMBER
 1626: 1  0AAC	8F F0				MOV	B,R7				;GET THE NUBBLE TO MULTIPLY
 1627: 1  0AAE	E7				MOV	A,@R1				;GET THE OTHER NIBBLE
 1628: 1  0AAF	A4				MUL	AB					;DO THE MULTIPLY
 1629: 1  0AB0	75 F0 0A			MOV	B,#10				;NOW BCD ADJUST
 1630: 1  0AB3	84				DIV	AB
 1631: 1  0AB4	C5 F0				XCH	A,B				;GET THE REMAINDER
 1632: 1  0AB6	26				ADD	A,@R0				;PROPAGATE THE PARTIAL PRODUCTS
 1633: 1  0AB7	D4				DA	A				;BCD ADJUST
 1634: 1  0AB8	30 E4 02			JNB	ACC.4,MNL1			;PROPAGATE PARTIAL PRODUCT CARRY
 1635: 1  0ABB	05 F0				INC	B
 1636: 1				;
 1637: 1  0ABD	08		MNL1:		INC	R0
 1638: 1  0ABE	D6				XCHD	A,@R0				;SAVE THE NEW PRODUCT
 1639: 1  0ABF	18				DEC	R0
 1640: 1  0AC0	E5 F0				MOV	A,B				;GET BACK THE QUOTIENT
 1641: 1  0AC2	19				DEC	R1
 1642: 1  0AC3	B9 2A DC			CJNE	R1,#FP_NIB1-1,MNLOOP
 1643: 1				;
 1644: 1  0AC6	25 33				ADD	A,FP_ACCX			;GET THE OVERFLOW
 1645: 1  0AC8	D4				DA	A				;ADJUST
 1646: 1  0AC9	F6				MOV	@R0,A				;SAVE IT
 1647: 1  0ACA	22				RET					;EXIT
 1648: 1				;
 1649: 1				;***************************************************************
 1650: 1				;
 1651: 1  0ACB			LOAD_POINTERS:	; Load the ARG_STACK into R0 and bump R1
 1652: 1				;
 1653: 1				;***************************************************************
 1654: 1				;
 1655: 1  0ACB	A8 24				MOV	R0,ARG_STACK
 1656: 1  0ACD	74 06				MOV	A,#FP_NUMBER_SIZE
 1657: 1  0ACF	28				ADD	A,R0
 1658: 1  0AD0	F9				MOV	R1,A
 1659: 1  0AD1	22				RET
 1660: 1				;
 1661: 1				;***************************************************************
 1662: 1				;
 1663: 1  0AD2			MUL_DIV_EXP_AND_SIGN:
 1664: 1				;

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 31



 Line  I  Addr  Code            Source

 1665: 1				; Load the sign into R7, R6. R5 gets the sign for
 1666: 1				; multiply and divide.
 1667: 1				;
 1668: 1				;***************************************************************
 1669: 1				;
 1670: 1  0AD2	51 1F				ACALL	FP_CLEAR			;CLEAR INTERNAL MEMORY
 1671: 1				;
 1672: 1  0AD4	51 CB		MDES1:		ACALL	LOAD_POINTERS			;LOAD REGISTERS
 1673: 1  0AD6	E6				MOV	A,@R0				;ARG 1 EXP
 1674: 1  0AD7	FF				MOV	R7,A				;SAVED IN R7
 1675: 1  0AD8	E7				MOV	A,@R1				;ARG 2 EXP
 1676: 1  0AD9	FE				MOV	R6,A				;SAVED IN R6
 1677: 1  0ADA	18				DEC	R0				;BUMP POINTERS TO SIGN
 1678: 1  0ADB	19				DEC	R1
 1679: 1  0ADC	E6				MOV	A,@R0				;GET THE SIGN
 1680: 1  0ADD	FC				MOV	R4,A				;SIGN OF ARG1
 1681: 1  0ADE	E7				MOV	A,@R1				;GET SIGN OF NEXT ARG
 1682: 1  0ADF	FB				MOV	R3,A				;SIGN OF ARG2
 1683: 1  0AE0	6C				XRL	A,R4				;ACC GETS THE NEW SIGN
 1684: 1  0AE1	FD				MOV	R5,A				;R5 GETS THE NEW SIGN
 1685: 1				;
 1686: 1				; Bump the pointers to point at the LS digit
 1687: 1				;
 1688: 1  0AE2	18				DEC	R0
 1689: 1  0AE3	19				DEC	R1
 1690: 1				;
 1691: 1  0AE4	22				RET
 1692: 1				;
 1693: 1				;***************************************************************
 1694: 1				;
 1695: 1  0AE5			LOADR1_MANTISSA:
 1696: 1				;
 1697: 1				; Load the mantissa of R0 into FP_Digits
 1698: 1				;
 1699: 1				;***************************************************************
 1700: 1				;
 1701: 1  0AE5	C0 00				PUSH	R0B0				;SAVE REGISTER 1
 1702: 1  0AE7	78 2E				MOV	R0,#FP_DIG78			;SET UP THE POINTER
 1703: 1				;
 1704: 1  0AE9	E7		LOADR1:		MOV	A,@R1
 1705: 1  0AEA	F6				MOV	@R0,A
 1706: 1  0AEB	19				DEC	R1
 1707: 1  0AEC	18				DEC	R0
 1708: 1  0AED	B8 2A F9			CJNE	R0,#FP_CARRY,LOADR1
 1709: 1				;
 1710: 1  0AF0	D0 00				POP	R0B0
 1711: 1  0AF2	22				RET
 1712: 1				;
 1713: 1				;***************************************************************
 1714: 1				;
 1715: 1  0AF3			HEXSCAN:	; Scan a string to determine if it is a hex number
 1716: 1					; set carry if hex, else carry = 0
 1717: 1				;
 1718: 1				;***************************************************************
 1719: 1				;
 1720: 1  0AF3	71 B5				ACALL	GET_R1_CHARACTER

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 32



 Line  I  Addr  Code            Source

 1721: 1				;
 1722: 1  0AF5	E7		HEXSC1:		MOV	A,@R1				;GET THE CHARACTER
 1723: 1  0AF6	B1 7E				ACALL	DIGIT_CHECK			;SEE IF A DIGIT
 1724: 1  0AF8	40 0E				JC	HS1				;CONTINUE IF A DIGIT
 1725: 1  0AFA	71 0B				ACALL	HEX_CHECK			;SEE IF HEX
 1726: 1  0AFC	40 0A				JC	HS1
 1727: 1				;
 1728: 1  0AFE	C2 E5				CLR	ACC.5				;NO LOWER CASE
 1729: 1  0B00	B4 48 03			CJNE	A,#'H',HEXDON
 1730: 1  0B03	D3				SETB	C
 1731: 1  0B04	80 01				SJMP	HEXDO1				;NUMBER IS VALID HEX, MAYBE
 1732: 1				;
 1733: 1  0B06	C3		HEXDON:		CLR	C
 1734: 1				;
 1735: 1  0B07	22		HEXDO1:		RET
 1736: 1				;
 1737: 1  0B08	09		HS1:		INC	R1				;BUMP TO NEXT CHARACTER
 1738: 1  0B09	80 EA				SJMP	HEXSC1				;LOOP
 1739: 1				;
 1740: 1  0B0B			HEX_CHECK:	;CHECK FOR A VALID ASCII HEX, SET CARRY IF FOUND
 1741: 1				;
 1742: 1  0B0B	C2 E5				CLR	ACC.5				;WASTE LOWER CASE
 1743: 1					CMP	A,#'F'+1			;SEE IF F OR LESS
 1744+ 2  0B0D	B4 47 00	CJNE	A,#'F'+1,$+3
 1745: 1  0B10	40 01				JC	HC1
 1746: 1  0B12	22				RET
 1747: 1				;
 1748: 1  0B13			HC1:		CMP	A,#'A'				;SEE IF A OR GREATER
 1749+ 2  0B13	B4 41 00	CJNE	A,#'A',$+3
 1750: 1  0B16	B3				CPL	C
 1751: 1  0B17	22				RET
 1752: 1				;
 1753: 1				;***************************************************************
 1754: 1				;
 1755: 1  0B18			FLOATING_POINT_INPUT:	; Input a floating point number pointed to by R1
 1756: 1				;
 1757: 1				;***************************************************************
 1758: 1				;
 1759: 1  0B18	51 1F				ACALL	FP_CLEAR			;CLEAR EVERYTHING
 1760: 1  0B1A	71 B5				ACALL	GET_R1_CHARACTER
 1761: 1  0B1C	71 BB				ACALL	PLUS_MINUS_TEST
 1762: 1  0B1E	92 78				MOV	MSIGN,C				;SAVE THE MANTISSA SIGN
 1763: 1				;
 1764: 1				; Now, set up for input loop
 1765: 1				;
 1766: 1  0B20	78 34				MOV	R0,#FP_ACCC
 1767: 1  0B22	7E 7F				MOV	R6,#7FH				;BASE EXPONENT
 1768: 1  0B24	D2 D5				SETB	F0				;SET INITIAL FLAG
 1769: 1				;
 1770: 1  0B26	B1 7C		INLOOP:		ACALL	GET_DIGIT_CHECK
 1771: 1  0B28	50 07				JNC	GTEST				;IF NOT A CHARACTER, WHAT IS IT?
 1772: 1  0B2A	54 0F				ANL	A,#0FH				;STRIP ASCII
 1773: 1  0B2C	71 8E				ACALL	STDIG				;STORE THE DIGITS
 1774: 1				;
 1775: 1  0B2E	09		INLPIK:		INC	R1				;BUMP POINTER FOR LOOP
 1776: 1  0B2F	80 F5				SJMP	INLOOP				;LOOP FOR INPUT

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 33



 Line  I  Addr  Code            Source

 1777: 1				;
 1778: 1  0B31	B4 2E 0C	GTEST:		CJNE	A,#'.',GT1			;SEE IF A RADIX
 1779: 1  0B34	20 51 63			JB	FOUND_RADIX,INERR
 1780: 1  0B37	D2 51				SETB	FOUND_RADIX
 1781: 1  0B39	B8 34 F2			CJNE	R0,#FP_ACCC,INLPIK
 1782: 1  0B3C	D2 52				SETB	FIRST_RADIX			;SET IF FIRST RADIX
 1783: 1  0B3E	80 EE				SJMP	INLPIK				;GET ADDITIONAL DIGITS
 1784: 1				;
 1785: 1  0B40	20 D5 57	GT1:		JB	F0,INERR			;ERROR IF NOT CLEARED
 1786: 1  0B43	B4 65 02			CJNE	A,#'e',GT11			;CHECK FOR LOWER CASE
 1787: 1  0B46	80 03				SJMP	GT12
 1788: 1  0B48	B4 45 33	GT11:		CJNE	A,#'E',FINISH_UP
 1789: 1  0B4B	71 B4		GT12:		ACALL	INC_AND_GET_R1_CHARACTER
 1790: 1  0B4D	71 BB				ACALL	PLUS_MINUS_TEST
 1791: 1  0B4F	92 50				MOV	XSIGN,C				;SAVE SIGN STATUS
 1792: 1  0B51	B1 7C				ACALL	GET_DIGIT_CHECK
 1793: 1  0B53	50 45				JNC	INERR
 1794: 1				;
 1795: 1  0B55	54 0F				ANL	A,#0FH				;STRIP ASCII BIAS OFF THE CHARACTER
 1796: 1  0B57	FD				MOV	R5,A				;SAVE THE CHARACTER IN R5
 1797: 1				;
 1798: 1  0B58	09		GT2:		INC	R1
 1799: 1  0B59	B1 7C				ACALL	GET_DIGIT_CHECK
 1800: 1  0B5B	50 0D				JNC	FINISH1
 1801: 1  0B5D	54 0F				ANL	A,#0FH				;STRIP OFF BIAS
 1802: 1  0B5F	CD				XCH	A,R5				;GET THE LAST DIGIT
 1803: 1  0B60	75 F0 0A			MOV	B,#10				;MULTIPLY BY TEN
 1804: 1  0B63	A4				MUL	AB
 1805: 1  0B64	2D				ADD	A,R5				;ADD TO ORIGINAL VALUE
 1806: 1  0B65	FD				MOV	R5,A				;SAVE IN R5
 1807: 1  0B66	50 F0				JNC	GT2					;LOOP IF NO CARRY
 1808: 1  0B68	7D FF				MOV	R5,#0FFH			;FORCE AN ERROR
 1809: 1				;
 1810: 1  0B6A	ED		FINISH1:	MOV	A,R5				;GET THE SIGN
 1811: 1  0B6B	30 50 09			JNB	XSIGN,POSNUM			;SEE IF EXPONENT IS POS OR NEG
 1812: 1  0B6E	C3				CLR	C
 1813: 1  0B6F	9E				SUBB	A,R6
 1814: 1  0B70	F4				CPL	A
 1815: 1  0B71	04				INC	A
 1816: 1  0B72	40 09				JC	FINISH2
 1817: 1  0B74	74 01				MOV	A,#01H
 1818: 1  0B76	22				RET
 1819: 1				;
 1820: 1  0B77	2E		POSNUM:		ADD	A,R6				;ADD TO EXPONENT
 1821: 1  0B78	50 03				JNC	FINISH2
 1822: 1				;
 1823: 1  0B7A	74 02		POSNM1:		MOV	A,#02H
 1824: 1  0B7C	22				RET
 1825: 1				;
 1826: 1  0B7D	CE		FINISH2:	XCH	A,R6				;SAVE THE EXPONENT
 1827: 1				;
 1828: 1  0B7E			FINISH_UP:
 1829: 1				;
 1830: 1  0B7E	8E 30				MOV	FP_EXP,R6			;SAVE EXPONENT
 1831: 1  0B80	B8 34 02			CJNE	R0,#FP_ACCC,FINISH_UP1
 1832: 1  0B83	51 1F				ACALL	FP_CLEAR			;CLEAR THE MEMORY IF 0

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 34



 Line  I  Addr  Code            Source

 1833: 1  0B85	E5 24		FINISH_UP1:	MOV	A,ARG_STACK			;GET THE ARG STACK
 1834: 1  0B87	C3				CLR	C
 1835: 1  0B88	94 0C				SUBB	A,#FP_NUMBER_SIZE+FP_NUMBER_SIZE
 1836: 1  0B8A	F5 24				MOV	ARG_STACK,A			;ADJUST FOR STORE
 1837: 1  0B8C	21 90				AJMP	PACK
 1838: 1				;
 1839: 1  0B8E	C2 D5		STDIG:		CLR	F0				;CLEAR INITIAL DESIGNATOR
 1840: 1  0B90	70 0B				JNZ	STDIG1				;CONTINUE IF NOT ZERO
 1841: 1  0B92	B8 34 08			CJNE	R0,#FP_ACCC,STDIG1
 1842: 1  0B95	30 52 04			JNB	FIRST_RADIX,RET_X
 1843: 1				;
 1844: 1  0B98	DE 02		DECX:		DJNZ	R6,RET_X
 1845: 1				;
 1846: 1  0B9A	74 FF		INERR:		MOV	A,#0FFH
 1847: 1				;
 1848: 1  0B9C	22		RET_X:		RET
 1849: 1				;
 1850: 1  0B9D	20 53 02	STDIG1:		JB	DONE_LOAD,FRTEST
 1851: 1  0BA0	C2 52				CLR	FIRST_RADIX
 1852: 1				;
 1853: 1  0BA2	20 52 F3	FRTEST:		JB	FIRST_RADIX,DECX
 1854: 1				;
 1855: 1  0BA5	20 51 01	FDTEST:		JB	FOUND_RADIX,FDT1
 1856: 1  0BA8	0E				INC	R6
 1857: 1				;
 1858: 1  0BA9	20 53 F0	FDT1:		JB	DONE_LOAD,RET_X
 1859: 1  0BAC	B8 3D 02			CJNE	R0,#FP_ACC8+1,FDT2
 1860: 1  0BAF	D2 53				SETB	DONE_LOAD
 1861: 1				;
 1862: 1  0BB1	F6		FDT2:		MOV	@R0,A				;SAVE THE STRIPPED ACCUMULATOR
 1863: 1  0BB2	08				INC	R0				;BUMP THE POINTER
 1864: 1  0BB3	22				RET					;EXIT
 1865: 1				;
 1866: 1				;***************************************************************
 1867: 1				;
 1868: 1				; I/O utilities
 1869: 1				;
 1870: 1				;***************************************************************
 1871: 1				;
 1872: 1  0BB4			INC_AND_GET_R1_CHARACTER:
 1873: 1				;
 1874: 1  0BB4	09				INC	R1
 1875: 1				;
 1876: 1  0BB5			GET_R1_CHARACTER:
 1877: 1				;
 1878: 1  0BB5	E7				MOV	A,@R1				;GET THE CHARACTER
 1879: 1  0BB6	B4 20 0C			CJNE	A,#' ',PMT1			;SEE IF A SPACE
 1880: 1				;
 1881: 1				; Kill spaces
 1882: 1				;
 1883: 1  0BB9	80 F9				SJMP	INC_AND_GET_R1_CHARACTER
 1884: 1				;
 1885: 1  0BBB			PLUS_MINUS_TEST:
 1886: 1				;
 1887: 1  0BBB	B4 2B 02			CJNE	A,#'+',PMT0
 1888: 1  0BBE	80 04				SJMP	PMT3

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 35



 Line  I  Addr  Code            Source

 1889: 1  0BC0	B4 2D 02	PMT0:		CJNE	A,#'-',PMT1
 1890: 1				;
 1891: 1  0BC3	D3		PMT2:		SETB	C
 1892: 1				;
 1893: 1  0BC4	09		PMT3:		INC	R1
 1894: 1				;
 1895: 1  0BC5	22		PMT1:		RET
 1896: 1				;
 1897: 1				;***************************************************************
 1898: 1				;
 1899: 1  0BC6			FLOATING_POINT_OUTPUT:	; Output the number, format is in location 25
 1900: 1				;
 1901: 1				; IF FORMAT = 00 - FREE FLOATING
 1902: 1				;           = FX - EXPONENTIAL (X IS THE NUMBER OF SIG DIGITS)
 1903: 1				;           = NX - N = NUM BEFORE RADIX, X = NUM AFTER RADIX
 1904: 1				;                  N + X = 8 MAX
 1905: 1				;
 1906: 1				;***************************************************************
 1907: 1				;
 1908: 1  0BC6	51 D4				ACALL	MDES1				;GET THE NUMBER TO OUTPUT, R0 IS POINTER
 1909: 1  0BC8	11 28				ACALL	POP_AND_EXIT			;OUTPUT POPS THE STACK
 1910: 1  0BCA	EF				MOV	A,R7
 1911: 1  0BCB	FE				MOV	R6,A				;PUT THE EXPONENT IN R6
 1912: 1  0BCC	31 EB				ACALL	UNPACK_R0			;UNPACK THE NUMBER
 1913: 1  0BCE	78 2B				MOV	R0,#FP_NIB1			;POINT AT THE NUMBER
 1914: 1  0BD0	E5 25				MOV	A,FORMAT			;GET THE FORMAT
 1915: 1  0BD2	FB				MOV	R3,A				;SAVE IN CASE OF EXP FORMAT
 1916: 1  0BD3	60 49				JZ	FREE				;FREE FLOATING?
 1917: 1					CMP	A,#0F0H				;SEE IF EXPONENTIAL
 1918+ 2  0BD5	B4 F0 00	CJNE	A,#0F0H,$+3
 1919: 1  0BD8	50 73				JNC	EXPOUT
 1920: 1				;
 1921: 1				; If here, must be integer USING format
 1922: 1				;
 1923: 1  0BDA	EE				MOV	A,R6				;GET THE EXPONENT
 1924: 1  0BDB	70 02				JNZ	FPO1
 1925: 1  0BDD	7E 80				MOV	R6,#80H
 1926: 1  0BDF	EB		FPO1:		MOV	A,R3				;GET THE FORMAT
 1927: 1  0BE0	C4				SWAP	A				;SPLIT INTEGER AND FRACTION
 1928: 1  0BE1	54 0F				ANL	A,#0FH
 1929: 1  0BE3	FA				MOV	R2,A				;SAVE INTEGER
 1930: 1  0BE4	91 B3				ACALL	NUM_LT				;GET THE NUMBER OF INTEGERS
 1931: 1  0BE6	CA				XCH	A,R2				;FLIP FOR SUBB
 1932: 1  0BE7	C3				CLR	C
 1933: 1  0BE8	9A				SUBB	A,R2
 1934: 1  0BE9	FF				MOV	R7,A
 1935: 1  0BEA	50 06				JNC	FPO2
 1936: 1  0BEC	7D 3F				MOV	R5,#'?'				;OUTPUT A QUESTION MARK
 1937: 1  0BEE	91 E8				ACALL	SOUT1				;NUMBER IS TOO LARGE FOR FORMAT
 1938: 1  0BF0	81 1E				AJMP	FREE
 1939: 1  0BF2	BA 00 07	FPO2:		CJNE	R2,#00,USING0			;SEE IF ZERO
 1940: 1  0BF5	1F				DEC	R7
 1941: 1  0BF6	91 D5				ACALL	SS7
 1942: 1  0BF8	91 E2				ACALL	ZOUT				;OUTPUT A ZERO
 1943: 1  0BFA	80 06				SJMP	USING1
 1944: 1				;

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 36



 Line  I  Addr  Code            Source

 1945: 1  0BFC	91 D5		USING0:		ACALL	SS7				;OUTPUT SPACES, IF NEED TO
 1946: 1  0BFE	EA				MOV	A,R2				;OUTPUT DIGITS
 1947: 1  0BFF	FF				MOV	R7,A
 1948: 1  0C00	91 97				ACALL	OUTR0
 1949: 1				;
 1950: 1  0C02	EB		USING1:		MOV	A,R3
 1951: 1  0C03	54 0F				ANL	A,#0FH				;GET THE NUMBER RIGHT OF DP
 1952: 1  0C05	FA				MOV	R2,A				;SAVE IT
 1953: 1  0C06	60 BD				JZ	PMT1				;EXIT IF ZERO
 1954: 1  0C08	91 DE				ACALL	ROUT				;OUTPUT DP
 1955: 1  0C0A	91 BC				ACALL	NUM_RT
 1956: 1  0C0C	B5 02 03			CJNE	A,2,USINGX			;COMPARE A TO R2
 1957: 1				;
 1958: 1  0C0F	EA		USINGY:		MOV	A,R2
 1959: 1  0C10	81 CC				AJMP	Z7R7
 1960: 1				;
 1961: 1  0C12	50 FB		USINGX:		JNC	USINGY
 1962: 1				;
 1963: 1  0C14	CA		USING2:		XCH	A,R2
 1964: 1  0C15	C3				CLR	C
 1965: 1  0C16	9A				SUBB	A,R2
 1966: 1  0C17	CA				XCH	A,R2
 1967: 1  0C18	91 CC				ACALL	Z7R7				;OUTPUT ZEROS IF NEED TO
 1968: 1  0C1A	EA				MOV	A,R2
 1969: 1  0C1B	FF				MOV	R7,A
 1970: 1  0C1C	81 97				AJMP	OUTR0
 1971: 1				;
 1972: 1				; First, force exponential output, if need to
 1973: 1				;
 1974: 1  0C1E	EE		FREE:		MOV	A,R6				;GET THE EXPONENT
 1975: 1  0C1F	70 04				JNZ	FREE1				;IF ZERO, PRINT IT
 1976: 1  0C21	91 E6				ACALL	SOUT
 1977: 1  0C23	81 E2				AJMP	ZOUT
 1978: 1				;
 1979: 1  0C25	7B F0		FREE1:		MOV	R3,#0F0H			;IN CASE EXP NEEDED
 1980: 1  0C27	74 77				MOV	A,#80H-DIGIT-DIGIT-1
 1981: 1  0C29	2E				ADD	A,R6
 1982: 1  0C2A	40 21				JC	EXPOUT
 1983: 1  0C2C	94 F7				SUBB	A,#0F7H
 1984: 1  0C2E	40 1D				JC	EXPOUT
 1985: 1				;
 1986: 1				; Now, just print the number
 1987: 1				;
 1988: 1  0C30	91 D7				ACALL	SINOUT				;PRINT THE SIGN OF THE NUMBER
 1989: 1  0C32	91 B3				ACALL	NUM_LT				;GET THE NUMBER LEFT OF DP
 1990: 1  0C34	B4 08 02			CJNE	A,#8,FREE4
 1991: 1  0C37	81 97				AJMP	OUTR0
 1992: 1				;
 1993: 1  0C39	91 97		FREE4:		ACALL	OUTR0
 1994: 1  0C3B	91 A9				ACALL	ZTEST				;TEST FOR TRAILING ZEROS
 1995: 1  0C3D	60 57				JZ	U_RET				;DONE IF ALL TRAILING ZEROS
 1996: 1  0C3F	91 DE				ACALL	ROUT				;OUTPUT RADIX
 1997: 1				;
 1998: 1  0C41	7F 01		FREE2:		MOV	R7,#1				;OUTPUT ONE DIGIT
 1999: 1  0C43	91 97				ACALL	OUTR0
 2000: 1  0C45	70 4F				JNZ	U_RET

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 37



 Line  I  Addr  Code            Source

 2001: 1  0C47	91 A9				ACALL	ZTEST
 2002: 1  0C49	60 4B				JZ	U_RET
 2003: 1  0C4B	80 F4				SJMP	FREE2				;LOOP
 2004: 1				;
 2005: 1  0C4D	91 D7		EXPOUT:		ACALL	SINOUT				;PRINT THE SIGN
 2006: 1  0C4F	7F 01				MOV	R7,#1				;OUTPUT ONE CHARACTER
 2007: 1  0C51	91 97				ACALL	OUTR0
 2008: 1  0C53	91 DE				ACALL	ROUT				;OUTPUT RADIX
 2009: 1  0C55	EB				MOV	A,R3				;GET FORMAT
 2010: 1  0C56	54 0F				ANL	A,#0FH				;STRIP INDICATOR
 2011: 1  0C58	60 06				JZ	EXPOTX
 2012: 1				;
 2013: 1  0C5A	FF				MOV	R7,A				;OUTPUT THE NUMBER OF DIGITS
 2014: 1  0C5B	1F				DEC	R7				;ADJUST BECAUSE ONE CHAR ALREADY OUT
 2015: 1  0C5C	91 97				ACALL	OUTR0
 2016: 1  0C5E	80 02				SJMP	EXPOT4
 2017: 1				;
 2018: 1  0C60	91 41		EXPOTX:		ACALL	FREE2				;OUTPUT UNTIL TRAILING ZEROS
 2019: 1				;
 2020: 1  0C62	91 E6		EXPOT4:		ACALL	SOUT				;OUTPUT A SPACE
 2021: 1  0C64	7D 45				MOV	R5,#'E'
 2022: 1  0C66	91 E8				ACALL	SOUT1				;OUTPUT AN E
 2023: 1  0C68	EE				MOV	A,R6				;GET THE EXPONENT
 2024: 1  0C69	60 04				JZ	XOUT0				;EXIT IF ZERO
 2025: 1  0C6B	14				DEC	A				;ADJUST FOR THE DIGIT ALREADY OUTPUT
 2026: 1  0C6C	B4 80 05			CJNE	A,#80H,XOUT2			;SEE WHAT IT IS
 2027: 1				;
 2028: 1  0C6F	91 E6		XOUT0:		ACALL	SOUT
 2029: 1  0C71	E4				CLR	A
 2030: 1  0C72	80 0C				SJMP	XOUT4
 2031: 1				;
 2032: 1  0C74	40 06		XOUT2:		JC	XOUT3				;NEGATIVE EXPONENT
 2033: 1  0C76	7D 2B				MOV	R5,#'+'				;OUTPUT A PLUS SIGN
 2034: 1  0C78	91 E8				ACALL	SOUT1
 2035: 1  0C7A	80 04				SJMP	XOUT4
 2036: 1				;
 2037: 1  0C7C	91 DA		XOUT3:		ACALL	MOUT
 2038: 1  0C7E	F4				CPL	A				;FLIP BITS
 2039: 1  0C7F	04				INC	A				;BUMP
 2040: 1				;
 2041: 1  0C80	C2 E7		XOUT4:		CLR	ACC.7
 2042: 1  0C82	F8				MOV	R0,A
 2043: 1  0C83	7A 00				MOV	R2,#0
 2044: 1  0C85	79 27				MOV	R1,#LOW CONVT			;CONVERSION LOCATION
 2045: 1  0C87	7B 00				MOV	R3,#HIGH CONVT
 2046: 1  0C89	B1 0E				ACALL	CONVERT_BINARY_TO_ASCII_STRING
 2047: 1  0C8B	78 27				MOV	R0,#LOW CONVT			;NOW, OUTPUT EXPONENT
 2048: 1				;
 2049: 1  0C8D	E6		EXPOT5:		MOV	A,@R0				;GET THE CHARACTER
 2050: 1  0C8E	FD				MOV	R5,A				;OUTPUT IT
 2051: 1  0C8F	91 E8				ACALL	SOUT1
 2052: 1  0C91	08				INC	R0				;BUMP THE POINTER
 2053: 1  0C92	E8				MOV	A,R0				;GET THE POINTER
 2054: 1  0C93	B5 01 F7			CJNE	A,R1B0,EXPOT5			;LOOP
 2055: 1				;
 2056: 1  0C96	22		U_RET:		RET					;EXIT

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 38



 Line  I  Addr  Code            Source

 2057: 1				;
 2058: 1  0C97			OUTR0:	; Output the characters pointed to by R0, also bias ascii
 2059: 1				;
 2060: 1  0C97	EF				MOV	A,R7				;GET THE COUNTER
 2061: 1  0C98	60 0E				JZ	OUTR				;EXIT IF DONE
 2062: 1  0C9A	E6				MOV	A,@R0				;GET THE NUMBER
 2063: 1  0C9B	44 30				ORL	A,#30H				;ASCII BIAS
 2064: 1  0C9D	08				INC	R0				;BUMP POINTER AND COUNTER
 2065: 1  0C9E	1F				DEC	R7
 2066: 1  0C9F	FD				MOV	R5,A				;PUT CHARACTER IN OUTPUT REGISTER
 2067: 1  0CA0	91 E8				ACALL	SOUT1				;OUTPUT THE CHARACTER
 2068: 1  0CA2	E4				CLR	A				;JUST FOR TEST
 2069: 1  0CA3	B8 33 F1			CJNE	R0,#FP_NIB8+1,OUTR0
 2070: 1  0CA6	74 55				MOV	A,#55H				;KNOW WHERE EXIT OCCURED
 2071: 1				;
 2072: 1  0CA8	22		OUTR:		RET
 2073: 1				;
 2074: 1  0CA9	A9 00		ZTEST:		MOV	R1,R0B0				;GET POINTER REGISTER
 2075: 1				;
 2076: 1  0CAB	E7		ZT0:		MOV	A,@R1				;GET THE VALUE
 2077: 1  0CAC	70 04				JNZ	ZT1
 2078: 1  0CAE	09				INC	R1				;BUMP POINTER
 2079: 1  0CAF	B9 33 F9			CJNE	R1,#FP_NIB8+1,ZT0
 2080: 1				;
 2081: 1  0CB2	22		ZT1:		RET
 2082: 1				;
 2083: 1  0CB3	EE		NUM_LT:		MOV	A,R6				;GET EXPONENT
 2084: 1  0CB4	C3				CLR	C				;GET READY FOR SUBB
 2085: 1  0CB5	94 80				SUBB	A,#80H				;SUB EXPONENT BIAS
 2086: 1  0CB7	50 01				JNC	NL1				;OK IF NO CARRY
 2087: 1  0CB9	E4				CLR	A				;NO DIGITS LEFT
 2088: 1				;
 2089: 1  0CBA	FF		NL1:		MOV	R7,A				;SAVE THE COUNT
 2090: 1  0CBB	22				RET
 2091: 1				;
 2092: 1  0CBC	C3		NUM_RT:		CLR	C				;SUBB AGAIN
 2093: 1  0CBD	74 80				MOV	A,#80H				;EXPONENT BIAS
 2094: 1  0CBF	9E				SUBB	A,R6				;GET THE BIASED EXPONENT
 2095: 1  0CC0	50 01				JNC	NR1
 2096: 1  0CC2	E4				CLR	A
 2097: 1				;
 2098: 1  0CC3	22		NR1:		RET					;EXIT
 2099: 1				;
 2100: 1  0CC4	EF		SPACE7:		MOV	A,R7				;GET THE NUMBER OF SPACES
 2101: 1  0CC5	60 FC				JZ	NR1				;EXIT IF ZERO
 2102: 1  0CC7	91 E6				ACALL	SOUT				;OUTPUT A SPACE
 2103: 1  0CC9	1F				DEC	R7				;BUMP COUNTER
 2104: 1  0CCA	80 F8				SJMP	SPACE7				;LOOP
 2105: 1				;
 2106: 1  0CCC	FF		Z7R7:		MOV	R7,A
 2107: 1				;
 2108: 1  0CCD	EF		ZERO7:		MOV	A,R7				;GET COUNTER
 2109: 1  0CCE	60 F3				JZ	NR1				;EXIT IF ZERO
 2110: 1  0CD0	91 E2				ACALL	ZOUT				;OUTPUT A ZERO
 2111: 1  0CD2	1F				DEC	R7				;BUMP COUNTER
 2112: 1  0CD3	80 F8				SJMP	ZERO7				;LOOP

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 39



 Line  I  Addr  Code            Source

 2113: 1				;
 2114: 1  0CD5	91 C4		SS7:		ACALL	SPACE7
 2115: 1				;
 2116: 1  0CD7	EC		SINOUT:		MOV	A,R4				;GET THE SIGN
 2117: 1  0CD8	60 0C				JZ	SOUT				;OUTPUT A SPACE IF ZERO
 2118: 1				;
 2119: 1  0CDA	7D 2D		MOUT:		MOV	R5,#'-'
 2120: 1  0CDC	80 0A				SJMP	SOUT1				;OUTPUT A MINUS IF NOT
 2121: 1				;
 2122: 1  0CDE	7D 2E		ROUT:		MOV	R5,#'.'				;OUTPUT A RADIX
 2123: 1  0CE0	80 06				SJMP	SOUT1
 2124: 1				;
 2125: 1  0CE2	7D 30		ZOUT:		MOV	R5,#'0'				;OUTPUT A ZERO
 2126: 1  0CE4	80 02				SJMP	SOUT1
 2127: 1				;
 2128: 1  0CE6	7D 20		SOUT:		MOV	R5,#' '				;OUTPUT A SPACE
 2129: 1				;
 2130: 1  0CE8	A1 89		SOUT1:		AJMP	R5OUT
 2131: 1				;
 2132: 1				;
 2133: 1  0CEA	75 F0 0A	MULNUM10:	MOV	B,#10
 2134: 1				;
 2135: 1				;***************************************************************
 2136: 1				;
 2137: 1  0CED			MULNUM:	; Take the next digit in the acc (masked to 0FH)
 2138: 1				; accumulate in R3:R1
 2139: 1				;
 2140: 1				;***************************************************************
 2141: 1				;
 2142: 1  0CED	C0 E0				PUSH	ACC				;SAVE ACC
 2143: 1  0CEF	C0 F0				PUSH	B				;SAVE MULTIPLIER
 2144: 1  0CF1	E9				MOV	A,R1				;PUT LOW ORDER BITS IN ACC
 2145: 1  0CF2	A4				MUL	AB				;DO THE MULTIPLY
 2146: 1  0CF3	F9				MOV	R1,A				;PUT THE RESULT BACK
 2147: 1  0CF4	EB				MOV	A,R3				;GET THE HIGH ORDER BYTE
 2148: 1  0CF5	AB F0				MOV	R3,B				;SAVE THE OVERFLOW
 2149: 1  0CF7	D0 F0				POP	B				;GET THE MULTIPLIER
 2150: 1  0CF9	A4				MUL	AB				;DO IT
 2151: 1  0CFA	A2 D2				MOV	C,OV				;SAVE OVERFLOW IN F0
 2152: 1  0CFC	92 D5				MOV	F0,C
 2153: 1  0CFE	2B				ADD	A,R3				;ADD OVERFLOW TO HIGH RESULT
 2154: 1  0CFF	FB				MOV	R3,A				;PUT IT BACK
 2155: 1  0D00	D0 E0				POP	ACC				;GET THE ORIGINAL ACC BACK
 2156: 1  0D02	72 D5				ORL	C,F0				;OR CARRY AND OVERFLOW
 2157: 1  0D04	40 07				JC	MULX				;NO GOOD IF THE CARRY IS SET
 2158: 1				;
 2159: 1  0D06	54 0F		MUL11:		ANL	A,#0FH				;MASK OFF HIGH ORDER BITS
 2160: 1  0D08	29				ADD	A,R1				;NOW ADD THE ACC
 2161: 1  0D09	F9				MOV	R1,A				;PUT IT BACK
 2162: 1  0D0A	E4				CLR	A				;PROPAGATE THE CARRY
 2163: 1  0D0B	3B				ADDC	A,R3
 2164: 1  0D0C	FB				MOV	R3,A				;PUT IT BACK
 2165: 1				;
 2166: 1  0D0D	22		MULX:		RET					;EXIT WITH OR WITHOUT CARRY
 2167: 1				;
 2168: 1				;***************************************************************

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 40



 Line  I  Addr  Code            Source

 2169: 1				;
 2170: 1  0D0E			CONVERT_BINARY_TO_ASCII_STRING:
 2171: 1				;
 2172: 1				;R1 contains the address of the string
 2173: 1				;R0 contains the value to convert
 2174: 1				;DPTR, R7, R6, and ACC gets clobbered
 2175: 1				;
 2176: 1				;***************************************************************
 2177: 1				;
 2178: 1  0D0E	E4				CLR	A				;NO LEADING ZEROS
 2179: 1  0D0F	90 27 10			MOV	DPTR,#10000			;SUBTRACT 10000
 2180: 1  0D12	B1 2B				ACALL	RSUB				;DO THE SUBTRACTION
 2181: 1  0D14	90 03 E8			MOV	DPTR,#1000			;NOW 1000
 2182: 1  0D17	B1 2B				ACALL	RSUB
 2183: 1  0D19	90 00 64			MOV	DPTR,#100			;NOW 100
 2184: 1  0D1C	B1 2B				ACALL	RSUB
 2185: 1  0D1E	90 00 0A			MOV	DPTR,#10			;NOW 10
 2186: 1  0D21	B1 2B				ACALL	RSUB
 2187: 1  0D23	90 00 01			MOV	DPTR,#1				;NOW 1
 2188: 1  0D26	B1 2B				ACALL	RSUB
 2189: 1  0D28	60 20				JZ	RSUB2				;JUMP OVER RET
 2190: 1				;
 2191: 1  0D2A	22		RSUB_R:		RET
 2192: 1				;
 2193: 1  0D2B	7E FF		RSUB:		MOV	R6,#-1				;SET UP THE COUNTER
 2194: 1				;
 2195: 1  0D2D	0E		RSUB1:		INC	R6				;BUMP THE COUNTER
 2196: 1  0D2E	CA				XCH	A,R2				;DO A FAST COMPARE
 2197: 1					CMP	A,DPH
 2198+ 2  0D2F	B5 83 00	CJNE	A,DPH,$+3
 2199: 1  0D32	CA				XCH	A,R2
 2200: 1  0D33	40 12				JC	FAST_DONE
 2201: 1  0D35	C8				XCH	A,R0				;GET LOW BYTE
 2202: 1  0D36	95 82				SUBB	A,DPL				;SUBTRACT, CARRY IS CLEARED
 2203: 1  0D38	C8				XCH	A,R0				;PUT IT BACK
 2204: 1  0D39	CA				XCH	A,R2				;GET THE HIGH BYTE
 2205: 1  0D3A	95 83				SUBB	A,DPH				;ADD THE HIGH BYTE
 2206: 1  0D3C	CA				XCH	A,R2				;PUT IT BACK
 2207: 1  0D3D	50 EE				JNC	RSUB1				;LOOP UNTIL CARRY
 2208: 1				;
 2209: 1  0D3F	C8				XCH	A,R0
 2210: 1  0D40	25 82				ADD	A,DPL				;RESTORE R0
 2211: 1  0D42	C8				XCH	A,R0
 2212: 1  0D43	CA				XCH	A,R2
 2213: 1  0D44	35 83				ADDC	A,DPH
 2214: 1  0D46	CA				XCH	A,R2
 2215: 1				;
 2216: 1  0D47			FAST_DONE:
 2217: 1				;
 2218: 1  0D47	4E				ORL	A,R6				;OR THE COUNT VALUE
 2219: 1  0D48	60 E0				JZ	RSUB_R				;RETURN IF ZERO
 2220: 1				;
 2221: 1  0D4A	74 30		RSUB2:		MOV	A,#'0'				;GET THE ASCII BIAS
 2222: 1  0D4C	2E				ADD	A,R6				;ADD THE COUNT
 2223: 1				;
 2224: 1  0D4D	F7		RSUB4:		MOV	@R1,A				;PLACE THE VALUE IN MEMORY

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 41



 Line  I  Addr  Code            Source

 2225: 1  0D4E	09				INC	R1
 2226: 1				;
 2227: 1  0D4F	22				RET					;EXIT
 2228: 1				;
 2229: 1				;***************************************************************
 2230: 1				;
 2231: 1  0D50			HEXOUT:	; Output the hex number in R3:R1, supress leading zeros, if set
 2232: 1				;
 2233: 1				;***************************************************************
 2234: 1				;
 2235: 1  0D50	91 E6				ACALL	SOUT				;OUTPUT A SPACE
 2236: 1  0D52	A2 36				MOV	C,ZSURP				;GET ZERO SUPPRESSION BIT
 2237: 1  0D54	92 33				MOV	ADD_IN,C
 2238: 1  0D56	EB				MOV	A,R3				;GET HIGH NIBBLE AND PRINT IT
 2239: 1  0D57	B1 73				ACALL	HOUTHI
 2240: 1  0D59	EB				MOV	A,R3
 2241: 1  0D5A	B1 74				ACALL	HOUTLO
 2242: 1				;
 2243: 1  0D5C	C2 33		HEX2X:		CLR	ADD_IN				;DON'T SUPPRESS ZEROS
 2244: 1  0D5E	E9				MOV	A,R1				;GET LOW NIBBLE AND PRINT IT
 2245: 1  0D5F	B1 73				ACALL	HOUTHI
 2246: 1  0D61	E9				MOV	A,R1
 2247: 1  0D62	B1 74				ACALL	HOUTLO
 2248: 1  0D64	7D 48				MOV	R5,#'H'				;OUTPUT H TO INDICATE HEX MODE
 2249: 1				;
 2250: 1  0D66	81 E8		SOUT_1:		AJMP	SOUT1
 2251: 1				;
 2252: 1  0D68	C2 33		HOUT1:		CLR	ADD_IN				;PRINTED SOMETHING, SO CLEAR ADD_IN
 2253: 1  0D6A	24 90				ADD	A,#90H				;CONVERT TO ASCII
 2254: 1  0D6C	D4				DA	A
 2255: 1  0D6D	34 40				ADDC	A,#40H
 2256: 1  0D6F	D4				DA	A				;GOT IT HERE
 2257: 1  0D70	FD				MOV	R5,A				;OUTPUT THE BYTE
 2258: 1  0D71	80 F3				SJMP	SOUT_1
 2259: 1				;
 2260: 1  0D73	C4		HOUTHI:		SWAP	A				;SWAP TO OUTPUT HIGH NIBBLE
 2261: 1				;
 2262: 1  0D74	54 0F		HOUTLO:		ANL	A,#0FH				;STRIP
 2263: 1  0D76	70 F0				JNZ	HOUT1				;PRINT IF NOT ZERO
 2264: 1  0D78	30 33 ED			JNB	ADD_IN,HOUT1			;OUTPUT A ZERO IF NOT SUPRESSED
 2265: 1  0D7B	22				RET
 2266: 1				;
 2267: 1				;
 2268: 1  0D7C			GET_DIGIT_CHECK:	; Get a character, then check for digit
 2269: 1				;
 2270: 1  0D7C	71 B5				ACALL	GET_R1_CHARACTER
 2271: 1				;
 2272: 1  0D7E			DIGIT_CHECK:	;CHECK FOR A VALID ASCII DIGIT, SET CARRY IF FOUND
 2273: 1				;
 2274: 1					CMP	A,#'9'+1			;SEE IF ASCII 9 OR LESS
 2275+ 2  0D7E	B4 3A 00	CJNE	A,#'9'+1,$+3
 2276: 1  0D81	40 01				JC	DC1
 2277: 1  0D83	22				RET
 2278: 1				;
 2279: 1  0D84			DC1:		CMP	A,#'0'				;SEE IF ASCII 0 OR GREATER
 2280+ 2  0D84	B4 30 00	CJNE	A,#'0',$+3

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 42



 Line  I  Addr  Code            Source

 2281: 1  0D87	B3				CPL	C
 2282: 1  0D88	22				RET
 2283: 1				;
 2284: 1
 2285: 1  0D89	C0 E0		R5OUT:		PUSH	ACC				; ME
 2286: 1  0D8B	C0 00				PUSH	00H
 2287: 1  0D8D	A8 50				MOV	R0,FPCHR_OUT
 2288: 1  0D8F	ED				MOV	A,R5				; ME
 2289: 1  0D90	F6				MOV	@R0,A
 2290: 1  0D91	05 50				INC	FPCHR_OUT
 2291: 1  0D93	D0 00				POP	00H
 2292: 1  0D95	D0 E0				POP	ACC				; ME
 2293: 1  0D97	22				RET
 2294: 1
 2295: 1  0D98	01 0E		SQ_ERR:		JMP	BADPRM				; me
 2296: 1
 2297: 1			; Pop the ARG STACK and check for overflow
 2298: 1  0D9A			INC_ASTKA:
 2299: 1  0D9A	74 06				MOV	A,#FP_NUMBER_SIZE		;number to pop
 2300: 1  0D9C	80 16				SJMP	SETREG1
 2301: 1
 2302: 1			;Push ARG STACK and check for underflow
 2303: 1  0D9E			DEC_ASTKA:
 2304: 1  0D9E	74 FA				MOV	A,#-FP_NUMBER_SIZE
 2305: 1  0DA0	25 24				ADD	A,ARG_STACK
 2306: 1					CMP	A,#0
 2307+ 2  0DA2	B4 00 00	CJNE	A,#0,$+3
 2308: 1  0DA5	40 28				JC	E4YY
 2309: 1  0DA7	F5 24				MOV	ARG_STACK,A
 2310: 1  0DA9	F9				MOV	R1,A
 2311: 1  0DAA	22		SRT:		RET
 2312: 1
 2313: 1  0DAB	B1 9A		POPAS:		ACALL	INC_ASTKA
 2314: 1  0DAD	A1 C6				AJMP	VARCOP				;COPY THE VARIABLE
 2315: 1
 2316: 1  0DAF	B1 9E		PUSHAS:		ACALL	DEC_ASTKA
 2317: 1  0DB1	A1 C6				AJMP	VARCOP
 2318: 1
 2319: 1  0DB3	E4		SETREG:		CLR	A				;DON'T POP ANYTHING
 2320: 1  0DB4	A8 24		SETREG1:	MOV	R0,ARG_STACK
 2321: 1  0DB6	28				ADD	A,R0
 2322: 1  0DB7	40 16				JC	E4YY
 2323: 1  0DB9	F5 24				MOV	ARG_STACK,A
 2324: 1  0DBB	E6				MOV	A,@R0
 2325: 1  0DBC	22		A_D:		RET
 2326: 1
 2327: 1			;Routine to copy bottom arg on stack to address in R1.
 2328: 1  0DBD	B1 B3		MOVAS:  	ACALL   SETREG				;SET UP R0
 2329: 1  0DBF	E6		M_C:		MOV	A,@R0				;READ THE VALUE
 2330: 1  0DC0	F7				MOV	@R1,A				;SAVE IT
 2331: 1  0DC1	08		        	INC     R0
 2332: 1  0DC2	09		        	INC     R1
 2333: 1  0DC3	DC FA		        	DJNZ    R4,M_C  	        	;LOOP
 2334: 1  0DC5	22				RET					;EXIT
 2335: 1
 2336: 1

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 43



 Line  I  Addr  Code            Source

 2337: 1			; VARCOP - Copy a variable from R0 to R1
 2338: 1  0DC6	7C 06		VARCOP:		MOV	R4,#FP_NUMBER_SIZE		;LOAD THE LOOP COUNTER
 2339: 1  0DC8	E6		V_C:		MOV	A,@R0				;READ THE VALUE
 2340: 1  0DC9	F7				MOV	@R1,A				;SAVE IT
 2341: 1  0DCA	18				DEC	R0
 2342: 1  0DCB	19				DEC	R1
 2343: 1  0DCC	DC FA				DJNZ	R4,V_C				;LOOP
 2344: 1  0DCE	22				RET					;EXIT
 2345: 1			;
 2346: 1  0DCF	90 0E 02	E4YY:		MOV	DPTR,#EXA
 2347: 1  0DD2	01 0D				JMP	PRTERR				; me
 2348: 1
 2349: 1				; integer operator - INT
 2350: 1  0DD4	B1 B3		AINT:		ACALL	SETREG				;SET UP THE REGISTERS, CLEAR CARRY
 2351: 1  0DD6	94 81				SUBB	A,#129				;SUBTRACT EXPONENT BIAS
 2352: 1  0DD8	50 07				JNC	AI1				;JUMP IF ACC > 81H
 2353: 1				;
 2354: 1				; Force the number to be a zero
 2355: 1				;
 2356: 1  0DDA	B1 9A				ACALL	INC_ASTKA			;BUMP THE STACK
 2357: 1				;
 2358: 1  0DDC	90 0E 0A	P_Z:		MOV	DPTR,#ZRO			;PUT ZERO ON THE STACK
 2359: 1  0DDF	A1 F6				AJMP	PUSHC
 2360: 1				;
 2361: 1  0DE1	94 07		AI1:		SUBB	A,#7
 2362: 1  0DE3	50 10				JNC	AI3
 2363: 1  0DE5	F4				CPL	A
 2364: 1  0DE6	04				INC	A
 2365: 1  0DE7	FB				MOV	R3,A
 2366: 1  0DE8	18				DEC	R0				;POINT AT SIGN
 2367: 1				;
 2368: 1  0DE9	18		AI2:		DEC	R0				;NOW AT LSB'S
 2369: 1  0DEA	E6				MOV	A,@R0				;READ BYTE
 2370: 1  0DEB	54 F0				ANL	A,#0F0H				;STRIP NIBBLE
 2371: 1  0DED	F6				MOV	@R0,A				;WRITE BYTE
 2372: 1  0DEE	DB 01				DJNZ	R3,AI21
 2373: 1  0DF0	22				RET
 2374: 1  0DF1	E4		AI21:		CLR	A
 2375: 1  0DF2	F6				MOV	@R0,A				;CLEAR THE LOCATION
 2376: 1  0DF3	DB F4				DJNZ	R3,AI2
 2377: 1  0DF5	22		AI3:		RET					;EXIT
 2378: 1				;
 2379: 1				; PUSHC - Push constant pointed by DPTR on to the arg stack
 2380: 1  0DF6	B1 9E		PUSHC:		ACALL	DEC_ASTKA
 2381: 1  0DF8	7B 06				MOV	R3,#FP_number_SIZe		;LOOP COUNTER
 2382: 1  0DFA	E4		PCL:		CLR	A				;SET UP A
 2383: 1  0DFB	93				MOVC	A,@A+DPTR			;LOAD IT
 2384: 1  0DFC	F7				MOV	@R1,A				;SAVE IT
 2385: 1  0DFD	A3				INC	DPTR				;BUMP POINTERS
 2386: 1  0DFE	19				DEC	R1
 2387: 1  0DFF	DB F9				DJNZ	R3,PCL				;LOOP
 2388: 1  0E01	22					RET				;EXIT
 2389: 1			;
 2390: 1
 2391: 1  0E02	41 2D 53 54	EXA:		DB	'A-STACK',0
       1  0E06	41 43 4B 00

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 44



 Line  I  Addr  Code            Source

 2392: 1  0E0A	00 00 00	ZRO:		DB	00h,00h,00h
 2393: 1  0E0D	00 00 00			DB	00h,00h,00h			;0.0000000
 2394: 1  0E10	81 00 00	FPONE:		DB 	81h,00h,00h
 2395: 1  0E13	00 00 10			DB	00h,00h,10h			;1.0000000
 2396: 1  0E16	81 00 00	FPTWO:		DB 	81h,00h,00h
 2397: 1  0E19	00 00 20			DB	00h,00h,20h			;2.0000000
 2398: 1  0E1C	81 00 27	FPPI:		DB	81h,00h,27h
 2399: 1  0E1F	59 41 31			DB	59h,41h,31h			;3.1415927
 2400: 1  0E22	78 00 00	FPCCAL:		DB	78h,00h,00h
 2401: 1  0E25	00 00 10			DB	00h,00h,10h			;1nF=1e-9
 2402: 1  0E28	8D 00 00	FPP:		DB	8Dh,00h,00h
 2403: 1  0E2B	00 00 10			DB	00h,00h,10h			;1e12
 2404: 1  0E2E	8A 00 00	FPN:		DB	8Ah,00h,00h
 2405: 1  0E31	00 00 10			DB	00h,00h,10h			;1e9
 2406: 1  0E34	87 00 00	FPU:		DB	87h,00h,00h
 2407: 1  0E37	00 00 10			DB	00h,00h,10h			;1e6
 2408: 1  0E3A	84 00 00	FPM:		DB	84h,00h,00h
 2409: 1  0E3D	00 00 10			DB	00h,00h,10h			;1e3
 2410:
 2411:	  0E40	43 61 6C 69	MODE0:		DB	'Cali'
 2412:	  0E44	62 72 61 74			DB	'brat'
 2413:	  0E48	65 00				DB	'e',0
 2414:	  0E4A	43 20 4D 65	MODE1:		DB	'C Me'
 2415:	  0E4E	74 65 72 00			DB	'ter',0
 2416:	  0E52	4C 20 4D 65	MODE2:		DB 	'L Me'
 2417:	  0E56	74 65 72 00			DB	'ter',0
 2418:	  0E5A	46 72 71 20	MODE3:		DB	'Frq '
 2419:	  0E5E	43 6F 75 6E			DB	'Coun'
 2420:	  0E62	74 00				DB	't',0
 2421:	  0E64	46 72 71 20	MODE4:		DB	'Frq '
 2422:	  0E68	43 6F 75 6E			DB	'Coun'
 2423:	  0E6C	74 20 31 47			DB	't 1G'
 2424:	  0E70	48 7A 00			DB	'Hz',0
 2425:	  0E73	57 65 6C 63	WELCOME:	DB	'Welc'
 2426:	  0E77	6F 6D 65 20			DB	'ome '
 2427:	  0E7B	4B 65 74 69			DB	'Keti'
 2428:	  0E7F	6C 00				DB	'l',0
 2429:
 2430:						END
 2431:





                     register banks used:  ---

                     no errors




ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 45





	       L I S T   O F   S Y M B O L S
	       =============================


SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
??ASEM_51			  NUMBER    8051
??VERSION			  NUMBER    0130
AC				  BIT	      D6
ACC				  DATA	      E0
ADDIT				  CODE	    0320	 488
ADDLP				  CODE	    0878	1039
ADD_IN				  BIT	      33	  14
ADD_R				  CODE	    0876	1037
AI1				  CODE	    0DE1	2361
AI2				  CODE	    0DE9	2368
AI21				  CODE	    0DF1	2374
AI3				  CODE	    0DF5	2377
AINT				  CODE	    0DD4	2350
ARG1_EXP_GT			  CODE	    08DD	1142
ARG1_EXP_GT1			  CODE	    08DE	1145
ARG1_EXP_GT2			  CODE	    08E1	1147
ARG_STACK			  NUMBER    0024	  11
A_D				  CODE	    0DBC	2325
B				  DATA	      F0
BADPRM				  CODE	    080E	 932
BIN2DEC				  CODE	    02DE	 437
BIN2DEC1			  CODE	    02E5	 440
BIN2DEC2			  CODE	    02E7	 441
BIN2DEC3			  CODE	    02FB	 456
BIN2DEC4			  CODE	    0304	 461
BINDEC				  CODE	    0334	 506
BOTH_PLUS			  CODE	    08E5	1155
CLOOP				  CODE	    08ED	1167
CMETER				  CODE	    01FF	 319
CMETER1				  CODE	    0227	 342
CMETER2				  CODE	    023B	 350
CMP				  MACRO	        	 889
CONVERT_BINARY_TO_ASCII_STRING	  CODE	    0D0E	2170
CONVT				  NUMBER    0027	  16
CY				  BIT	      D7
DC1				  CODE	    0D84	2279
DEBOUNCEINT0			  CODE	    0088	 105
DEBOUNCEINT01			  CODE	    008C	 107
DEBUG				  NUMBER    0000	   2
DECX				  CODE	    0B98	1844
DEC_ASTKA			  CODE	    0D9E	2303
DIGIT				  NUMBER    0004	  25
DIGIT_CHECK			  CODE	    0D7E	2272
DIV0				  CODE	    093C	1261
DIV3				  CODE	    0949	1270
DIV4				  CODE	    0956	1278
DIV5				  CODE	    0959	1281
DIV6				  CODE	    0961	1286
DIV7				  CODE	    0978	1308
DIV8				  CODE	    098D	1321

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 46



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
DONE_LOAD			  BIT	      53	  55
DPH				  DATA	      83
DPL				  DATA	      82
D_UNDER				  CODE	    0947	1268
E4YY				  CODE	    0DCF	2346
EA				  BIT	      AF
ES				  BIT	      AC
ET0				  BIT	      A9
ET1				  BIT	      AB
EX0				  BIT	      A8
EX1				  BIT	      AA
EXA				  CODE	    0E02	2391
EXPONENTS_EQUAL			  CODE	    08E2	1149
EXPOT4				  CODE	    0C62	2020
EXPOT5				  CODE	    0C8D	2049
EXPOTX				  CODE	    0C60	2018
EXPOUT				  CODE	    0C4D	2005
EXTI0				  CODE	    0003
EXTI1				  CODE	    0013
F0				  BIT	      D5
FAST_DONE			  CODE	    0D47	2216
FDT1				  CODE	    0BA9	1858
FDT2				  CODE	    0BB1	1862
FDTEST				  CODE	    0BA5	1855
FINISH1				  CODE	    0B6A	1810
FINISH2				  CODE	    0B7D	1826
FINISH_UP			  CODE	    0B7E	1828
FINISH_UP1			  CODE	    0B85	1833
FIRST_RADIX			  BIT	      52	  54
FLOATING_ADD			  CODE	    0816	 946
FLOATING_COMP			  CODE	    08C9	1116
FLOATING_DIV			  CODE	    092F	1246
FLOATING_INIT			  CODE	    0800	 921
FLOATING_MUL			  CODE	    08FA	1183
FLOATING_POINT_INPUT		  CODE	    0B18	1755
FLOATING_POINT_OUTPUT		  CODE	    0BC6	1899
FLOATING_SUB			  CODE	    080F	 936
FMUL0				  CODE	    08FF	1192
FMUL1				  CODE	    0901	1196
FMUL2				  CODE	    0913	1212
FMUL3				  CODE	    091C	1227
FMUL_OVER			  CODE	    090F	1206
FORMAT				  NUMBER    0025	  12
FOUND_RADIX			  BIT	      51	  53
FOV				  CODE	    0911	1210
FPC1				  CODE	    0A22	1494
FPCCAL				  CODE	    0E22	2400
FPCHR_OUT			  NUMBER    0050	  77
FPM				  CODE	    0E3A	2408
FPN				  CODE	    0E2E	2404
FPO1				  CODE	    0BDF	1926
FPO2				  CODE	    0BF2	1939
FPONE				  CODE	    0E10	2394
FPP				  CODE	    0E28	2402
FPPI				  CODE	    0E1C	2398
FPSTACK				  NUMBER    00FF	  86

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 47



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
FPTWO				  CODE	    0E16	2396
FPU				  CODE	    0E34	2406
FP_ACC1				  NUMBER    0035	  66
FP_ACC2				  NUMBER    0036	  67
FP_ACC3				  NUMBER    0037	  68
FP_ACC4				  NUMBER    0038	  69
FP_ACC5				  NUMBER    0039	  70
FP_ACC6				  NUMBER    003A	  71
FP_ACC7				  NUMBER    003B	  72
FP_ACC8				  NUMBER    003C	  73
FP_ACCC				  NUMBER    0034	  65
FP_ACCS				  NUMBER    003D	  74
FP_ACCX				  NUMBER    0033	  64
FP_CARRY			  NUMBER    002A	  44
FP_CLEAR			  CODE	    0A1F	1485
FP_DIG12			  NUMBER    002B	  45
FP_DIG34			  NUMBER    002C	  46
FP_DIG56			  NUMBER    002D	  47
FP_DIG78			  NUMBER    002E	  48
FP_EXP				  NUMBER    0030	  50
FP_NIB1				  NUMBER    002B	  56
FP_NIB2				  NUMBER    002C	  57
FP_NIB3				  NUMBER    002D	  58
FP_NIB4				  NUMBER    002E	  59
FP_NIB5				  NUMBER    002F	  60
FP_NIB6				  NUMBER    0030	  61
FP_NIB7				  NUMBER    0031	  62
FP_NIB8				  NUMBER    0032	  63
FP_NUMBER_SIZE			  NUMBER    0006	  24
FP_SIGN				  NUMBER    002F	  49
FP_STATUS			  NUMBER    0028	  42
FP_TEMP				  NUMBER    0029	  43
FREE				  CODE	    0C1E	1974
FREE1				  CODE	    0C25	1979
FREE2				  CODE	    0C41	1998
FREE4				  CODE	    0C39	1993
FREQUENCY			  CODE	    0106	 174
FREQUENCY1GHZ			  CODE	    0120	 189
FRQCOUNT			  CODE	    03AB	 602
FRQCOUNT1			  CODE	    03E2	 630
FRQCOUNT2			  CODE	    03E8	 633
FRQFORMAT			  CODE	    03F7	 651
FRQFORMATDONE			  CODE	    0452	 699
FRQFORMATHZ			  CODE	    0440	 688
FRQFORMATHZ1			  CODE	    0443	 691
FRQFORMATKHZ			  CODE	    0422	 672
FRQFORMATKHZ1			  CODE	    0429	 676
FRQFORMATKHZ2			  CODE	    0430	 680
FRQFORMATMHZ1			  CODE	    040B	 660
FRQFORMATMHZ2			  CODE	    0412	 664
FRTEST				  CODE	    0BA2	1853
FSUB10				  CODE	    08C7	1112
FSUB5				  CODE	    0896	1071
FSUB6				  CODE	    08A1	1082
FSUB7				  CODE	    08A5	1085
FSUB8				  CODE	    08B0	1093

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 48



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
FSUB9				  CODE	    08B6	1100
GET_DIGIT_CHECK			  CODE	    0D7C	2268
GET_R1_CHARACTER		  CODE	    0BB5	1876
GT1				  CODE	    0B40	1785
GT11				  CODE	    0B48	1788
GT12				  CODE	    0B4B	1789
GT2				  CODE	    0B58	1798
GTEST				  CODE	    0B31	1778
HC1				  CODE	    0B13	1748
HEX2X				  CODE	    0D5C	2243
HEXDO1				  CODE	    0B07	1735
HEXDON				  CODE	    0B06	1733
HEXOUT				  CODE	    0D50	2231
HEXSC1				  CODE	    0AF5	1722
HEXSCAN				  CODE	    0AF3	1715
HEX_CHECK			  CODE	    0B0B	1740
HOUT1				  CODE	    0D68	2252
HOUTHI				  CODE	    0D73	2260
HOUTLO				  CODE	    0D74	2262
HS1				  CODE	    0B08	1737
IE				  DATA	      A8
IE0				  BIT	      89
IE0IRQ				  CODE	    0080	 100
IE1				  BIT	      8B
INC_AND_GET_R1_CHARACTER	  CODE	    0BB4	1872
INC_ASTKA			  CODE	    0D9A	2298
INC_FP_EXP			  CODE	    09DF	1408
INERR				  CODE	    0B9A	1846
INLOOP				  CODE	    0B26	1770
INLPIK				  CODE	    0B2E	1775
INT0				  BIT	      B2
INT1				  BIT	      B3
INTGRC				  BIT	      31	  13
INTMUL10			  CODE	    035C	 520
INTMUL2				  CODE	    0374	 542
IP				  DATA	      B8
IT0				  BIT	      88
IT1				  BIT	      8A
LCCA				  NUMBER    007D	  82
LCCALC				  CODE	    016C	 242
LCCB				  NUMBER    0085	  83
LCCT				  NUMBER    008D	  84
LCDCHROUT			  CODE	    0473	 735
LCDCLEAR			  CODE	    0487	 751
LCDCLEAR1			  CODE	    048D	 754
LCDCLEARLINE			  CODE	    04C1	 804
LCDCLEARLINE1			  CODE	    04C7	 807
LCDCMDOUT			  CODE	    0463	 724
LCDDELAY			  CODE	    0453	 711
LCDINIT				  CODE	    04A8	 790
LCDLINE				  NUMBER    0040	  76
LCDNIBOUT			  CODE	    045C	 718
LCDPRINTSTR			  CODE	    0497	 763
LCDSETADR			  CODE	    0492	 759
LCF1				  NUMBER    0065	  79
LCF2				  NUMBER    006D	  80

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 49



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
LCF3				  NUMBER    0075	  81
LCMETERGETFRQ			  CODE	    0140	 212
LCMETERGETFRQ1			  CODE	    0158	 224
LCMETERINIT			  CODE	    018B	 260
LCMETERINIT1			  CODE	    0191	 263
LEFT				  CODE	    0A60	1554
LEFT1				  CODE	    0A62	1560
LEFT3				  CODE	    0A6A	1566
LEFT5				  CODE	    0A89	1593
LEFTL				  CODE	    0A75	1575
LMETER				  CODE	    026A	 376
LMETER1				  CODE	    0289	 395
LMETER2				  CODE	    0291	 400
LMETER3				  CODE	    02AF	 411
LOAD1				  CODE	    0830	 982
LOAD2				  CODE	    0840	 994
LOAD3				  CODE	    0848	1001
LOAD4				  CODE	    0851	1011
LOAD5				  CODE	    0863	1025
LOAD7				  CODE	    0A00	1440
LOADR1				  CODE	    0AE9	1704
LOADR1_MANTISSA			  CODE	    0AE5	1695
LOAD_POINTERS			  CODE	    0ACB	1651
MCUSTACK			  NUMBER    0090	  85
MDES1				  CODE	    0AD4	1672
MNL0				  CODE	    0AAB	1625
MNL1				  CODE	    0ABD	1637
MNLOOP				  CODE	    0AA2	1617
MODE				  NUMBER    0051	  78
MODE0				  CODE	    0E40	2411
MODE1				  CODE	    0E4A	2414
MODE2				  CODE	    0E52	2416
MODE3				  CODE	    0E5A	2418
MODE4				  CODE	    0E64	2421
MODEMAX				  NUMBER    0004	  88
MOUT				  CODE	    0CDA	2119
MOVAS				  CODE	    0DBD	2328
MSIGN				  BIT	      78	  51
MUL11				  CODE	    0D06	2159
MULNUM				  CODE	    0CED	2137
MULNUM10			  CODE	    0CEA	2133
MULX				  CODE	    0D0D	2166
MUL_DIV_EXP_AND_SIGN		  CODE	    0AD2	1663
MUL_NIBBLE			  CODE	    0A98	1603
M_C				  CODE	    0DBF	2329
NL1				  CODE	    0CBA	2089
NR1				  CODE	    0CC3	2098
NUM_LT				  CODE	    0CB3	2083
NUM_RT				  CODE	    0CBC	2092
OUTR				  CODE	    0CA8	2072
OUTR0				  CODE	    0C97	2058
OV				  BIT	      D2
OVE1				  CODE	    0A05	1451
OVERFLOW			  NUMBER    0001	  29
OVERFLOW_AND_EXIT		  CODE	    0A01	1444
P				  BIT	      D0

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 50



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
P0				  DATA	      80
P1				  DATA	      90
P2				  DATA	      A0
P3				  DATA	      B0
PACK				  CODE	    0990	1325
PACK0				  CODE	    0999	1338
PACK1				  CODE	    099A	1340
PACK2				  CODE	    09A4	1348
PACK3				  CODE	    09B6	1362
PACK4				  CODE	    09BC	1369
PCL				  CODE	    0DFA	2382
PCON				  DATA	      87
PLOOP				  CODE	    09BE	1373
PLUS_MINUS_TEST			  CODE	    0BBB	1885
PMT0				  CODE	    0BC0	1889
PMT1				  CODE	    0BC5	1895
PMT2				  CODE	    0BC3	1891
PMT3				  CODE	    0BC4	1893
POPAS				  CODE	    0DAB	2313
POP_AND_EXIT			  CODE	    0828	 973
POSNM1				  CODE	    0B7A	1823
POSNUM				  CODE	    0B77	1820
PRET				  CODE	    09DE	1406
PRNTCDPTRLCD			  CODE	    049E	 775
PRNTCDPTRLCD1			  CODE	    04A7	 781
PRTERR				  CODE	    080D	 931
PS				  BIT	      BC
PSW				  DATA	      D0
PT0				  BIT	      B9
PT1				  BIT	      BB
PUSHAS				  CODE	    0DAF	2316
PUSHC				  CODE	    0DF6	2380
PX0				  BIT	      B8
PX1				  BIT	      BA
P_Z				  CODE	    0DDC	2358
R0B0				  NUMBER    0000	  26
R1B0				  NUMBER    0001	  27
R5OUT				  CODE	    0D89	2285
RB8				  BIT	      9A
RD				  BIT	      B7
REN				  BIT	      9C
RESET				  CODE	    0000
RET_X				  CODE	    0B9C	1848
RI				  BIT	      98
RIGHT				  CODE	    0A28	1501
RIGHT1				  CODE	    0A2A	1508
RIGHT3				  CODE	    0A32	1516
RIGHT5				  CODE	    0A51	1542
RIGHTL				  CODE	    0A3E	1526
ROUT				  CODE	    0CDE	2122
RS0				  BIT	      D3
RS1				  BIT	      D4
RSUB				  CODE	    0D2B	2193
RSUB1				  CODE	    0D2D	2195
RSUB2				  CODE	    0D4A	2221
RSUB4				  CODE	    0D4D	2224

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 51



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
RSUB_R				  CODE	    0D2A	2191
RXD				  BIT	      B0
SBUF				  DATA	      99
SCON				  DATA	      98
SE1				  CODE	    0822	 967
SETMODE				  CODE	    0096	 113
SETMODE1			  CODE	    009C	 116
SETMODE2			  CODE	    00A7	 121
SETMODE3			  CODE	    00AC	 123
SETMODE4			  CODE	    00B1	 125
SETMODE5			  CODE	    00B6	 127
SETREG				  CODE	    0DB3	2319
SETREG1				  CODE	    0DB4	2320
SIGNS_DIFFERENT			  CODE	    08DA	1137
SINOUT				  CODE	    0CD7	2116
SINT				  CODE	    0023
SM0				  BIT	      9F
SM1				  BIT	      9E
SM2				  BIT	      9D
SOUT				  CODE	    0CE6	2128
SOUT1				  CODE	    0CE8	2130
SOUT_1				  CODE	    0D66	2250
SP				  DATA	      81
SPACE7				  CODE	    0CC4	2100
SQ_ERR				  CODE	    0D98	2295
SRT				  CODE	    0DAA	2311
SS7				  CODE	    0CD5	2114
START				  CODE	    00E3	 151
START0				  CODE	    00BB	 131
START01				  CODE	    00C3	 136
START02				  CODE	    00E1	 150
START1				  CODE	    00ED	 157
START2				  CODE	    00F3	 161
START3				  CODE	    00F9	 165
START4				  CODE	    00FF	 169
STDIG				  CODE	    0B8E	1839
STDIG1				  CODE	    0B9D	1850
STORE2				  CODE	    09D6	1398
STORE_ALIGN_TEST_AND_EXIT	  CODE	    09D0	1388
SUBIT				  CODE	    0307	 465
SUBLP				  CODE	    0881	1049
SWAP_AND_EXIT			  CODE	    081E	 960
T0				  BIT	      B4
T1				  BIT	      B5
TB8				  BIT	      9B
TCON				  DATA	      88
TF0				  BIT	      8D
TF1				  BIT	      8F
TH0				  DATA	      8C
TH1				  DATA	      8D
TI				  BIT	      99
TIMER0				  CODE	    000B
TIMER1				  CODE	    001B
TL0				  DATA	      8A
TL1				  DATA	      8B
TMOD				  DATA	      89

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 52



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
TR0				  BIT	      8C
TR1				  BIT	      8E
TXD				  BIT	      B1
ULOOP				  CODE	    09EF	1426
UNDERFLOW			  NUMBER    0000	  28
UNDERFLOW_AND_EXIT		  CODE	    0A12	1463
UNPACK_R0			  CODE	    09EB	1419
USING0				  CODE	    0BFC	1945
USING1				  CODE	    0C02	1950
USING2				  CODE	    0C14	1963
USINGX				  CODE	    0C12	1961
USINGY				  CODE	    0C0F	1958
U_RET				  CODE	    0C96	2056
VARCOP				  CODE	    0DC6	2338
V_C				  CODE	    0DC8	2339
WAIT				  CODE	    03A4	 590
WAIT1				  CODE	    03A5	 591
WAIT100				  CODE	    039B	 584
WAIT1001			  CODE	    039F	 586
WAIT256MS			  CODE	    038E	 573
WAIT256MS1			  CODE	    0394	 576
WAITASEC			  CODE	    0381	 559
WAITASEC1			  CODE	    0387	 565
WELCOME				  CODE	    0E73	2425
WR				  BIT	      B6
XOUT0				  CODE	    0C6F	2028
XOUT2				  CODE	    0C74	2032
XOUT3				  CODE	    0C7C	2037
XOUT4				  CODE	    0C80	2041
XSIGN				  BIT	      50	  52
Z7R7				  CODE	    0CCC	2106
ZERO				  NUMBER    0002	  30
ZERO7				  CODE	    0CCD	2108
ZERO_AND_EXIT			  CODE	    0A18	1474
ZERO_DIVIDE			  NUMBER    0003	  31
ZOUT				  CODE	    0CE2	2125
ZRO				  CODE	    0E0A	2392
ZSURP				  BIT	      36	  15
ZT0				  CODE	    0CAB	2076
ZT1				  CODE	    0CB2	2081
ZTEST				  CODE	    0CA9	2074
