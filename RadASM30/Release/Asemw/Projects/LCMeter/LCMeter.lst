
ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 1





       MCS-51 Family Macro Assembler   A S E M - 5 1   V 1.3
       =====================================================



	Source File:	LCMeter.a51
	Object File:	LCMeter.hex
	List File:	LCMeter.lst



 Line  I  Addr  Code            Source

    1:
    2:				$INCLUDE	(LCMeter.inc)
    3: 1			;***********************************************************************
    4: 1			;
    5: 1			; The following values MUST be provided by the user
    6: 1			;
    7: 1			;***********************************************************************
    8: 1			;
    9: 1	N      0024	ARG_STACK	EQU	24H				;ARGUMENT STACK POINTER
   10: 1	N      0025	FORMAT		EQU	25H				;LOCATION OF OUTPUT FORMAT BYTE
   11: 1	B	 31	INTGRC		BIT	26H.1				;BIT SET IF INTEGER ERROR
   12: 1	B	 33	ADD_IN		BIT	26H.3				;DCMPXZ IN BASIC BACKAGE
   13: 1	B	 36	ZSURP		BIT	26H.6				;ZERO SUPRESSION FOR HEX PRINT
   14: 1	N      0027	CONVT		EQU	27H				;String addr TO CONVERT NUMBERS
   15: 1			;
   16: 1			;***********************************************************************
   17: 1			;
   18: 1			; The following equates are used internally
   19: 1			;
   20: 1			;***********************************************************************
   21: 1			;
   22: 1	N      0006	FP_NUMBER_SIZE	EQU	6
   23: 1	N      0004	DIGIT		EQU	4
   24: 1	N      0000	R0B0		EQU	0
   25: 1	N      0001	R1B0		EQU	1
   26: 1	N      0000	UNDERFLOW	EQU	0
   27: 1	N      0001	OVERFLOW	EQU	1
   28: 1	N      0002	ZERO		EQU	2
   29: 1	N      0003	ZERO_DIVIDE	EQU	3
   30: 1			;
   31: 1			;***********************************************************************
   32: 1				;**************************************************************
   33: 1				;
   34: 1				; The following internal locations are used by the math pack
   35: 1				; ordering is important and the FP_DIGITS must be bit
   36: 1				; addressable
   37: 1				;
   38: 1				;***************************************************************
   39: 1				;
   40: 1	N      0028	FP_STATUS	EQU	28H				;28 NOT used data pointer me
   41: 1	N      0029	FP_TEMP		EQU	FP_STATUS+1			;29 NOT USED
   42: 1	N      002A	FP_CARRY	EQU	FP_STATUS+2			;2A USED FOR BITS
   43: 1	N      002B	FP_DIG12	EQU	FP_CARRY+1			;2B

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 2



 Line  I  Addr  Code            Source

   44: 1	N      002C	FP_DIG34	EQU	FP_CARRY+2			;2C
   45: 1	N      002D	FP_DIG56	EQU	FP_CARRY+3			;2D
   46: 1	N      002E	FP_DIG78	EQU	FP_CARRY+4			;2E
   47: 1	N      002F	FP_SIGN		EQU	FP_CARRY+5			;2F
   48: 1	N      0030	FP_EXP		EQU	FP_CARRY+6			;30
   49: 1	B	 78	MSIGN		BIT	FP_SIGN.0			;2F.0
   50: 1	B	 50	XSIGN		BIT	FP_CARRY.0			;2A.0
   51: 1	B	 51	FOUND_RADIX	BIT	FP_CARRY.1			;2A.1
   52: 1	B	 52	FIRST_RADIX	BIT	FP_CARRY.2			;2A.2
   53: 1	B	 53	DONE_LOAD	BIT	FP_CARRY.3			;2A.3
   54: 1	N      002B	FP_NIB1		EQU	FP_DIG12			;2B
   55: 1	N      002C	FP_NIB2		EQU	FP_NIB1+1			;2C
   56: 1	N      002D	FP_NIB3		EQU	FP_NIB1+2			;2D
   57: 1	N      002E	FP_NIB4		EQU	FP_NIB1+3			;2E
   58: 1	N      002F	FP_NIB5		EQU	FP_NIB1+4			;2F
   59: 1	N      0030	FP_NIB6		EQU	FP_NIB1+5			;30
   60: 1	N      0031	FP_NIB7		EQU	FP_NIB1+6			;31
   61: 1	N      0032	FP_NIB8		EQU	FP_NIB1+7			;32
   62: 1	N      0033	FP_ACCX		EQU	FP_NIB1+8			;33
   63: 1	N      0034	FP_ACCC		EQU	FP_NIB1+9			;34
   64: 1	N      0035	FP_ACC1		EQU	FP_NIB1+10			;35
   65: 1	N      0036	FP_ACC2		EQU	FP_NIB1+11			;36
   66: 1	N      0037	FP_ACC3		EQU	FP_NIB1+12			;37
   67: 1	N      0038	FP_ACC4		EQU	FP_NIB1+13			;38
   68: 1	N      0039	FP_ACC5		EQU	FP_NIB1+14			;39
   69: 1	N      003A	FP_ACC6		EQU	FP_NIB1+15			;3A
   70: 1	N      003B	FP_ACC7		EQU	FP_NIB1+16			;3B
   71: 1	N      003C	FP_ACC8		EQU	FP_NIB1+17			;3C
   72: 1	N      003D	FP_ACCS		EQU	FP_NIB1+18			;3D
   73: 1
   74: 1	N      0040	LCDLINE		EQU	40h				;16 Bytes
   75: 1	N      0050	FPCHR_OUT	EQU	50h				;Holds addrss to next byte during FP number
       1			convertion
   76: 1	N      0051	MODE		EQU	51h				;Current mode (0-4)
   77: 1	N      0065	LCF1		EQU	60H+FP_NUMBER_SIZE-1		;LC Meter F1
   78: 1	N      006D	LCF2		EQU	68h+FP_NUMBER_SIZE-1		;LC Meter F2
   79: 1	N      0075	LCF3		EQU	70h+FP_NUMBER_SIZE-1		;LC Meter F3
   80: 1	N      007D	LCCA		EQU	78h+FP_NUMBER_SIZE-1		;((F1/F2)^2)-1
   81: 1	N      0085	LCCB		EQU	80h+FP_NUMBER_SIZE-1		;((1/2*Pi*F1)^2)*LCCA
   82: 1	N      008D	LCCT		EQU	88h+FP_NUMBER_SIZE-1		;Temp
   83: 1	N      0090	MCUSTACK	EQU	90h
   84: 1	N      00FF	FPSTACK		EQU	0FFh
   85: 1
   86: 1	N      0004	MODEMAX		EQU	4
   87: 1
   88:
   89:				;RESET:***********************************************
   90:		N      0000			ORG	0000h
   91:	  0000	01 F0				AJMP	START0
   92:				;IE0IRQ:**********************************************
   93:		N      0003			ORG	0003h
   94:	  0003	01 80				AJMP	IE0IRQ
   95:				;------------------------------------------------------------------
   96:
   97:		N      0080			ORG	0080h
   98:	  0080	05 51		IE0IRQ:		INC	MODE

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 3



 Line  I  Addr  Code            Source

   99:	  0082	11 96				ACALL	SETMODE
  100:	  0084	11 88				ACALL	DEBOUNCEINT0
  101:	  0086	21 23				AJMP	START
  102:
  103:	  0088	7E 00		DEBOUNCEINT0:	MOV	R6,#00h
  104:	  008A	7F 00				MOV	R7,#00h
  105:	  008C	30 B2 F9	DEBOUNCEINT01:	JNB	P3.2,DEBOUNCEINT0
  106:	  008F	DE FB				DJNZ	R6,DEBOUNCEINT01
  107:	  0091	DF F9				DJNZ	R7,DEBOUNCEINT01
  108:	  0093	C2 89				CLR	IE0
  109:	  0095	32				RETI
  110:
  111:	  0096	E5 51		SETMODE:	MOV	A,MODE
  112:	  0098	B4 05 01			CJNE	A,#MODEMAX+1,SETMODE1
  113:	  009B	E4				CLR	A
  114:	  009C	F5 51		SETMODE1:	MOV	MODE,A
  115:	  009E	FF				MOV	R7,A
  116:	  009F	90 00 BD			MOV	DPTR,#MODE0
  117:	  00A2	DF 03				DJNZ	R7,SETMODE2
  118:	  00A4	90 00 C7			MOV	DPTR,#MODE1
  119:	  00A7	DF 03		SETMODE2:	DJNZ	R7,SETMODE3
  120:	  00A9	90 00 CF			MOV	DPTR,#MODE2
  121:	  00AC	DF 03		SETMODE3:	DJNZ	R7,SETMODE4
  122:	  00AE	90 00 D7			MOV	DPTR,#MODE3
  123:	  00B1	DF 03		SETMODE4:	DJNZ	R7,SETMODE5
  124:	  00B3	90 00 E1			MOV	DPTR,#MODE4
  125:	  00B6	12 04 C8	SETMODE5:	LCALL	LCDCLEAR
  126:	  00B9	12 04 F1			LCALL	PRNTCDPTRLCD
  127:	  00BC	22				RET
  128:
  129:	  00BD	43 61 6C 69	MODE0:		DB	'Cali'
  130:	  00C1	62 72 61 74			DB	'brat'
  131:	  00C5	65 00				DB	'e',0
  132:	  00C7	43 20 4D 65	MODE1:		DB	'C Me'
  133:	  00CB	74 65 72 00			DB	'ter',0
  134:	  00CF	4C 20 4D 65	MODE2:		DB 	'L Me'
  135:	  00D3	74 65 72 00			DB	'ter',0
  136:	  00D7	46 72 71 20	MODE3:		DB	'Frq '
  137:	  00DB	43 6F 75 6E			DB	'Coun'
  138:	  00DF	74 00				DB	't',0
  139:	  00E1	46 72 71 20	MODE4:		DB	'Frq '
  140:	  00E5	43 6F 75 6E			DB	'Coun'
  141:	  00E9	74 20 31 47			DB	't 1G'
  142:	  00ED	48 7A 00			DB	'Hz',0
  143:
  144:	  00F0	E4		START0:		CLR	A
  145:	  00F1	C2 94				CLR	P1.4				;L/C
  146:	  00F3	C2 95				CLR	P1.5				;CAL
  147:	  00F5	F5 A8				MOV	IE,A				;Disable all interrupts
  148:	  00F7	F8				MOV	R0,A
  149:	  00F8	F6		START01:	MOV	@R0,A				;Clear the ram
  150:	  00F9	D8 FD				DJNZ	R0,START01
  151:	  00FB	75 81 90			MOV	SP,#MCUSTACK			;Init stack pointer.
  152:	  00FE	D2 A8				SETB	EX0				;Enable INT0
  153:	  0100	D2 AF				SETB	EA				;Enable interrupts
  154:	  0102	12 08 00			LCALL	FLOATING_INIT

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 4



 Line  I  Addr  Code            Source

  155:	  0105	71 C2				ACALL	WAITASEC
  156:	  0107	91 FC				ACALL	LCDINIT
  157:	  0109	E4				CLR	A
  158:	  010A	91 D3				ACALL	LCDSETADR
  159:	  010C	91 DF				ACALL	LCDPRNTCSTR
  160:	  010E	57 65 6C 63			DB	'Welcome Ketil',0
	  0112	6F 6D 65 20
	  0116	4B 65 74 69
	  011A	6C 00
  161:	  011C	71 C2				ACALL	WAITASEC
  162:	  011E	75 51 00			MOV	MODE,#00h
  163:	  0121	11 96		START02:	ACALL	SETMODE
  164:	  0123	B1 15		START:		ACALL	LCDCLEARLINE
  165:	  0125	AF 51				MOV	R7,MODE
  166:	  0127	DF 04				DJNZ	R7,START1
  167:						;C Meter
  168:	  0129	51 40				ACALL	CMeter
  169:	  012B	80 F6				SJMP	START
  170:	  012D	DF 04		START1:		DJNZ	R7,START2
  171:						;L Meter
  172:	  012F	51 AB				ACALL	LMeter
  173:	  0131	80 F0				SJMP	START
  174:	  0133	DF 04		START2:		DJNZ	R7,START3
  175:						;30MHz
  176:	  0135	31 46				ACALL	FREQUENCY
  177:	  0137	80 EA				SJMP	START
  178:	  0139	DF 04		START3:		DJNZ	R7,START4
  179:						;1GHz
  180:	  013B	31 60				ACALL	FREQUENCY1GHZ
  181:	  013D	80 E4				SJMP	START
  182:	  013F			START4:		;Calibrate
  183:	  013F	31 CB				ACALL	LCMETERINIT
  184:	  0141	75 51 01			MOV	MODE,#01h			;C Meter
  185:	  0144	80 DB				SJMP	START02
  186:
  187:	  0146	C2 94		FREQUENCY:	CLR	P1.4				;C
  188:	  0148	C2 95				CLR	P1.5				;F1
  189:	  014A	74 01				MOV	A,#01h				;CH1, 30MHz
  190:	  014C	71 EC				ACALL	FRQCOUNT
  191:	  014E	78 44				MOV	R0,#LCDLINE+4			;Decimal buffer
  192:	  0150	71 1F				ACALL	BIN2DEC
  193:	  0152	FF				MOV	R7,A				;Number of digits
  194:	  0153	91 38				ACALL	FRQFORMAT
  195:	  0155	74 40				MOV	A,#40h				;Output result
  196:	  0157	91 D3				ACALL	LCDSETADR
  197:	  0159	78 40				MOV	R0,#LCDLINE
  198:	  015B	7F 10				MOV	R7,#10h
  199:	  015D	91 D8				ACALL	LCDPRINTSTR
  200:	  015F	22				RET
  201:
  202:	  0160	C2 94		FREQUENCY1GHZ:	CLR	P1.4				;C
  203:	  0162	C2 95				CLR	P1.5				;F1
  204:	  0164	74 02				MOV	A,#02h				;CH2, 1GHz
  205:	  0166	71 EC				ACALL	FRQCOUNT
  206:	  0168	71 9D				ACALL	INTMUL10
  207:	  016A	71 9D				ACALL	INTMUL10

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 5



 Line  I  Addr  Code            Source

  208:	  016C	71 9D				ACALL	INTMUL10
  209:	  016E	78 44				MOV	R0,#LCDLINE+4			;Decimal buffer
  210:	  0170	71 1F				ACALL	BIN2DEC
  211:	  0172	FF				MOV	R7,A				;Number of digits
  212:	  0173	91 38				ACALL	FRQFORMAT
  213:	  0175	74 40				MOV	A,#40h				;Output result
  214:	  0177	91 D3				ACALL	LCDSETADR
  215:	  0179	78 40				MOV	R0,#LCDLINE
  216:	  017B	7F 10				MOV	R7,#10h
  217:	  017D	91 D8				ACALL	LCDPRINTSTR
  218:	  017F	22				RET
  219:
  220:				;------------------------------------------------------------------
  221:				;Get LC meter frquency
  222:				;IN:	R1 points to FP buffer
  223:				;OUT:	Nothing
  224:				;------------------------------------------------------------------
  225:	  0180	C0 01		LCMETERGETFRQ:	PUSH	01h				;Save R1
  226:	  0182	74 FA				MOV	A,#250
  227:	  0184	71 E5				ACALL	WAIT				;Wait 25ms for relay to kick in / out
  228:	  0186	74 FA				MOV	A,#250
  229:	  0188	71 E5				ACALL	WAIT				;Wait 25ms for relay to kick in / out
  230:	  018A	74 00				MOV	A,#00h				;CH0, LC Meter
  231:	  018C	71 EC				ACALL	FRQCOUNT
  232:	  018E	78 40				MOV	R0,#LCDLINE
  233:	  0190	71 1F				ACALL	BIN2DEC
  234:	  0192	78 40				MOV	R0,#LCDLINE
  235:	  0194	79 27				MOV	R1,#CONVT
  236:	  0196	7F 0A				MOV	R7,#0Ah
  237:	  0198	E6		LCMETERGETFRQ1:	MOV	A,@R0
  238:	  0199	F7				MOV	@R1,A
  239:	  019A	08				INC	R0
  240:	  019B	09				INC	R1
  241:	  019C	DF FA				DJNZ	R7,LCMETERGETFRQ1
  242:	  019E	74 0D				MOV	A,#0Dh
  243:	  01A0	F3				MOVX	@R1,A
  244:	  01A1	79 27				MOV	R1,#CONVT
  245:	  01A3	12 0B 18			LCALL	FLOATING_POINT_INPUT
  246:	  01A6	D0 01				POP	01h				;Restore R1
  247:	  01A8	12 0D AB			LCALL	POPAS				;POP ARGUMENT TO R1
  248:	  01AB	22				RET
  249:
  250:				;------------------------------------------------------------------
  251:				;Calculate X=((Fa/Fb)^2)-1
  252:				;IN:	Fa=R0, Fb=R1
  253:				;OUT:	Nothing
  254:				;------------------------------------------------------------------
  255:	  01AC	C0 01		LCCALC:		PUSH	01h
  256:	  01AE	12 0D AF			LCALL	PUSHAS				; PUSH R0 TO ARGUMENT
  257:	  01B1	D0 00				POP	00h
  258:	  01B3	12 0D AF			LCALL	PUSHAS				; PUSH R0 TO ARGUMENT
  259:	  01B6	12 09 2F			LCALL	FLOATING_DIV
  260:	  01B9	A8 24				MOV	R0,ARG_STACK
  261:	  01BB	12 0D AF			LCALL	PUSHAS				; PUSH R0 TO ARGUMENT
  262:	  01BE	12 08 FA			LCALL	FLOATING_MUL
  263:	  01C1	90 0E 10			MOV	DPTR,#FPONE

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 6



 Line  I  Addr  Code            Source

  264:	  01C4	12 0D F6			LCALL	PUSHC				; PUSH ARG IN DPTR TO STACK
  265:	  01C7	12 08 0F			LCALL	FLOATING_SUB
  266:	  01CA	22				RET
  267:
  268:				;------------------------------------------------------------------
  269:				;Get LC meter frquency F1 and F2. Calculatr LCCA=((F1/F2)^2)-1 and LCCB=LCCA*((1/(2*Pi*F1))^2)*(1/Cc
				al)
  270:				;IN:	Nothing
  271:				;OUT:	Nothing
  272:				;------------------------------------------------------------------
  273:	  01CB	C2 94		LCMETERINIT:	CLR	P1.4				;C
  274:	  01CD	C2 95				CLR	P1.5				;F1
  275:	  01CF	7F 05				MOV	R7,#05h
  276:	  01D1	C0 07		LCMETERINIT1:	PUSH	07h
  277:	  01D3	71 C2				ACALL	WAITASEC
  278:	  01D5	74 2E				MOV	A,#'.'
  279:	  01D7	91 B4				ACALL	LCDCHROUT
  280:	  01D9	D0 07				POP	07h
  281:	  01DB	DF F4				DJNZ	R7,LCMETERINIT1
  282:	  01DD	C2 95				CLR	P1.5				;F1
  283:	  01DF	79 65				MOV	R1,#LCF1
  284:	  01E1	12 01 80			LCALL	LCMETERGETFRQ			;Get F1
  285:	  01E4	D2 95				SETB	P1.5				;F2
  286:	  01E6	79 6D				MOV	R1,#LCF2
  287:	  01E8	31 80				ACALL	LCMETERGETFRQ			;Get F2
  288:	  01EA	C2 95				CLR	P1.5				;F1
  289:						;Calculate LCCA=((F1/F2)^2)-1
  290:	  01EC	78 65				MOV	R0,#LCF1
  291:	  01EE	79 6D				MOV	R1,#LCF2
  292:	  01F0	31 AC				ACALL	LCCALC
  293:						;Save result to LCCA
  294:	  01F2	79 7D				MOV	R1,#LCCA
  295:	  01F4	12 0D AB			LCALL	POPAS				;POP ARGUMENT TO R1
  296:						;Calculate A=(1/(2*Pi*F1))^2
  297:	  01F7	90 0E 16			MOV	DPTR,#FPTWO
  298:	  01FA	12 0D F6			LCALL	PUSHC				;PUSH ARG IN DPTR TO STACK
  299:	  01FD	90 0E 1C			MOV	DPTR,#FPPI
  300:	  0200	12 0D F6			LCALL	PUSHC				;PUSH ARG IN DPTR TO STACK
  301:	  0203	12 08 FA			LCALL	FLOATING_MUL
  302:	  0206	78 65				MOV	R0,#LCF1
  303:	  0208	12 0D AF			LCALL	PUSHAS				;PUSH R0 TO ARGUMENT
  304:	  020B	12 08 FA			LCALL	FLOATING_MUL
  305:	  020E	79 8D				MOV	R1,#LCCT
  306:	  0210	12 0D AB			LCALL	POPAS				;POP ARGUMENT TO R1
  307:	  0213	90 0E 10			MOV	DPTR,#FPONE
  308:	  0216	12 0D F6			LCALL	PUSHC				;PUSH ARG IN DPTR TO STACK
  309:	  0219	78 8D				MOV	R0,#LCCT
  310:	  021B	12 0D AF			LCALL	PUSHAS				;PUSH R0 TO ARGUMENT
  311:	  021E	12 09 2F			LCALL	FLOATING_DIV
  312:	  0221	A8 24				MOV	R0,ARG_STACK
  313:	  0223	12 0D AF			LCALL	PUSHAS				;PUSH R0 TO ARGUMENT
  314:	  0226	12 08 FA			LCALL	FLOATING_MUL
  315:						;Calculate LCCB=A*LCCA*(1/Ccal)
  316:	  0229	78 7D				MOV	R0,#LCCA
  317:	  022B	12 0D AF			LCALL	PUSHAS				;PUSH R0 TO ARGUMENT
  318:	  022E	12 08 FA			LCALL	FLOATING_MUL

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 7



 Line  I  Addr  Code            Source

  319:	  0231	90 0E 22			MOV	DPTR,#FPCCAL
  320:	  0234	12 0D F6			LCALL	PUSHC				;PUSH ARG IN DPTR TO STACK
  321:	  0237	12 09 2F			LCALL	FLOATING_DIV
  322:						;Save result to LCCB
  323:	  023A	79 85				MOV	R1,#LCCB
  324:	  023C	12 0D AB			LCALL	POPAS				;POP ARGUMENT TO R1
  325:	  023F	22				RET
  326:
  327:				;------------------------------------------------------------------
  328:				;Capacitance meter: Cx=((F1/F3)^2)-1)/((F1/F2)^2)-1)*Ccal
  329:				;IN:	Nothing
  330:				;OUT:	Nothing
  331:				;------------------------------------------------------------------
  332:	  0240	C2 94		CMETER:		CLR	P1.4				;C
  333:	  0242	C2 95				CLR	P1.5				;F1
  334:	  0244	79 75				MOV	R1,#LCF3
  335:	  0246	31 80				ACALL	LCMETERGETFRQ			;Get F3
  336:						;Calculate A=((F1/F3)^2)-1
  337:	  0248	78 65				MOV	R0,#LCF1
  338:	  024A	79 75				MOV	R1,#LCF3
  339:	  024C	31 AC				ACALL	LCCALC
  340:						;Calculate B=A/LCCA
  341:	  024E	78 7D				MOV	R0,#LCCA
  342:	  0250	12 0D AF			LCALL	PUSHAS				;PUSH R0 TO ARGUMENT
  343:	  0253	12 09 2F			LCALL	FLOATING_DIV
  344:						;Calculate Cx=A/B*Ccal
  345:	  0256	90 0E 22			MOV	DPTR,#FPCCAL
  346:	  0259	12 0D F6			LCALL	PUSHC				;PUSH ARG IN DPTR TO STACK
  347:	  025C	12 08 FA			LCALL	FLOATING_MUL
  348:	  025F	A8 24				MOV	R0,ARG_STACK
  349:	  0261	18				DEC	R0
  350:	  0262	E6				MOV	A,@R0
  351:	  0263	08				INC	R0
  352:	  0264	60 02				JZ	CMETER1
  353:	  0266	E4				CLR	A
  354:	  0267	F6				MOV	@R0,A
  355:	  0268	E6		CMETER1:	MOV	A,@R0
  356:	  0269	75 4E 70			MOV	LCDLINE+14,#'p'
  357:	  026C	90 0E 28			MOV	DPTR,#FPP
  358:	  026F	60 0B				JZ	CMETER2
  359:	  0271	B4 78 00			CJNE	A,#78h,$+3
  360:	  0274	40 06				JC	CMETER2
  361:	  0276	75 4E 6E			MOV	LCDLINE+14,#'n'
  362:	  0279	90 0E 2E			MOV	DPTR,#FPN
  363:	  027C	12 0D F6	CMETER2:	LCALL	PUSHC				;PUSH ARG IN DPTR TO STACK
  364:	  027F	12 08 FA			LCALL	FLOATING_MUL
  365:	  0282	75 40 43			MOV	LCDLINE,#'C'
  366:	  0285	75 41 20			MOV	LCDLINE+1,#' '
  367:	  0288	75 42 3D			MOV	LCDLINE+2,#'='
  368:	  028B	75 43 20			MOV	LCDLINE+3,#' '
  369:	  028E	75 4F 46			MOV	LCDLINE+15,#'F'
  370:	  0291	75 50 44			MOV	FPCHR_OUT,#LCDLINE+4
  371:	  0294	75 25 53			MOV	FORMAT,#53h
  372:	  0297	E5 24				MOV	A,ARG_STACK
  373:	  0299	C3				CLR	C
  374:	  029A	94 05				SUBB	A,#05h

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 8



 Line  I  Addr  Code            Source

  375:	  029C	F8				MOV	R0,A
  376:	  029D	12 0B C6			LCALL	FLOATING_POINT_OUTPUT
  377:	  02A0	74 40				MOV	A,#40h				;Output result
  378:	  02A2	91 D3				ACALL	LCDSETADR
  379:	  02A4	78 40				MOV	R0,#LCDLINE
  380:	  02A6	7F 10				MOV	R7,#10h
  381:	  02A8	91 D8				ACALL	LCDPRINTSTR
  382:	  02AA	22				RET
  383:
  384:				;------------------------------------------------------------------
  385:				;Inductance meter Lx=((F1/F3)^2)-1)*((F1/F2)^2)-1)*((1/(2*Pi*F1))^2)*(1/Ccal)
  386:				;IN:	Nothing
  387:				;OUT:	Nothing
  388:				;------------------------------------------------------------------
  389:	  02AB	D2 94		LMETER:		SETB	P1.4				;L
  390:	  02AD	C2 95				CLR	P1.5				;F1
  391:	  02AF	79 75				MOV	R1,#LCF3
  392:	  02B1	31 80				ACALL	LCMETERGETFRQ			;Get F3
  393:						;Calculate A=((F1/F3)^2)-1
  394:	  02B3	78 65				MOV	R0,#LCF1
  395:	  02B5	79 75				MOV	R1,#LCF3
  396:	  02B7	31 AC				ACALL	LCCALC
  397:						;Calculate B=A*LCCB
  398:	  02B9	78 85				MOV	R0,#LCCB
  399:	  02BB	12 0D AF			LCALL	PUSHAS				;PUSH R2:R0 TO ARGUMENT
  400:	  02BE	12 08 FA			LCALL	FLOATING_MUL
  401:	  02C1	A8 24				MOV	R0,ARG_STACK
  402:	  02C3	18				DEC	R0
  403:	  02C4	E6				MOV	A,@R0
  404:	  02C5	08				INC	R0
  405:	  02C6	60 02				JZ	LMETER1
  406:	  02C8	E4				CLR	A
  407:	  02C9	F6				MOV	@R0,A
  408:	  02CA	E6		LMETER1:	MOV	A,@R0
  409:	  02CB	B4 80 00			CJNE	A,#80h,$+3
  410:	  02CE	40 02				JC	LMETER2
  411:	  02D0	E4				CLR	A
  412:	  02D1	F6				MOV	@R0,A
  413:	  02D2	75 4E 6E	LMETER2:	MOV	LCDLINE+14,#'n'
  414:	  02D5	90 0E 2E			MOV	DPTR,#FPN
  415:	  02D8	60 16				JZ	LMETER3
  416:	  02DA	B4 7B 00			CJNE	A,#7Bh,$+3
  417:	  02DD	40 11				JC	LMETER3
  418:	  02DF	75 4E 75			MOV	LCDLINE+14,#'u'
  419:	  02E2	90 0E 34			MOV	DPTR,#FPU
  420:	  02E5	B4 7E 00			CJNE	A,#7Eh,$+3
  421:	  02E8	40 06				JC	LMETER3
  422:	  02EA	75 4E 6D			MOV	LCDLINE+14,#'m'
  423:	  02ED	90 0E 3A			MOV	DPTR,#FPM
  424:	  02F0	12 0D F6	LMETER3:	LCALL	PUSHC				;PUSH ARG IN DPTR TO STACK
  425:	  02F3	12 08 FA			LCALL	FLOATING_MUL
  426:	  02F6	75 40 4C			MOV	LCDLINE,#'L'
  427:	  02F9	75 41 20			MOV	LCDLINE+1,#' '
  428:	  02FC	75 42 3D			MOV	LCDLINE+2,#'='
  429:	  02FF	75 43 20			MOV	LCDLINE+3,#' '
  430:	  0302	75 4F 48			MOV	LCDLINE+15,#'H'

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 9



 Line  I  Addr  Code            Source

  431:	  0305	75 50 44			MOV	FPCHR_OUT,#LCDLINE+4
  432:	  0308	75 25 53			MOV	FORMAT,#53h
  433:	  030B	E5 24				MOV	A,ARG_STACK
  434:	  030D	C3				CLR	C
  435:	  030E	94 05				SUBB	A,#05h
  436:	  0310	F8				MOV	R0,A
  437:	  0311	12 0B C6			LCALL	FLOATING_POINT_OUTPUT
  438:	  0314	74 40				MOV	A,#40h				;Output result
  439:	  0316	91 D3				ACALL	LCDSETADR
  440:	  0318	78 40				MOV	R0,#LCDLINE
  441:	  031A	7F 10				MOV	R7,#10h
  442:	  031C	91 D8				ACALL	LCDPRINTSTR
  443:	  031E	22				RET
  444:
  445:				;------------------------------------------------------------------
  446:				;Binary to decimal converter
  447:				;Converts R7:R6:R5:R4 to decimal pointed to by R0
  448:				;Returns with number of digits in A
  449:				;------------------------------------------------------------------
  450:	  031F	C0 00		BIN2DEC:	PUSH	00h
  451:	  0321	90 03 75			MOV	DPTR,#BINDEC
  452:	  0324	7A 0A				MOV	R2,#0Ah
  453:	  0326	7B 2F		BIN2DEC1:	MOV	R3,#2Fh
  454:	  0328	0B		BIN2DEC2:	INC	R3
  455:	  0329	71 48				ACALL	SUBIT
  456:	  032B	50 FB				JNC	BIN2DEC2
  457:	  032D	71 61				ACALL	ADDIT
  458:	  032F	EB				MOV	A,R3
  459:	  0330	F6				MOV	@R0,A
  460:	  0331	08				INC	R0
  461:	  0332	A3				INC	DPTR
  462:	  0333	A3				INC	DPTR
  463:	  0334	A3				INC	DPTR
  464:	  0335	A3				INC	DPTR
  465:	  0336	DA EE				DJNZ	R2,BIN2DEC1
  466:	  0338	D0 00				POP	00h
  467:						;Remove leading zeroes
  468:	  033A	7A 09				MOV	R2,#09h
  469:	  033C	E6		BIN2DEC3:	MOV	A,@R0
  470:	  033D	B4 30 05			CJNE	A,#30h,BIN2DEC4
  471:	  0340	76 20				MOV	@R0,#20h
  472:	  0342	08				INC	R0
  473:	  0343	DA F7				DJNZ	R2,BIN2DEC3
  474:	  0345	0A		BIN2DEC4:	INC	R2
  475:	  0346	EA				MOV	A,R2
  476:	  0347	22				RET
  477:
  478:	  0348	E4		SUBIT:		CLR	A
  479:	  0349	93				MOVC	A,@A+DPTR
  480:	  034A	CC				XCH	A,R4
  481:	  034B	C3				CLR	C
  482:	  034C	9C				SUBB	A,R4
  483:	  034D	FC				MOV	R4,A
  484:	  034E	74 01				MOV	A,#01h
  485:	  0350	93				MOVC	A,@A+DPTR
  486:	  0351	CD				XCH	A,R5

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 10



 Line  I  Addr  Code            Source

  487:	  0352	9D				SUBB	A,R5
  488:	  0353	FD				MOV	R5,A
  489:	  0354	74 02				MOV	A,#02h
  490:	  0356	93				MOVC	A,@A+DPTR
  491:	  0357	CE				XCH	A,R6
  492:	  0358	9E				SUBB	A,R6
  493:	  0359	FE				MOV	R6,A
  494:	  035A	74 03				MOV	A,#03h
  495:	  035C	93				MOVC	A,@A+DPTR
  496:	  035D	CF				XCH	A,R7
  497:	  035E	9F				SUBB	A,R7
  498:	  035F	FF				MOV	R7,A
  499:	  0360	22				RET
  500:
  501:	  0361	E4		ADDIT:		CLR	A
  502:	  0362	93				MOVC	A,@A+DPTR
  503:	  0363	2C				ADD	A,R4
  504:	  0364	FC				MOV	R4,A
  505:	  0365	74 01				MOV	A,#01h
  506:	  0367	93				MOVC	A,@A+DPTR
  507:	  0368	3D				ADDC	A,R5
  508:	  0369	FD				MOV	R5,A
  509:	  036A	74 02				MOV	A,#02h
  510:	  036C	93				MOVC	A,@A+DPTR
  511:	  036D	3E				ADDC	A,R6
  512:	  036E	FE				MOV	R6,A
  513:	  036F	74 03				MOV	A,#03h
  514:	  0371	93				MOVC	A,@A+DPTR
  515:	  0372	3F				ADDC	A,R7
  516:	  0373	FF				MOV	R7,A
  517:	  0374	22				RET
  518:
  519:	  0375	00 CA 9A 3B	BINDEC:		DB 000h,0CAh,09Ah,03Bh			;1000000000
  520:	  0379	00 E1 F5 05			DB 000h,0E1h,0F5h,005h			; 100000000
  521:	  037D	80 96 98 00			DB 080h,096h,098h,000h			;  10000000
  522:	  0381	40 42 0F 00			DB 040h,042h,0Fh,0000h			;   1000000
  523:	  0385	A0 86 01 00			DB 0A0h,086h,001h,000h			;    100000
  524:	  0389	10 27 00 00			DB 010h,027h,000h,000h			;     10000
  525:	  038D	E8 03 00 00			DB 0E8h,003h,000h,000h			;      1000
  526:	  0391	64 00 00 00			DB 064h,000h,000h,000h			;       100
  527:	  0395	0A 00 00 00			DB 00Ah,000h,000h,000h			;        10
  528:	  0399	01 00 00 00			DB 001h,000h,000h,000h			;         1
  529:
  530:				;------------------------------------------------------------------
  531:				;Multiply R7:R6:R5:R4 by 10
  532:				;------------------------------------------------------------------
  533:	  039D	EC		INTMUL10:	MOV	A,R4
  534:	  039E	F8				MOV	R0,A
  535:	  039F	ED				MOV	A,R5
  536:	  03A0	F9				MOV	R1,A
  537:	  03A1	EE				MOV	A,R6
  538:	  03A2	FA				MOV	R2,A
  539:	  03A3	EF				MOV	A,R7
  540:	  03A4	FB				MOV	R3,A
  541:	  03A5	71 B5				ACALL	INTMUL2
  542:	  03A7	71 B5				ACALL	INTMUL2

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 11



 Line  I  Addr  Code            Source

  543:	  03A9	EC				MOV	A,R4
  544:	  03AA	28				ADD	A,R0
  545:	  03AB	FC				MOV	R4,A
  546:	  03AC	ED				MOV	A,R5
  547:	  03AD	39				ADDC	A,R1
  548:	  03AE	FD				MOV	R5,A
  549:	  03AF	EE				MOV	A,R6
  550:	  03B0	3A				ADDC	A,R2
  551:	  03B1	FE				MOV	R6,A
  552:	  03B2	EF				MOV	A,R7
  553:	  03B3	3B				ADDC	A,R3
  554:	  03B4	FF				MOV	R7,A
  555:	  03B5	EC		INTMUL2:	MOV	A,R4
  556:	  03B6	2C				ADD	A,R4
  557:	  03B7	FC				MOV	R4,A
  558:	  03B8	ED				MOV	A,R5
  559:	  03B9	3D				ADDC	A,R5
  560:	  03BA	FD				MOV	R5,A
  561:	  03BB	EE				MOV	A,R6
  562:	  03BC	3E				ADDC	A,R6
  563:	  03BD	FE				MOV	R6,A
  564:	  03BE	EF				MOV	A,R7
  565:	  03BF	3F				ADDC	A,R7
  566:	  03C0	FF				MOV	R7,A
  567:	  03C1	22				RET
  568:
  569:				;------------------------------------------------------------------
  570:				;Wait loop. Waits 1 second
  571:				;------------------------------------------------------------------
  572:	  03C2	7F F9		WAITASEC:	MOV	R7,#0F9h
  573:	  03C4	7E 33				MOV	R6,#51
  574:	  03C6	7D 10				MOV	R5,#16
  575:	  03C8	DF FE		WAITASEC1:	DJNZ	R7,WAITASEC1
  576:	  03CA	DE FC				DJNZ	R6,WAITASEC1
  577:	  03CC	DD FA				DJNZ	R5,WAITASEC1
  578:	  03CE	22				RET
  579:
  580:				;------------------------------------------------------------------
  581:				;Wait loop. Waits 0.256 seconds
  582:				;------------------------------------------------------------------
  583:	  03CF	7F F9		WAIT256MS:	MOV	R7,#0F9h
  584:	  03D1	7E 33				MOV	R6,#51
  585:	  03D3	7D 02				MOV	R5,#02
  586:	  03D5	DF FE		WAIT256MS1:	DJNZ	R7,WAIT256MS1
  587:	  03D7	DE FC				DJNZ	R6,WAIT256MS1
  588:	  03D9	DD FA				DJNZ	R5,WAIT256MS1
  589:	  03DB	22				RET
  590:
  591:				;------------------------------------------------------------------
  592:				;Wait functions
  593:				;------------------------------------------------------------------
  594:	  03DC	C0 07		WAIT100:	PUSH	07h				;Save R7
  595:	  03DE	7F 64				MOV	R7,#64h
  596:	  03E0	DF FE		WAIT1001:	DJNZ	R7,WAIT1001			;Wait loop, 100uS
  597:	  03E2	D0 07				POP	07h				;Restore R7
  598:	  03E4	22				RET

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 12



 Line  I  Addr  Code            Source

  599:
  600:	  03E5	CF		WAIT:		XCH	A,R7
  601:	  03E6	71 DC		WAIT1:		ACALL	WAIT100
  602:	  03E8	DF FC				DJNZ	R7,WAIT1
  603:	  03EA	CF				XCH	A,R7
  604:	  03EB	22				RET
  605:
  606:				;------------------------------------------------------------------
  607:				;Frequency counter. LSB from 74HC590 read at P0, TL0, TH0 and
  608:				;TF0 bit. 25 bits, max 33554431 Hz
  609:				;IN:	A Channel (0-3)
  610:				;OUT:	32 Bit result in R7:R6:R5:R4
  611:				;------------------------------------------------------------------
  612:	  03EC	C0 E0		FRQCOUNT:	PUSH	ACC
  613:	  03EE	D2 93				SETB	P1.3				;DISABLE COUNT
  614:	  03F0	C2 92				CLR	P1.2				;RESET 74HC590
  615:	  03F2	D2 92				SETB	P1.2
  616:						;Select channel
  617:	  03F4	A2 E0				MOV	C,ACC.0
  618:	  03F6	92 90				MOV	P1.0,C
  619:	  03F8	A2 E1				MOV	C,ACC.1
  620:	  03FA	92 91				MOV	P1.1,C
  621:	  03FC	75 8A 00			MOV	TL0,#00h
  622:	  03FF	75 8C 00			MOV	TH0,#00h
  623:	  0402	E5 89				MOV	A,TMOD
  624:	  0404	D2 E0				SETB	ACC.0				;M00
  625:	  0406	C2 E1				CLR	ACC.1				;M01
  626:	  0408	D2 E2				SETB	ACC.2				;C/T0#
  627:	  040A	C2 E3				CLR	ACC.3				;GATE0
  628:	  040C	F5 89				MOV	TMOD,A
  629:	  040E	E5 88				MOV	A,TCON
  630:	  0410	D2 E4				SETB	ACC.4				;TR0
  631:	  0412	C2 E5				CLR	ACC.5				;TF0
  632:	  0414	F5 88				MOV	TCON,A
  633:	  0416	D0 E0				POP	ACC
  634:	  0418	14				DEC	A
  635:	  0419	60 08				JZ	FRQCOUNT1
  636:	  041B	C2 93				CLR	P1.3				;ENABLR COUNT
  637:	  041D	71 CF				ACALL	WAIT256MS
  638:	  041F	D2 93				SETB	P1.3				;DISABLE COUNT
  639:	  0421	80 06				SJMP	FRQCOUNT2
  640:	  0423	C2 93		FRQCOUNT1:	CLR	P1.3				;ENABLR COUNT
  641:	  0425	71 C2				ACALL	WAITASEC
  642:	  0427	D2 93				SETB	P1.3				;DISABLE COUNT
  643:	  0429	E5 80		FRQCOUNT2:	MOV	A,P0				;8 BITS FROM 74HC590
  644:	  042B	FC				MOV	R4,A
  645:	  042C	E5 8A				MOV	A,TL0				;8 BITS FROM
  646:	  042E	FD				MOV	R5,A
  647:	  042F	E5 8C				MOV	A,TH0				;8 BITS FROM
  648:	  0431	FE				MOV	R6,A
  649:	  0432	E4				CLR	A				;TF0 Is the 25th bit
  650:	  0433	A2 8D				MOV	C,TF0
  651:	  0435	33				RLC	A
  652:	  0436	FF				MOV	R7,A
  653:	  0437	22				RET
  654:

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 13



 Line  I  Addr  Code            Source

  655:				;------------------------------------------------------------------
  656:				;Format frequency conter text line
  657:				;	LCDLINE+4 Decimal result
  658:				;	R7 Number of digits
  659:				;OUT:	Formatted LCDLINE
  660:				;------------------------------------------------------------------
  661:	  0438	75 40 46	FRQFORMAT:	MOV	LCDLINE+0,#'F'
  662:	  043B	75 41 3D			MOV	LCDLINE+1,#'='
  663:	  043E	75 42 20			MOV	LCDLINE+2,#' '
  664:	  0441	78 43				MOV	R0,#LCDLINE+3
  665:	  0443	79 45				MOV	R1,#LCDLINE+5
  666:	  0445	BF 07 00			CJNE	R7,#07h,$+3
  667:	  0448	40 19				JC	FRQFORMATKHZ
  668:						;MHz
  669:	  044A	7F 09				MOV	R7,#09h
  670:	  044C	E7		FRQFORMATMHZ1:	MOV	A,@R1
  671:	  044D	BF 06 03			CJNE	R7,#06h,FRQFORMATMHZ2
  672:	  0450	76 2E				MOV	@R0,#'.'
  673:	  0452	08				INC	R0
  674:	  0453	F6		FRQFORMATMHZ2:	MOV	@R0,A
  675:	  0454	08				INC	R0
  676:	  0455	09				INC	R1
  677:	  0456	DF F4				DJNZ	R7,FRQFORMATMHZ1
  678:	  0458	75 4D 4D			MOV	LCDLINE+13,#'M'
  679:	  045B	75 4E 48			MOV	LCDLINE+14,#'H'
  680:	  045E	75 4F 7A			MOV	LCDLINE+15,#'z'
  681:	  0461	80 30				SJMP	FRQFORMATDONE
  682:	  0463	BF 04 00	FRQFORMATKHZ:	CJNE	R7,#04h,$+3
  683:	  0466	40 19				JC	FRQFORMATHZ
  684:						;KHz
  685:	  0468	7F 09				MOV	R7,#09h
  686:	  046A	E7		FRQFORMATKHZ1:	MOV	A,@R1
  687:	  046B	BF 03 03			CJNE	R7,#03h,FRQFORMATKHZ2
  688:	  046E	76 2E				MOV	@R0,#'.'
  689:	  0470	08				INC	R0
  690:	  0471	F6		FRQFORMATKHZ2:	MOV	@R0,A
  691:	  0472	08				INC	R0
  692:	  0473	09				INC	R1
  693:	  0474	DF F4				DJNZ	R7,FRQFORMATKHZ1
  694:	  0476	75 4D 4B			MOV	LCDLINE+13,#'K'
  695:	  0479	75 4E 48			MOV	LCDLINE+14,#'H'
  696:	  047C	75 4F 7A			MOV	LCDLINE+15,#'z'
  697:	  047F	80 12				SJMP	FRQFORMATDONE
  698:	  0481			FRQFORMATHZ:	;Hz
  699:	  0481	08				INC	R0
  700:	  0482	7F 09				MOV	R7,#09h
  701:	  0484	E7		FRQFORMATHZ1:	MOV	A,@R1
  702:	  0485	F6				MOV	@R0,A
  703:	  0486	08				INC	R0
  704:	  0487	09				INC	R1
  705:	  0488	DF FA				DJNZ	R7,FRQFORMATHZ1
  706:	  048A	75 4D 48			MOV	LCDLINE+13,#'H'
  707:	  048D	75 4E 7A			MOV	LCDLINE+14,#'z'
  708:	  0490	75 4F 20			MOV	LCDLINE+15,#' '
  709:	  0493	22		FRQFORMATDONE:	RET
  710:

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 14



 Line  I  Addr  Code            Source

  711:				;------------------------------------------------------------------
  712:				;LCD Output.
  713:				;------------------------------------------------------------------
  714:				;TXBYTE:		MOV	SBUF,A
  715:				;		JNB	TI,$
  716:				;		CLR	TI
  717:				;		RET
  718:
  719:	  0494	C0 07		LCDDELAY:	PUSH	07h
  720:	  0496	7F 00				MOV	R7,#00h
  721:	  0498	DF FE				DJNZ	R7,$
  722:	  049A	D0 07				POP	07h
  723:	  049C	22				RET
  724:
  725:				;A contains nibble, ACC.4 contains RS
  726:	  049D	D2 E5		LCDNIBOUT:	SETB	ACC.5				;E
  727:	  049F	F5 A0				MOV	P2,A
  728:	  04A1	C2 A5				CLR	P2.5				;Negative edge on E
  729:	  04A3	22				RET
  730:
  731:				;A contains byte
  732:	  04A4	C0 E0		LCDCMDOUT:	PUSH	ACC
  733:	  04A6	C4				SWAP	A				;High nibble first
  734:	  04A7	54 0F				ANL	A,#0Fh
  735:	  04A9	91 9D				ACALL	LCDNIBOUT
  736:	  04AB	D0 E0				POP	ACC
  737:	  04AD	54 0F				ANL	A,#0Fh
  738:	  04AF	91 9D				ACALL	LCDNIBOUT
  739:	  04B1	91 94				ACALL	LCDDELAY			;Wait for BF to clear
  740:	  04B3	22				RET
  741:
  742:				;A contains byte
  743:	  04B4			LCDCHROUT:	;AJMP	TXBYTE
  744:	  04B4	C0 E0				PUSH	ACC
  745:	  04B6	C4				SWAP	A				;High nibble first
  746:	  04B7	54 0F				ANL	A,#0Fh
  747:	  04B9	D2 E4				SETB	ACC.4				;RS
  748:	  04BB	91 9D				ACALL	LCDNIBOUT
  749:	  04BD	D0 E0				POP	ACC
  750:	  04BF	54 0F				ANL	A,#0Fh
  751:	  04C1	D2 E4				SETB	ACC.4				;RS
  752:	  04C3	91 9D				ACALL	LCDNIBOUT
  753:	  04C5	91 94				ACALL	LCDDELAY			;Wait for BF to clear
  754:	  04C7	22				RET
  755:
  756:	  04C8	74 01		LCDCLEAR:	MOV	A,#00000001b
  757:	  04CA	91 A4				ACALL	LCDCMDOUT
  758:	  04CC	7F 00				MOV	R7,#00h
  759:	  04CE	91 94		LCDCLEAR1:	ACALL	LCDDELAY
  760:	  04D0	DF FC				DJNZ	R7,LCDCLEAR1
  761:	  04D2	22				RET
  762:
  763:				;A contais address
  764:	  04D3	44 80		LCDSETADR:	ORL	A,#10000000b
  765:	  04D5	91 A4				ACALL	LCDCMDOUT
  766:	  04D7	22				RET

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 15



 Line  I  Addr  Code            Source

  767:
  768:	  04D8	E6		LCDPRINTSTR:	MOV	A,@R0
  769:	  04D9	91 B4				ACALL	LCDCHROUT
  770:	  04DB	08				INC	R0
  771:	  04DC	DF FA				DJNZ	R7,LCDPRINTSTR
  772:	  04DE	22				RET
  773:				;MOV	A,#0DH
  774:				;ACALL	LCDCHROUT
  775:				;MOV	A,#0AH
  776:				;ACALL	LCDCHROUT
  777:				;RET
  778:
  779:	  04DF	D0 83		LCDPRNTCSTR:	POP	DPH
  780:	  04E1	D0 82				POP	DPL
  781:	  04E3	E4		LCDPRNTCSTR1:	CLR	A
  782:	  04E4	93				MOVC	A,@A+DPTR
  783:	  04E5	A3				INC	DPTR
  784:	  04E6	60 04				JZ	LCDPRNTCSTR2
  785:	  04E8	91 B4				ACALL	LCDCHROUT
  786:	  04EA	80 F7				SJMP	LCDPRNTCSTR1
  787:	  04EC	C0 82		LCDPRNTCSTR2:	PUSH	DPL
  788:	  04EE	C0 83				PUSH	DPH
  789:	  04F0	22				RET
  790:
  791:	  04F1	E4		PRNTCDPTRLCD:	CLR	A
  792:	  04F2	93				MOVC	A,@A+DPTR
  793:	  04F3	60 06				JZ	PRNTCDPTRLCD1
  794:	  04F5	12 04 B4			LCALL	LCDCHROUT
  795:	  04F8	A3				INC	DPTR
  796:	  04F9	80 F6				SJMP	PRNTCDPTRLCD
  797:	  04FB	22		PRNTCDPTRLCD1:	RET
  798:				;MOV	A,#0DH
  799:				;ACALL	LCDCHROUT
  800:				;MOV	A,#0AH
  801:				;ACALL	LCDCHROUT
  802:				;RET
  803:
  804:	  04FC	74 03		LCDINIT:	MOV	A,#00000011b			;Function set
  805:	  04FE	91 9D				ACALL	LCDNIBOUT
  806:	  0500	91 94				ACALL	LCDDELAY			;Wait for BF to clear
  807:	  0502	74 28				MOV	A,#00101000b
  808:	  0504	91 A4				ACALL	LCDCMDOUT
  809:	  0506	74 28				MOV	A,#00101000b
  810:	  0508	91 A4				ACALL	LCDCMDOUT
  811:	  050A	74 0C				MOV	A,#00001100b			;Display ON/OFF
  812:	  050C	91 A4				ACALL	LCDCMDOUT
  813:	  050E	91 C8				ACALL	LCDCLEAR			;Clear
  814:	  0510	74 06				MOV	A,#00000110b			;Cursor direction
  815:	  0512	91 A4				ACALL	LCDCMDOUT
  816:	  0514	22				RET
  817:
  818:	  0515	78 40		LCDCLEARLINE:	MOV	R0,#LCDLINE			;Get logic levels
  819:	  0517	7F 10				MOV	R7,#10h
  820:	  0519	74 20				MOV	A,#20H
  821:	  051B	F6		LCDCLEARLINE1:	MOV	@R0,A
  822:	  051C	08				INC	R0

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 16



 Line  I  Addr  Code            Source

  823:	  051D	DF FC				DJNZ	R7,LCDCLEARLINE1
  824:	  051F	22				RET
  825:
  826:		N      0800			ORG	0800h
  827:
  828:				$INCLUDE	(FP52INT.a51)
  829: 1			; This is a complete BCD floating point package for the 8051 micro-
  830: 1			; controller. It provides 8 digits of accuracy with exponents that
  831: 1			; range from +127 to -127. The mantissa is in packed BCD, while the
  832: 1			; exponent is expressed in pseudo-twos complement. A ZERO exponent
  833: 1			; is used to express the number ZERO. An exponent value of 80H or
  834: 1			; greater than means the exponent is positive, i.e. 80H = E 0,
  835: 1			; 81H = E+1, 82H = E+2 and so on. If the exponent is 7FH or less,
  836: 1			; the exponent is negative, 7FH = E-1, 7EH = E-2, and so on.
  837: 1			; ALL NUMBERS ARE ASSUMED TO BE NORMALIZED and all results are
  838: 1			; normalized after calculation. A normalized mantissa is >=.10 and
  839: 1			; <=.99999999.
  840: 1			;
  841: 1			; The numbers in memory assumed to be stored as follows:
  842: 1			;
  843: 1			; EXPONENT OF ARGUMENT 2   =   VALUE OF ARG_STACK+FP_NUMBER_SIZE
  844: 1			; SIGN OF ARGUMENT 2       =   VALUE OF ARG_STACK+FP_NUMBER_SIZE-1
  845: 1			; DIGIT 78 OF ARGUMENT 2   =   VALUE OF ARG_STACK+FP_NUMBER_SIZE-2
  846: 1			; DIGIT 56 OF ARGUMENT 2   =   VALUE OF ARG_STACK+FP_NUMBER_SIZE-3
  847: 1			; DIGIT 34 OF ARGUMENT 2   =   VALUE OF ARG_STACK+FP_NUMBER_SIZE-4
  848: 1			; DIGIT 12 OF ARGUMENT 2   =   VALUE OF ARG_STACK+FP_NUMBER_SIZE-5
  849: 1			;
  850: 1			; EXPONENT OF ARGUMENT 1   =   VALUE OF ARG_STACK
  851: 1			; SIGN OF ARGUMENT 1       =   VALUE OF ARG_STACK-1
  852: 1			; DIGIT 78 OF ARGUMENT 1   =   VALUE OF ARG_STACK-2
  853: 1			; DIGIT 56 OF ARGUMENT 1   =   VALUE OF ARG_STACK-3
  854: 1			; DIGIT 34 OF ARGUMENT 1   =   VALUE OF ARG_STACK-4
  855: 1			; DIGIT 12 OF ARGUMENT 1   =   VALUE OF ARG_STACK-5
  856: 1			;
  857: 1			; The operations are performed thusly:
  858: 1			;
  859: 1			; ARG_STACK+FP_NUMBER_SIZE = ARG_STACK+FP_NUMBER_SIZE # ARG_STACK
  860: 1			;
  861: 1			; Which is ARGUMENT 2 = ARGUMENT 2 # ARGUMENT 1
  862: 1			;
  863: 1			; Where # can be ADD, SUBTRACT, MULTIPLY OR DIVIDE.
  864: 1			;
  865: 1			; Note that the stack gets popped after an operation.
  866: 1			;
  867: 1			; The FP_COMP instruction POPS the ARG_STACK TWICE and returns status.
  868: 1			;
  869: 1			;**********************************************************************
  870: 1			;
  871: 1			;**********************************************************************
  872: 1			;
  873: 1			; STATUS ON RETURN - After performing an operation (+, -, *, /)
  874: 1			;                    the accumulator contains the following status
  875: 1			;
  876: 1			; ACCUMULATOR - BIT 0 - FLOATING POINT UNDERFLOW OCCURED
  877: 1			;
  878: 1			;             - BIT 1 - FLOATING POINT OVERFLOW OCCURED

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 17



 Line  I  Addr  Code            Source

  879: 1			;
  880: 1			;             - BIT 2 - RESULT WAS ZER0
  881: 1			;
  882: 1			;             - BIT 3 - DIVIDE BY ZERO ATTEMPTED
  883: 1			;
  884: 1			;             - BIT 4 - NOT USED, 0 RETURNED
  885: 1			;
  886: 1			;             - BIT 5 - NOT USED, 0 RETURNED
  887: 1			;
  888: 1			;             - BIT 6 - NOT USED, 0 RETURNED
  889: 1			;
  890: 1			;             - BIT 7 - NOT USED, 0 RETURNED
  891: 1			;
  892: 1			; NOTE: When underflow occures, a ZERO result is returned.
  893: 1			;       When overflow or divide by zero occures, a result of
  894: 1			;       .99999999 E+127 is returned and it is up to the user
  895: 1			;       to handle these conditions as needed in the program.
  896: 1			;
  897: 1			; NOTE: The Compare instruction returns F0 = 0 if ARG 1 = ARG 2
  898: 1			;       and returns a CARRY FLAG = 1 if ARG 1 is > ARG 2
  899: 1			;
  900: 1			;***********************************************************************
  901: 1			;
  902: 1
  903: 1			;$NOTABS                  ;expand tabs
  904: 1
  905: 1
  906: 1			CMP MACRO REGISTER,CONSTANT
  907: 1			CJNE	REGISTER,CONSTANT,$+3
  908: 1			ENDM
  909: 1
  910: 1			;			MOV	SP,#50H
  911: 1			;			MOV	24H,#07FH
  912: 1			;			MOV	25H,#044H
  913: 1			;
  914: 1			;			MOV	DPTR,#FPONE
  915: 1			;			ACALL	PUSHC
  916: 1			;			MOV	DPTR,#FPTWO
  917: 1			;			ACALL	PUSHC
  918: 1			;			ACALL	FLOATING_ADD
  919: 1			;
  920: 1			;
  921: 1			;			MOV	24H,#07FH
  922: 1			;			MOV	DPTR,#FPTHREE
  923: 1			;			ACALL	PUSHC
  924: 1			;			MOV	DPTR,#FPTWO
  925: 1			;			ACALL	PUSHC
  926: 1			;			ACALL	FLOATING_MUL
  927: 1			;			ACALL	FLOATING_POINT_OUTPUT
  928: 1			;			SJMP	$
  929: 1			;
  930: 1			;FP_BASE			EQU	$
  931: 1
  932: 1				;**************************************************************
  933: 1				;
  934: 1				; The floating point entry points and jump table

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 18



 Line  I  Addr  Code            Source

  935: 1				;
  936: 1				;**************************************************************
  937: 1				;
  938: 1			;			AJMP	FLOATING_ADD
  939: 1			;			AJMP	FLOATING_SUB
  940: 1			;			AJMP	FLOATING_COMP
  941: 1			;			AJMP	FLOATING_MUL
  942: 1			;			AJMP	FLOATING_DIV
  943: 1			;			AJMP	HEXSCAN
  944: 1			;			AJMP	FLOATING_POINT_INPUT
  945: 1			;			AJMP	FLOATING_POINT_OUTPUT
  946: 1			;			AJMP	MULNUM10
  947: 1			;			AJMP	HEXOUT
  948: 1			;			AJMP	PUSHAS				;PUSH R0 TO ARGUMENT
  949: 1			;			AJMP	POPAS				;POP ARGUMENT TO R1
  950: 1			;			AJMP	MOVAS				;COPY ARGUMENT TO R1
  951: 1			;			AJMP	AINT				;INT FUNCTION
  952: 1			;			AJMP	PUSHC				;PUSH ARG IN CODE MEM POINTED TO BY
       1			DPTR TO STACK
  953: 1
  954: 1				;
  955: 1				;IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII
  956: 1				;
  957: 1  0800			FLOATING_INIT:
  958: 1				;
  959: 1				;IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII
  960: 1				;
  961: 1  0800	75 24 FF				MOV	ARG_STACK,#FPSTACK
  962: 1  0803	75 25 00				MOV	FORMAT,#00h
  963: 1  0806	75 50 40				MOV	FPCHR_OUT,#LCDLINE
  964: 1  0809	75 27 40				MOV	CONVT,#LCDLINE
  965: 1  080C	22					RET
  966: 1
  967: 1  080D	22		PRTERR:			RET
  968: 1  080E	22		BADPRM:			RET
  969: 1
  970: 1				;
  971: 1				;
  972: 1  080F			FLOATING_SUB:
  973: 1				;
  974: 1  080F	A8 24					MOV	R0,ARG_STACK
  975: 1  0811	18					DEC	R0				;POINT TO SIGN
  976: 1  0812	E6					MOV	A,@R0				;READ SIGN
  977: 1  0813	B2 E0					CPL	ACC.0
  978: 1  0815	F6					MOV	@R0,A
  979: 1				;
  980: 1				;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
  981: 1				;
  982: 1  0816			FLOATING_ADD:
  983: 1				;
  984: 1				;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
  985: 1				;
  986: 1				;
  987: 1  0816	51 D4					ACALL 	MDES1				;R7=TOS EXP, R6=TOS-1 EXP, R4=TOS SI
       1			GN
  988: 1											;R3=TOS-1 SIGN, OPERATION IS R1 # R0

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 19



 Line  I  Addr  Code            Source

  989: 1				;
  990: 1  0818	EF					MOV	A,R7				;GET TOS EXPONENT
  991: 1  0819	60 0D					JZ	POP_AND_EXIT			;IF TOS=0 THEN POP AND EXIT
  992: 1  081B	BE 00 12				CJNE	R6,#0,LOAD1			;CLEAR CARRY EXIT IF ZERO
  993: 1				;
  994: 1				;**************************************************************
  995: 1				;
  996: 1  081E			SWAP_AND_EXIT:							; Swap external args and return
  997: 1				;
  998: 1				;**************************************************************
  999: 1				;
 1000: 1  081E	51 CB					ACALL	LOAD_POINTERS
 1001: 1  0820	7F 06					MOV	R7,#FP_NUMBER_SIZE
 1002: 1				;
 1003: 1  0822	E6		SE1:			MOV	A,@R0				;SWAP THE ARGUMENTS
 1004: 1  0823	F7					MOV	@R1,A
 1005: 1  0824	18					DEC	R0
 1006: 1  0825	19					DEC	R1
 1007: 1  0826	DF FA					DJNZ	R7,SE1
 1008: 1				;
 1009: 1  0828			POP_AND_EXIT:
 1010: 1				;
 1011: 1  0828	E5 24					MOV	A,ARG_STACK			;POP THE STACK
 1012: 1  082A	24 06					ADD	A,#FP_NUMBER_SIZE
 1013: 1  082C	F5 24					MOV	ARG_STACK,A
 1014: 1  082E	E4					CLR	A
 1015: 1  082F	22					RET
 1016: 1				;
 1017: 1				;
 1018: 1  0830	9E		LOAD1:			SUBB	A,R6				;A = ARG 1 EXP - ARG 2 EXP
 1019: 1  0831	8F 30					MOV	FP_EXP,R7			;SAVE EXPONENT AND SIGN
 1020: 1  0833	8C 2F					MOV	FP_SIGN,R4
 1021: 1  0835	50 09					JNC	LOAD2				;ARG1 EXPONENT IS LARGER OR SAME
 1022: 1  0837	8E 30					MOV	FP_EXP,R6
 1023: 1  0839	8B 2F					MOV	FP_SIGN,R3
 1024: 1  083B	F4					CPL	A
 1025: 1  083C	04					INC	A				;COMPENSATE FOR EXP DELTA
 1026: 1  083D	C8					XCH	A,R0				;FORCE R0 TO POINT AT THE LARGEST
 1027: 1  083E	C9					XCH	A,R1				;EXPONENT
 1028: 1  083F	C8					XCH	A,R0
 1029: 1				;
 1030: 1  0840	FF		LOAD2:			MOV	R7,A				;SAVE THE EXPONENT DELTA IN R7
 1031: 1  0841	C2 33					CLR	ADD_IN
 1032: 1  0843	BD 00 02				CJNE	R5,#0,LOAD3
 1033: 1  0846	D2 33					SETB	ADD_IN
 1034: 1				;
 1035: 1				; Load the R1 mantissa
 1036: 1				;
 1037: 1  0848	51 E5		LOAD3:			ACALL	LOADR1_MANTISSA			;LOAD THE SMALLEST NUMBER
 1038: 1				;
 1039: 1				; Now align the number to the delta exponent
 1040: 1				; R4 points to the string of the last digits lost
 1041: 1				;
 1042: 1						CMP	R7,#DIGIT+DIGIT+3
 1043+ 2  084A	BF 0B 00	CJNE	R7,#DIGIT+DIGIT+3,$+3
 1044: 1  084D	40 02					JC	LOAD4

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 20



 Line  I  Addr  Code            Source

 1045: 1  084F	7F 0A					MOV	R7,#DIGIT+DIGIT+2
 1046: 1				;
 1047: 1  0851	75 2A 00	LOAD4:			MOV	FP_CARRY,#00			;CLEAR THE CARRY
 1048: 1  0854	51 28					ACALL	RIGHT				;SHIFT THE NUMBER
 1049: 1				;
 1050: 1				; Set up for addition and subtraction
 1051: 1				;
 1052: 1  0856	7F 04					MOV	R7,#DIGIT			;LOOP COUNT
 1053: 1  0858	79 2E					MOV	R1,#FP_DIG78
 1054: 1  085A	74 9E					MOV	A,#9EH
 1055: 1  085C	C3					CLR	C
 1056: 1  085D	9C					SUBB	A,R4
 1057: 1  085E	D4					DA	A
 1058: 1  085F	CC					XCH	A,R4
 1059: 1  0860	70 01					JNZ	LOAD5
 1060: 1  0862	FC					MOV	R4,A
 1061: 1  0863			LOAD5:			CMP	A,#50H				;TEST FOR SUBTRACTION
 1062+ 2  0863	B4 50 00	CJNE	A,#50H,$+3
 1063: 1  0866	30 33 18				JNB	ADD_IN,SUBLP			;DO SUBTRACTION IF NO ADD_IN
 1064: 1  0869	B3					CPL	C				;FLIP CARRY FOR ADDITION
 1065: 1  086A	11 78					ACALL	ADDLP				;DO ADDITION
 1066: 1				;
 1067: 1  086C	50 08					JNC	ADD_R
 1068: 1  086E	05 2A					INC	FP_CARRY
 1069: 1  0870	7F 01					MOV	R7,#1
 1070: 1  0872	51 28					ACALL	RIGHT
 1071: 1  0874	31 DF					ACALL	INC_FP_EXP			;SHIFT AND BUMP EXPONENT
 1072: 1				;
 1073: 1  0876	21 D0		ADD_R:			AJMP	STORE_ALIGN_TEST_AND_EXIT
 1074: 1				;
 1075: 1  0878	E6		ADDLP:			MOV	A,@R0
 1076: 1  0879	37					ADDC	A,@R1
 1077: 1  087A	D4					DA	A
 1078: 1  087B	F7					MOV	@R1,A
 1079: 1  087C	18					DEC	R0
 1080: 1  087D	19					DEC	R1
 1081: 1  087E	DF F8					DJNZ	R7,ADDLP			;LOOP UNTIL DONE
 1082: 1  0880	22					RET
 1083: 1				;
 1084: 1				;
 1085: 1  0881	E6		SUBLP:			MOV	A,@R0				;NOW DO SUBTRACTION
 1086: 1  0882	FE					MOV	R6,A
 1087: 1  0883	E4					CLR	A
 1088: 1  0884	34 99					ADDC	A,#99H
 1089: 1  0886	97					SUBB	A,@R1
 1090: 1  0887	2E					ADD	A,R6
 1091: 1  0888	D4					DA	A
 1092: 1  0889	F7					MOV	@R1,A
 1093: 1  088A	18					DEC	R0
 1094: 1  088B	19					DEC	R1
 1095: 1  088C	DF F3					DJNZ	R7,SUBLP
 1096: 1  088E	40 11					JC	FSUB6
 1097: 1				;
 1098: 1				;
 1099: 1				; Need to complement the result and sign because the floating
 1100: 1				; point accumulator mantissa was larger than the external

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 21



 Line  I  Addr  Code            Source

 1101: 1				; memory and their signs were equal.
 1102: 1				;
 1103: 1  0890	B2 78					CPL	FP_SIGN.0
 1104: 1  0892	79 2E					MOV	R1,#FP_DIG78
 1105: 1  0894	7F 04					MOV	R7,#DIGIT			;LOOP COUNT
 1106: 1				;
 1107: 1  0896	74 9A		FSUB5:			MOV	A,#9AH
 1108: 1  0898	97					SUBB	A,@R1
 1109: 1  0899	24 00					ADD	A,#0
 1110: 1  089B	D4					DA	A
 1111: 1  089C	F7					MOV	@R1,A
 1112: 1  089D	19					DEC	R1
 1113: 1  089E	B3					CPL	C
 1114: 1  089F	DF F5					DJNZ	R7,FSUB5			;LOOP
 1115: 1				;
 1116: 1				; Now see how many zeros their are
 1117: 1				;
 1118: 1  08A1	78 2B		FSUB6:			MOV	R0,#FP_DIG12
 1119: 1  08A3	7F 00					MOV	R7,#0
 1120: 1				;
 1121: 1  08A5	E6		FSUB7:			MOV	A,@R0
 1122: 1  08A6	70 08					JNZ	FSUB8
 1123: 1  08A8	0F					INC	R7
 1124: 1  08A9	0F					INC	R7
 1125: 1  08AA	08					INC	R0
 1126: 1  08AB	B8 2F F7				CJNE	R0,#FP_SIGN,FSUB7
 1127: 1  08AE	41 18					AJMP	ZERO_AND_EXIT
 1128: 1				;
 1129: 1  08B0			FSUB8:			CMP	A,#10H
 1130+ 2  08B0	B4 10 00	CJNE	A,#10H,$+3
 1131: 1  08B3	50 01					JNC	FSUB9
 1132: 1  08B5	0F					INC	R7
 1133: 1				;
 1134: 1				; Now R7 has the number of leading zeros in the FP ACC
 1135: 1				;
 1136: 1  08B6	E5 30		FSUB9:			MOV	A,FP_EXP			;GET THE OLD EXPONENT
 1137: 1  08B8	C3					CLR	C
 1138: 1  08B9	9F					SUBB	A,R7				;SUBTRACT FROM THE NUMBER OF ZEROS
 1139: 1  08BA	60 0B					JZ	FSUB10
 1140: 1  08BC	40 09					JC	FSUB10
 1141: 1				;
 1142: 1  08BE	F5 30					MOV	FP_EXP,A			;SAVE THE NEW EXPONENT
 1143: 1				;
 1144: 1  08C0	51 62					ACALL	LEFT1				;SHIFT THE FP ACC
 1145: 1  08C2	75 2A 00				MOV	FP_CARRY,#0
 1146: 1  08C5	21 D0					AJMP	STORE_ALIGN_TEST_AND_EXIT
 1147: 1				;
 1148: 1  08C7	41 12		FSUB10:			AJMP	UNDERFLOW_AND_EXIT
 1149: 1				;
 1150: 1				;***************************************************************
 1151: 1				;
 1152: 1  08C9			FLOATING_COMP:	; Compare two floating point numbers
 1153: 1					; used for relational operations and is faster
 1154: 1					; than subtraction. ON RETURN, The carry is set
 1155: 1					; if ARG1 is > ARG2, else carry is not set
 1156: 1					; if ARG1 = ARG2, F0 gets set

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 22



 Line  I  Addr  Code            Source

 1157: 1				;
 1158: 1				;***************************************************************
 1159: 1				;
 1160: 1  08C9	51 D4					ACALL	MDES1				;SET UP THE REGISTERS
 1161: 1  08CB	E5 24					MOV	A,ARG_STACK
 1162: 1  08CD	24 0C					ADD	A,#FP_NUMBER_SIZE+FP_NUMBER_SIZE
 1163: 1  08CF	F5 24					MOV	ARG_STACK,A			;POP THE STACK TWICE, CLEAR THE CARR
       1			Y
 1164: 1  08D1	EE					MOV	A,R6				;CHECK OUT EXPONENTS
 1165: 1  08D2	C2 D5					CLR	F0
 1166: 1  08D4	C3		        		CLR     C
 1167: 1  08D5	9F					SUBB	A,R7
 1168: 1  08D6	60 0A					JZ	EXPONENTS_EQUAL
 1169: 1  08D8	40 03					JC	ARG1_EXP_IS_LARGER
 1170: 1				;
 1171: 1				; Now the ARG2 EXPONENT is > ARG1 EXPONENT
 1172: 1				;
 1173: 1  08DA			SIGNS_DIFFERENT:
 1174: 1				;
 1175: 1  08DA	EB					MOV	A,R3				;SEE IF SIGN OF ARG2 IS POSITIVE
 1176: 1  08DB	80 01					SJMP	ARG1_EXP_IS_LARGER1
 1177: 1				;
 1178: 1  08DD			ARG1_EXP_IS_LARGER:
 1179: 1				;
 1180: 1  08DD	EC					MOV	A,R4				;GET THE SIGN OF ARG1 EXPONENT
 1181: 1  08DE	60 01		ARG1_EXP_IS_LARGER1:	JZ	ARG1_EXP_IS_LARGER2
 1182: 1  08E0	B3					CPL	C
 1183: 1  08E1	22		ARG1_EXP_IS_LARGER2:	RET
 1184: 1				;
 1185: 1  08E2			EXPONENTS_EQUAL:
 1186: 1				;
 1187: 1				; First, test the sign, then the mantissa
 1188: 1				;
 1189: 1  08E2	BD 00 F5				CJNE	R5,#0,SIGNS_DIFFERENT
 1190: 1				;
 1191: 1  08E5			BOTH_PLUS:
 1192: 1				;
 1193: 1  08E5	7F 04					MOV	R7,#DIGIT			;POINT AT MS DIGIT
 1194: 1  08E7	18					DEC	R0
 1195: 1  08E8	18					DEC	R0
 1196: 1  08E9	18					DEC	R0
 1197: 1  08EA	19					DEC	R1
 1198: 1  08EB	19					DEC	R1
 1199: 1  08EC	19					DEC	R1
 1200: 1				;
 1201: 1				; Now do the compare
 1202: 1				;
 1203: 1  08ED	E6		CLOOP:			MOV	A,@R0
 1204: 1  08EE	FE					MOV	R6,A
 1205: 1  08EF	E7					MOV	A,@R1
 1206: 1  08F0	9E					SUBB	A,R6
 1207: 1  08F1	70 EA					JNZ	ARG1_EXP_IS_LARGER
 1208: 1  08F3	08					INC	R0
 1209: 1  08F4	09					INC	R1
 1210: 1  08F5	DF F6					DJNZ	R7,CLOOP
 1211: 1				;

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 23



 Line  I  Addr  Code            Source

 1212: 1				; If here, the numbers are the same, the carry is cleared
 1213: 1				;
 1214: 1  08F7	D2 D5					SETB	F0
 1215: 1  08F9	22					RET					;EXIT WITH EQUAL
 1216: 1				;
 1217: 1			;MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
 1218: 1			;
 1219: 1  08FA			FLOATING_MUL:							; Floating point multiply
 1220: 1			;
 1221: 1			;MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
 1222: 1			;
 1223: 1  08FA	51 D2					ACALL	MUL_DIV_EXP_AND_SIGN
 1224: 1				;
 1225: 1				; check for zero exponents
 1226: 1				;
 1227: 1  08FC	BE 00 02				CJNE	R6,#00,FMUL1			;ARG 2 EXP ZERO?
 1228: 1  08FF	41 18		FMUL0:			AJMP	ZERO_AND_EXIT
 1229: 1				;
 1230: 1				; calculate the exponent
 1231: 1				;
 1232: 1  0901	8D 2F		FMUL1:			MOV	FP_SIGN,R5			;SAVE THE SIGN, IN CASE OF FAILURE
 1233: 1				;
 1234: 1  0903	EF					MOV	A,R7
 1235: 1  0904	60 F9					JZ	FMUL0
 1236: 1  0906	2E					ADD	A,R6				;ADD THE EXPONENTS
 1237: 1  0907	20 E7 05				JB	ACC.7,FMUL_OVER
 1238: 1  090A	10 D7 06				JBC	CY,FMUL2			;SEE IF CARRY IS SET
 1239: 1				;
 1240: 1  090D	41 12					AJMP	UNDERFLOW_AND_EXIT
 1241: 1				;
 1242: 1  090F			FMUL_OVER:
 1243: 1				;
 1244: 1  090F	50 02					JNC	FMUL2				;OK IF SET
 1245: 1				;
 1246: 1  0911	41 01		FOV:			AJMP	OVERFLOW_AND_EXIT
 1247: 1				;
 1248: 1  0913	94 81		FMUL2:			SUBB	A,#129				;SUBTRACT THE EXPONENT BIAS
 1249: 1  0915	FE					MOV	R6,A				;SAVE IT FOR LATER
 1250: 1				;
 1251: 1				; Unpack and load R0
 1252: 1				;
 1253: 1  0916	31 EB					ACALL	UNPACK_R0
 1254: 1				;
 1255: 1				; Now set up for loop multiply
 1256: 1				;
 1257: 1  0918	7B 04					MOV	R3,#DIGIT
 1258: 1  091A	AC 01					MOV	R4,R1B0
 1259: 1				;
 1260: 1				;
 1261: 1				; Now, do the multiply and accumulate the product
 1262: 1				;
 1263: 1  091C	8C 01		FMUL3:			MOV	R1B0,R4
 1264: 1  091E	E7					MOV	A,@R1
 1265: 1  091F	FA					MOV	R2,A
 1266: 1  0920	51 98					ACALL	MUL_NIBBLE
 1267: 1				;

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 24



 Line  I  Addr  Code            Source

 1268: 1  0922	EA					MOV	A,R2
 1269: 1  0923	C4					SWAP	A
 1270: 1  0924	51 98					ACALL	MUL_NIBBLE
 1271: 1  0926	1C					DEC	R4
 1272: 1  0927	DB F3					DJNZ	R3,FMUL3
 1273: 1				;
 1274: 1				; Now, pack and restore the sign
 1275: 1				;
 1276: 1  0929	8E 30					MOV	FP_EXP,R6
 1277: 1  092B	8D 2F					MOV	FP_SIGN,R5
 1278: 1  092D	21 90					AJMP	PACK				;FINISH IT OFF
 1279: 1				;
 1280: 1				;DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
 1281: 1				;
 1282: 1  092F			FLOATING_DIV:
 1283: 1				;
 1284: 1				;DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
 1285: 1				;
 1286: 1  092F	51 D4					ACALL	MDES1
 1287: 1				;
 1288: 1				; Check the exponents
 1289: 1				;
 1290: 1  0931	8D 2F					MOV	FP_SIGN,R5			;SAVE THE SIGN
 1291: 1  0933	BF 00 06				CJNE	R7,#0,DIV0			;CLEARS THE CARRY
 1292: 1  0936	51 01					ACALL	OVERFLOW_AND_EXIT
 1293: 1  0938	E4					CLR	A
 1294: 1  0939	D2 E3					SETB	ACC.ZERO_DIVIDE
 1295: 1  093B	22					RET
 1296: 1				;
 1297: 1  093C	EE		DIV0:			MOV	A,R6				;GET EXPONENT
 1298: 1  093D	60 C0					JZ	FMUL1-2				;EXIT IF ZERO
 1299: 1  093F	9F					SUBB	A,R7				;DELTA EXPONENT
 1300: 1  0940	20 E7 04				JB	ACC.7,D_UNDER
 1301: 1  0943	50 04					JNC	DIV3
 1302: 1  0945	41 12					AJMP	UNDERFLOW_AND_EXIT
 1303: 1				;
 1304: 1  0947	50 C8		D_UNDER:		JNC	FOV
 1305: 1				;
 1306: 1  0949	24 81		DIV3:			ADD	A,#129				;CORRECTLY BIAS THE EXPONENT
 1307: 1  094B	F5 30					MOV	FP_EXP,A			;SAVE THE EXPONENT
 1308: 1  094D	51 E5					ACALL	LOADR1_MANTISSA			;LOAD THE DIVIDED
 1309: 1				;
 1310: 1  094F	7A 34					MOV	R2,#FP_ACCC			;SAVE LOCATION
 1311: 1  0951	AB 00					MOV	R3,R0B0				;SAVE POINTER IN R3
 1312: 1  0953	75 2A 00				MOV	FP_CARRY,#0			;ZERO CARRY BYTE
 1313: 1				;
 1314: 1  0956	7D FF		DIV4:			MOV	R5,#0FFH			;LOOP COUNT
 1315: 1  0958	D3					SETB	C
 1316: 1				;
 1317: 1  0959	8B 00		DIV5:			MOV	R0B0,R3				;RESTORE THE EXTERNAL POINTER
 1318: 1  095B	79 2E					MOV	R1,#FP_DIG78			;SET UP INTERNAL POINTER
 1319: 1  095D	7F 04					MOV	R7,#DIGIT			;LOOP COUNT
 1320: 1  095F	50 17					JNC	DIV7				;EXIT IF NO CARRY
 1321: 1				;
 1322: 1  0961	E6		DIV6:			MOV	A,@R0				;DO ACCUMLATION
 1323: 1  0962	FE					MOV	R6,A

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 25



 Line  I  Addr  Code            Source

 1324: 1  0963	E4					CLR	A
 1325: 1  0964	34 99					ADDC	A,#99H
 1326: 1  0966	9E					SUBB	A,R6
 1327: 1  0967	27					ADD	A,@R1
 1328: 1  0968	D4					DA	A
 1329: 1  0969	F7					MOV	@R1,A
 1330: 1  096A	18					DEC	R0
 1331: 1  096B	19					DEC	R1
 1332: 1  096C	DF F3					DJNZ	R7,DIV6				;LOOP
 1333: 1				;
 1334: 1  096E	0D					INC	R5				;SUBTRACT COUNTER
 1335: 1  096F	40 E8					JC	DIV5				;KEEP LOOPING IF CARRY
 1336: 1  0971	E7					MOV	A,@R1				;GET CARRY
 1337: 1  0972	94 01					SUBB	A,#1				;CARRY IS CLEARED
 1338: 1  0974	F7					MOV	@R1,A				;SAVE CARRY DIGIT
 1339: 1  0975	B3					CPL	C
 1340: 1  0976	80 E1					SJMP	DIV5				;LOOP
 1341: 1				;
 1342: 1				; Restore the result if carry was found
 1343: 1				;
 1344: 1  0978	11 78		DIV7:			ACALL	ADDLP				;ADD NUMBER BACK
 1345: 1  097A	77 00					MOV	@R1,#0				;CLEAR CARRY
 1346: 1  097C	8A 00					MOV	R0B0,R2				;GET SAVE COUNTER
 1347: 1  097E	A6 05					MOV	@R0,5				;SAVE COUNT BYTE
 1348: 1				;
 1349: 1  0980	0A					INC	R2				;ADJUST SAVE COUNTER
 1350: 1  0981	7F 01					MOV	R7,#1				;BUMP DIVIDEND
 1351: 1  0983	51 60					ACALL	LEFT
 1352: 1  0985	BA 3E CE				CJNE	R2,#FP_ACC8+2,DIV4
 1353: 1				;
 1354: 1  0988	D5 30 02				DJNZ	FP_EXP,DIV8
 1355: 1  098B	41 12					AJMP	UNDERFLOW_AND_EXIT
 1356: 1				;
 1357: 1  098D	75 2A 00	DIV8:			MOV	FP_CARRY,#0
 1358: 1				;
 1359: 1				;***************************************************************
 1360: 1				;
 1361: 1  0990			PACK:	; Pack the mantissa
 1362: 1				;
 1363: 1				;***************************************************************
 1364: 1				;
 1365: 1				; First, set up the pointers
 1366: 1				;
 1367: 1  0990	78 34					MOV	R0,#FP_ACCC
 1368: 1  0992	E6					MOV	A,@R0				;GET FP_ACCC
 1369: 1  0993	FE					MOV	R6,A				;SAVE FOR ZERO COUNT
 1370: 1  0994	60 03					JZ	PACK0				;JUMP OVER IF ZERO
 1371: 1  0996	31 DF					ACALL	INC_FP_EXP			;BUMP THE EXPONENT
 1372: 1  0998	18					DEC	R0
 1373: 1				;
 1374: 1  0999	08		PACK0:			INC	R0				;POINT AT FP_ACC1
 1375: 1				;
 1376: 1  099A	74 08		PACK1:			MOV	A,#8				;ADJUST NIBBLE POINTER
 1377: 1  099C	F9					MOV	R1,A
 1378: 1  099D	28					ADD	A,R0
 1379: 1  099E	F8					MOV	R0,A

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 26



 Line  I  Addr  Code            Source

 1380: 1						CMP	@R0,#5				;SEE IF ADJUSTING NEEDED
 1381+ 2  099F	B6 05 00	CJNE	@R0,#5,$+3
 1382: 1  09A2	40 13					JC	PACK3+1
 1383: 1				;
 1384: 1  09A4	D3		PACK2:			SETB	C
 1385: 1  09A5	E4					CLR	A
 1386: 1  09A6	18					DEC	R0
 1387: 1  09A7	36					ADDC	A,@R0
 1388: 1  09A8	D4					DA	A
 1389: 1  09A9	D6					XCHD	A,@R0				;SAVE THE VALUE
 1390: 1  09AA	30 E4 09				JNB	ACC.4,PACK3
 1391: 1  09AD	D9 F5					DJNZ	R1,PACK2
 1392: 1				;
 1393: 1  09AF	18					DEC	R0
 1394: 1  09B0	76 01					MOV	@R0,#1
 1395: 1  09B2	31 DF					ACALL	INC_FP_EXP
 1396: 1  09B4	80 06					SJMP	PACK4
 1397: 1				;
 1398: 1  09B6	19		PACK3:			DEC	R1
 1399: 1  09B7	E9					MOV	A,R1
 1400: 1  09B8	C3					CLR	C
 1401: 1  09B9	C8					XCH	A,R0
 1402: 1  09BA	98					SUBB	A,R0
 1403: 1  09BB	F8					MOV	R0,A
 1404: 1				;
 1405: 1  09BC	79 2B		PACK4:			MOV	R1,#FP_DIG12
 1406: 1				;
 1407: 1				; Now, pack
 1408: 1				;
 1409: 1  09BE	E6		PLOOP:			MOV	A,@R0
 1410: 1  09BF	C4					SWAP	A				;FLIP THE DIGITS
 1411: 1  09C0	08					INC	R0
 1412: 1  09C1	D6					XCHD	A,@R0
 1413: 1  09C2	42 06					ORL	6,A				;ACCUMULATE THE OR'ED DIGITS
 1414: 1  09C4	F7					MOV	@R1,A
 1415: 1  09C5	08					INC	R0
 1416: 1  09C6	09					INC	R1
 1417: 1  09C7	B9 2F F4				CJNE	R1,#FP_SIGN,PLOOP
 1418: 1  09CA	EE					MOV	A,R6
 1419: 1  09CB	70 03					JNZ	STORE_ALIGN_TEST_AND_EXIT
 1420: 1  09CD	75 30 00				MOV	FP_EXP,#0			;ZERO EXPONENT
 1421: 1				;
 1422: 1				;**************************************************************
 1423: 1				;
 1424: 1  09D0			STORE_ALIGN_TEST_AND_EXIT:					;Save the number align carry and exi
       1			t
 1425: 1				;
 1426: 1				;**************************************************************
 1427: 1				;
 1428: 1  09D0	51 CB					ACALL	LOAD_POINTERS
 1429: 1  09D2	89 24					MOV	ARG_STACK,R1			;SET UP THE NEW STACK
 1430: 1  09D4	78 30					MOV	R0,#FP_EXP
 1431: 1				;
 1432: 1				; Now load the numbers
 1433: 1				;
 1434: 1  09D6	E6		STORE2:			MOV	A,@R0

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 27



 Line  I  Addr  Code            Source

 1435: 1  09D7	F7					MOV	@R1,A				;SAVE THE NUMBER
 1436: 1  09D8	18					DEC	R0
 1437: 1  09D9	19					DEC	R1
 1438: 1  09DA	B8 2A F9				CJNE	R0,#FP_CARRY,STORE2
 1439: 1				;
 1440: 1  09DD	E4					CLR	A				;NO ERRORS
 1441: 1				;
 1442: 1  09DE	22		PRET:			RET					;EXIT
 1443: 1				;
 1444: 1  09DF			INC_FP_EXP:
 1445: 1				;
 1446: 1  09DF	05 30					INC	FP_EXP
 1447: 1  09E1	E5 30					MOV	A,FP_EXP
 1448: 1  09E3	70 F9					JNZ	PRET				;EXIT IF NOT ZERO
 1449: 1  09E5	D0 E0					POP	ACC				;WASTE THE CALLING STACK
 1450: 1  09E7	D0 E0					POP	ACC
 1451: 1  09E9	41 01					AJMP	OVERFLOW_AND_EXIT
 1452: 1				;
 1453: 1			;***********************************************************************
 1454: 1			;
 1455: 1  09EB			UNPACK_R0:	; Unpack BCD digits and load into nibble locations
 1456: 1			;
 1457: 1			;***********************************************************************
 1458: 1				;
 1459: 1  09EB	C0 01					PUSH	R1B0
 1460: 1  09ED	79 32					MOV	R1,#FP_NIB8
 1461: 1				;
 1462: 1  09EF	E6		ULOOP:			MOV	A,@R0
 1463: 1  09F0	54 0F					ANL	A,#0FH
 1464: 1  09F2	F7					MOV	@R1,A				;SAVE THE NIBBLE
 1465: 1  09F3	E6					MOV	A,@R0
 1466: 1  09F4	C4					SWAP	A
 1467: 1  09F5	54 0F					ANL	A,#0FH
 1468: 1  09F7	19					DEC	R1
 1469: 1  09F8	F7					MOV	@R1,A				;SAVE THE NIBBLE AGAIN
 1470: 1  09F9	18					DEC	R0
 1471: 1  09FA	19					DEC	R1
 1472: 1  09FB	B9 2A F1				CJNE	R1,#FP_NIB1-1,ULOOP
 1473: 1				;
 1474: 1  09FE	D0 01					POP	R1B0
 1475: 1				;
 1476: 1  0A00	22		LOAD7:			RET
 1477: 1				;
 1478: 1				;**************************************************************
 1479: 1				;
 1480: 1  0A01			OVERFLOW_AND_EXIT:	;LOAD 99999999 E+127,  SET OV BIT, AND EXIT
 1481: 1				;
 1482: 1				;**************************************************************
 1483: 1				;
 1484: 1  0A01	78 2E					MOV	R0,#FP_DIG78
 1485: 1  0A03	74 99					MOV	A,#99H
 1486: 1				;
 1487: 1  0A05	F6		OVE1:			MOV	@R0,A
 1488: 1  0A06	18					DEC	R0
 1489: 1  0A07	B8 2A FB				CJNE	R0,#FP_CARRY,OVE1
 1490: 1				;

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 28



 Line  I  Addr  Code            Source

 1491: 1  0A0A	75 30 FF				MOV	FP_EXP,#0FFH
 1492: 1  0A0D	31 D0					ACALL	STORE_ALIGN_TEST_AND_EXIT
 1493: 1				;
 1494: 1  0A0F	D2 E1					SETB	ACC.OVERFLOW
 1495: 1  0A11	22					RET
 1496: 1				;
 1497: 1				;**************************************************************
 1498: 1				;
 1499: 1  0A12			UNDERFLOW_AND_EXIT:	;LOAD 0, SET UF BIT, AND EXIT
 1500: 1				;
 1501: 1				;**************************************************************
 1502: 1				;
 1503: 1  0A12	51 18					ACALL	ZERO_AND_EXIT
 1504: 1  0A14	E4					CLR		A
 1505: 1  0A15	D2 E0					SETB	ACC.UNDERFLOW
 1506: 1  0A17	22					RET
 1507: 1				;
 1508: 1				;**************************************************************
 1509: 1				;
 1510: 1  0A18			ZERO_AND_EXIT:		;LOAD 0, SET ZERO BIT, AND EXIT
 1511: 1				;
 1512: 1				;**************************************************************
 1513: 1				;
 1514: 1  0A18	51 1F					ACALL	FP_CLEAR
 1515: 1  0A1A	31 D0					ACALL	STORE_ALIGN_TEST_AND_EXIT
 1516: 1  0A1C	D2 E2					SETB	ACC.ZERO
 1517: 1  0A1E	22					RET					;EXIT
 1518: 1				;
 1519: 1				;**************************************************************
 1520: 1				;
 1521: 1  0A1F			FP_CLEAR:
 1522: 1				;
 1523: 1				; Clear internal storage
 1524: 1				;
 1525: 1				;**************************************************************
 1526: 1				;
 1527: 1  0A1F	E4					CLR	A
 1528: 1  0A20	78 3D					MOV	R0,#FP_ACC8+1
 1529: 1				;
 1530: 1  0A22	F6		FPC1:			MOV	@R0,A
 1531: 1  0A23	18					DEC	R0
 1532: 1  0A24	B8 29 FB				CJNE	R0,#FP_TEMP,FPC1
 1533: 1  0A27	22					RET
 1534: 1				;
 1535: 1				;**************************************************************
 1536: 1				;
 1537: 1  0A28			RIGHT:	; Shift ACCUMULATOR RIGHT the number of nibbles in R7
 1538: 1				; Save the shifted values in R4 if SAVE_ROUND is set
 1539: 1				;
 1540: 1				;**************************************************************
 1541: 1				;
 1542: 1  0A28	7C 00					MOV	R4,#0				;IN CASE OF NO SHIFT
 1543: 1				;
 1544: 1  0A2A	C3		RIGHT1:			CLR	C
 1545: 1  0A2B	EF					MOV	A,R7				;GET THE DIGITS TO SHIFT
 1546: 1  0A2C	60 22					JZ	RIGHT5-1			;EXIT IF ZERO

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 29



 Line  I  Addr  Code            Source

 1547: 1  0A2E	94 02					SUBB	A,#2				;TWO TO DO?
 1548: 1  0A30	50 1F					JNC	RIGHT5				;SHIFT TWO NIBBLES
 1549: 1				;
 1550: 1				; Swap one nibble then exit
 1551: 1				;
 1552: 1  0A32	C0 00		RIGHT3:			PUSH	R0B0				;SAVE POINTER REGISTER
 1553: 1  0A34	C0 01					PUSH	R1B0
 1554: 1				;
 1555: 1  0A36	79 2E					MOV	R1,#FP_DIG78			;LOAD THE POINTERS
 1556: 1  0A38	78 2D					MOV	R0,#FP_DIG56
 1557: 1  0A3A	EC					MOV	A,R4				;GET THE OVERFLOW REGISTER
 1558: 1  0A3B	D7					XCHD	A,@R1				;GET DIGIT 8
 1559: 1  0A3C	C4					SWAP	A				;FLIP FOR LOAD
 1560: 1  0A3D	FC					MOV	R4,A
 1561: 1				;
 1562: 1  0A3E	E7		RIGHTL:			MOV	A,@R1				;GET THE LOW ORDER BYTE
 1563: 1  0A3F	D6					XCHD	A,@R0				;SWAP NIBBLES
 1564: 1  0A40	C4					SWAP	A				;FLIP FOR STORE
 1565: 1  0A41	F7					MOV	@R1,A				;SAVE THE DIGITS
 1566: 1  0A42	18					DEC	R0				;BUMP THE POINTERS
 1567: 1  0A43	19					DEC	R1
 1568: 1  0A44	B9 2A F7				CJNE	R1,#FP_DIG12-1,RIGHTL	;LOOP
 1569: 1				;
 1570: 1  0A47	E7					MOV	A,@R1				;ACC = CH8
 1571: 1  0A48	C4					SWAP	A				;ACC = 8CH
 1572: 1  0A49	54 0F					ANL	A,#0FH				;ACC = 0CH
 1573: 1  0A4B	F7					MOV	@R1,A				;CARRY DONE
 1574: 1  0A4C	D0 01					POP	R1B0				;EXIT
 1575: 1  0A4E	D0 00					POP	R0B0				;RESTORE REGISTER
 1576: 1  0A50	22					RET
 1577: 1				;
 1578: 1  0A51	FF		RIGHT5:			MOV	R7,A				;SAVE THE NEW SHIFT NUMBER
 1579: 1  0A52	E4					CLR	A
 1580: 1  0A53	C5 2A					XCH	A,FP_CARRY			;SWAP THE NIBBLES
 1581: 1  0A55	C5 2B					XCH	A,FP_DIG12
 1582: 1  0A57	C5 2C					XCH	A,FP_DIG34
 1583: 1  0A59	C5 2D					XCH	A,FP_DIG56
 1584: 1  0A5B	C5 2E					XCH	A,FP_DIG78
 1585: 1  0A5D	FC					MOV	R4,A				;SAVE THE LAST DIGIT SHIFTED
 1586: 1  0A5E	80 CB					SJMP	RIGHT1+1
 1587: 1				;
 1588: 1				;***************************************************************
 1589: 1				;
 1590: 1  0A60			LEFT:	; Shift ACCUMULATOR LEFT the number of nibbles in R7
 1591: 1				;
 1592: 1				;***************************************************************
 1593: 1				;
 1594: 1  0A60	7C 00					MOV	R4,#00H				;CLEAR FOR SOME ENTRYS
 1595: 1				;
 1596: 1  0A62	C3		LEFT1:			CLR	C
 1597: 1  0A63	EF					MOV	A,R7				;GET SHIFT VALUE
 1598: 1  0A64	60 22					JZ	LEFT5-1				;EXIT IF ZERO
 1599: 1  0A66	94 02					SUBB	A,#2				;SEE HOW MANY BYTES TO SHIFT
 1600: 1  0A68	50 1F					JNC	LEFT5
 1601: 1				;
 1602: 1  0A6A	C0 00		LEFT3:			PUSH	R0B0				;SAVE POINTER

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 30



 Line  I  Addr  Code            Source

 1603: 1  0A6C	C0 01					PUSH	R1B0
 1604: 1  0A6E	78 2A					MOV	R0,#FP_CARRY
 1605: 1  0A70	79 2B					MOV	R1,#FP_DIG12
 1606: 1				;
 1607: 1  0A72	E6					MOV	A,@R0				;ACC=CHCL
 1608: 1  0A73	C4					SWAP	A				;ACC = CLCH
 1609: 1  0A74	F6					MOV	@R0,A				;ACC = CLCH, @R0 = CLCH
 1610: 1				;
 1611: 1  0A75	E7		LEFTL:			MOV	A,@R1				;DIG 12
 1612: 1  0A76	C4					SWAP	A				;DIG 21
 1613: 1  0A77	D6					XCHD	A,@R0
 1614: 1  0A78	F7					MOV	@R1,A				;SAVE IT
 1615: 1  0A79	08					INC	R0				;BUMP POINTERS
 1616: 1  0A7A	09					INC	R1
 1617: 1  0A7B	B8 2E F7				CJNE	R0,#FP_DIG78,LEFTL
 1618: 1				;
 1619: 1  0A7E	EC					MOV	A,R4
 1620: 1  0A7F	C4					SWAP	A
 1621: 1  0A80	D6					XCHD	A,@R0
 1622: 1  0A81	54 F0					ANL	A,#0F0H
 1623: 1  0A83	FC					MOV	R4,A
 1624: 1				;
 1625: 1  0A84	D0 01					POP	R1B0
 1626: 1  0A86	D0 00					POP	R0B0				;RESTORE
 1627: 1  0A88	22					RET					;DONE
 1628: 1				;
 1629: 1  0A89	FF		LEFT5:			MOV	R7,A				;RESTORE COUNT
 1630: 1  0A8A	E4					CLR	A
 1631: 1  0A8B	CC					XCH	A,R4				;GET THE RESTORATION BYTE
 1632: 1  0A8C	C5 2E					XCH	A,FP_DIG78			;DO THE SWAP
 1633: 1  0A8E	C5 2D					XCH	A,FP_DIG56
 1634: 1  0A90	C5 2C					XCH	A,FP_DIG34
 1635: 1  0A92	C5 2B					XCH	A,FP_DIG12
 1636: 1  0A94	C5 2A					XCH	A,FP_CARRY
 1637: 1  0A96	80 CB					SJMP	LEFT1+1
 1638: 1				;
 1639: 1  0A98			MUL_NIBBLE:
 1640: 1				;
 1641: 1				; Multiply the nibble in R7 by the FP_NIB locations
 1642: 1				; accumulate the product in FP_ACC
 1643: 1				;
 1644: 1				; Set up the pointers for multiplication
 1645: 1				;
 1646: 1  0A98	54 0F					ANL	A,#0FH				;STRIP OFF MS NIBBLE
 1647: 1  0A9A	FF					MOV	R7,A
 1648: 1  0A9B	78 3C					MOV	R0,#FP_ACC8
 1649: 1  0A9D	79 32					MOV	R1,#FP_NIB8
 1650: 1  0A9F	E4					CLR	A
 1651: 1  0AA0	F5 33					MOV	FP_ACCX,A
 1652: 1				;
 1653: 1  0AA2	18		MNLOOP:			DEC	R0				;BUMP POINTER TO PROPAGATE CARRY
 1654: 1  0AA3	26					ADD	A,@R0				;ATTEMPT TO FORCE CARRY
 1655: 1  0AA4	D4					DA	A				;BCD ADJUST
 1656: 1  0AA5	30 E4 03				JNB	ACC.4,MNL0			;DON'T ADJUST IF NO NEED
 1657: 1  0AA8	18					DEC	R0				;PROPAGATE CARRY TO THE NEXT DIGIT
 1658: 1  0AA9	06					INC	@R0				;DO THE ADJUSTING

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 31



 Line  I  Addr  Code            Source

 1659: 1  0AAA	08					INC	R0				;RESTORE R0
 1660: 1				;
 1661: 1  0AAB	D6		MNL0:			XCHD	A,@R0				;RESTORE INITIAL NUMBER
 1662: 1  0AAC	8F F0					MOV	B,R7				;GET THE NUBBLE TO MULTIPLY
 1663: 1  0AAE	E7					MOV	A,@R1				;GET THE OTHER NIBBLE
 1664: 1  0AAF	A4					MUL	AB					;DO THE MULTIPLY
 1665: 1  0AB0	75 F0 0A				MOV	B,#10				;NOW BCD ADJUST
 1666: 1  0AB3	84					DIV	AB
 1667: 1  0AB4	C5 F0					XCH	A,B				;GET THE REMAINDER
 1668: 1  0AB6	26					ADD	A,@R0				;PROPAGATE THE PARTIAL PRODUCTS
 1669: 1  0AB7	D4					DA	A				;BCD ADJUST
 1670: 1  0AB8	30 E4 02				JNB	ACC.4,MNL1			;PROPAGATE PARTIAL PRODUCT CARRY
 1671: 1  0ABB	05 F0					INC	B
 1672: 1				;
 1673: 1  0ABD	08		MNL1:			INC	R0
 1674: 1  0ABE	D6					XCHD	A,@R0				;SAVE THE NEW PRODUCT
 1675: 1  0ABF	18					DEC	R0
 1676: 1  0AC0	E5 F0					MOV	A,B				;GET BACK THE QUOTIENT
 1677: 1  0AC2	19					DEC	R1
 1678: 1  0AC3	B9 2A DC				CJNE	R1,#FP_NIB1-1,MNLOOP
 1679: 1				;
 1680: 1  0AC6	25 33					ADD	A,FP_ACCX			;GET THE OVERFLOW
 1681: 1  0AC8	D4					DA	A				;ADJUST
 1682: 1  0AC9	F6					MOV	@R0,A				;SAVE IT
 1683: 1  0ACA	22					RET					;EXIT
 1684: 1				;
 1685: 1				;***************************************************************
 1686: 1				;
 1687: 1  0ACB			LOAD_POINTERS:	; Load the ARG_STACK into R0 and bump R1
 1688: 1				;
 1689: 1				;***************************************************************
 1690: 1				;
 1691: 1  0ACB	A8 24					MOV	R0,ARG_STACK
 1692: 1  0ACD	74 06					MOV	A,#FP_NUMBER_SIZE
 1693: 1  0ACF	28					ADD	A,R0
 1694: 1  0AD0	F9					MOV	R1,A
 1695: 1  0AD1	22					RET
 1696: 1				;
 1697: 1				;***************************************************************
 1698: 1				;
 1699: 1  0AD2			MUL_DIV_EXP_AND_SIGN:
 1700: 1				;
 1701: 1				; Load the sign into R7, R6. R5 gets the sign for
 1702: 1				; multiply and divide.
 1703: 1				;
 1704: 1				;***************************************************************
 1705: 1				;
 1706: 1  0AD2	51 1F					ACALL	FP_CLEAR			;CLEAR INTERNAL MEMORY
 1707: 1				;
 1708: 1  0AD4	51 CB		MDES1:			ACALL	LOAD_POINTERS			;LOAD REGISTERS
 1709: 1  0AD6	E6					MOV	A,@R0				;ARG 1 EXP
 1710: 1  0AD7	FF					MOV	R7,A				;SAVED IN R7
 1711: 1  0AD8	E7					MOV	A,@R1				;ARG 2 EXP
 1712: 1  0AD9	FE					MOV	R6,A				;SAVED IN R6
 1713: 1  0ADA	18					DEC	R0				;BUMP POINTERS TO SIGN
 1714: 1  0ADB	19					DEC	R1

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 32



 Line  I  Addr  Code            Source

 1715: 1  0ADC	E6					MOV	A,@R0				;GET THE SIGN
 1716: 1  0ADD	FC					MOV	R4,A				;SIGN OF ARG1
 1717: 1  0ADE	E7					MOV	A,@R1				;GET SIGN OF NEXT ARG
 1718: 1  0ADF	FB					MOV	R3,A				;SIGN OF ARG2
 1719: 1  0AE0	6C					XRL	A,R4				;ACC GETS THE NEW SIGN
 1720: 1  0AE1	FD					MOV	R5,A				;R5 GETS THE NEW SIGN
 1721: 1				;
 1722: 1				; Bump the pointers to point at the LS digit
 1723: 1				;
 1724: 1  0AE2	18					DEC	R0
 1725: 1  0AE3	19					DEC	R1
 1726: 1				;
 1727: 1  0AE4	22					RET
 1728: 1				;
 1729: 1				;***************************************************************
 1730: 1				;
 1731: 1  0AE5			LOADR1_MANTISSA:
 1732: 1				;
 1733: 1				; Load the mantissa of R0 into FP_Digits
 1734: 1				;
 1735: 1				;***************************************************************
 1736: 1				;
 1737: 1  0AE5	C0 00					PUSH	R0B0				;SAVE REGISTER 1
 1738: 1  0AE7	78 2E					MOV	R0,#FP_DIG78			;SET UP THE POINTER
 1739: 1				;
 1740: 1  0AE9	E7		LOADR1:			MOV	A,@R1
 1741: 1  0AEA	F6					MOV	@R0,A
 1742: 1  0AEB	19					DEC	R1
 1743: 1  0AEC	18					DEC	R0
 1744: 1  0AED	B8 2A F9				CJNE	R0,#FP_CARRY,LOADR1
 1745: 1				;
 1746: 1  0AF0	D0 00					POP	R0B0
 1747: 1  0AF2	22					RET
 1748: 1				;
 1749: 1				;***************************************************************
 1750: 1				;
 1751: 1  0AF3			HEXSCAN:	; Scan a string to determine if it is a hex number
 1752: 1					; set carry if hex, else carry = 0
 1753: 1				;
 1754: 1				;***************************************************************
 1755: 1				;
 1756: 1  0AF3	71 B5					ACALL	GET_R1_CHARACTER
 1757: 1				;
 1758: 1  0AF5	E7		HEXSC1:			MOV	A,@R1				;GET THE CHARACTER
 1759: 1  0AF6	B1 7E					ACALL	DIGIT_CHECK			;SEE IF A DIGIT
 1760: 1  0AF8	40 0E					JC	HS1				;CONTINUE IF A DIGIT
 1761: 1  0AFA	71 0B					ACALL	HEX_CHECK			;SEE IF HEX
 1762: 1  0AFC	40 0A					JC	HS1
 1763: 1				;
 1764: 1  0AFE	C2 E5					CLR	ACC.5				;NO LOWER CASE
 1765: 1  0B00	B4 48 03				CJNE	A,#'H',HEXDON
 1766: 1  0B03	D3					SETB	C
 1767: 1  0B04	80 01					SJMP	HEXDO1				;NUMBER IS VALID HEX, MAYBE
 1768: 1				;
 1769: 1  0B06	C3		HEXDON:			CLR	C
 1770: 1				;

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 33



 Line  I  Addr  Code            Source

 1771: 1  0B07	22		HEXDO1:			RET
 1772: 1				;
 1773: 1  0B08	09		HS1:			INC	R1				;BUMP TO NEXT CHARACTER
 1774: 1  0B09	80 EA					SJMP	HEXSC1				;LOOP
 1775: 1				;
 1776: 1  0B0B			HEX_CHECK:	;CHECK FOR A VALID ASCII HEX, SET CARRY IF FOUND
 1777: 1				;
 1778: 1  0B0B	C2 E5					CLR	ACC.5				;WASTE LOWER CASE
 1779: 1						CMP	A,#'F'+1			;SEE IF F OR LESS
 1780+ 2  0B0D	B4 47 00	CJNE	A,#'F'+1,$+3
 1781: 1  0B10	40 01					JC	HC1
 1782: 1  0B12	22					RET
 1783: 1				;
 1784: 1  0B13			HC1:			CMP	A,#'A'				;SEE IF A OR GREATER
 1785+ 2  0B13	B4 41 00	CJNE	A,#'A',$+3
 1786: 1  0B16	B3					CPL	C
 1787: 1  0B17	22					RET
 1788: 1				;
 1789: 1				;***************************************************************
 1790: 1				;
 1791: 1  0B18			FLOATING_POINT_INPUT:	; Input a floating point number pointed to by R1
 1792: 1				;
 1793: 1				;***************************************************************
 1794: 1				;
 1795: 1  0B18	51 1F					ACALL	FP_CLEAR			;CLEAR EVERYTHING
 1796: 1  0B1A	71 B5					ACALL	GET_R1_CHARACTER
 1797: 1  0B1C	71 BB					ACALL	PLUS_MINUS_TEST
 1798: 1  0B1E	92 78					MOV	MSIGN,C				;SAVE THE MANTISSA SIGN
 1799: 1				;
 1800: 1				; Now, set up for input loop
 1801: 1				;
 1802: 1  0B20	78 34					MOV	R0,#FP_ACCC
 1803: 1  0B22	7E 7F					MOV	R6,#7FH				;BASE EXPONENT
 1804: 1  0B24	D2 D5					SETB	F0				;SET INITIAL FLAG
 1805: 1				;
 1806: 1  0B26	B1 7C		INLOOP:			ACALL	GET_DIGIT_CHECK
 1807: 1  0B28	50 07					JNC	GTEST				;IF NOT A CHARACTER, WHAT IS IT?
 1808: 1  0B2A	54 0F					ANL	A,#0FH				;STRIP ASCII
 1809: 1  0B2C	71 8E					ACALL	STDIG				;STORE THE DIGITS
 1810: 1				;
 1811: 1  0B2E	09		INLPIK:			INC	R1				;BUMP POINTER FOR LOOP
 1812: 1  0B2F	80 F5					SJMP	INLOOP				;LOOP FOR INPUT
 1813: 1				;
 1814: 1  0B31	B4 2E 0C	GTEST:			CJNE	A,#'.',GT1			;SEE IF A RADIX
 1815: 1  0B34	20 51 63				JB	FOUND_RADIX,INERR
 1816: 1  0B37	D2 51					SETB	FOUND_RADIX
 1817: 1  0B39	B8 34 F2				CJNE	R0,#FP_ACCC,INLPIK
 1818: 1  0B3C	D2 52					SETB	FIRST_RADIX			;SET IF FIRST RADIX
 1819: 1  0B3E	80 EE					SJMP	INLPIK				;GET ADDITIONAL DIGITS
 1820: 1				;
 1821: 1  0B40	20 D5 57	GT1:			JB	F0,INERR			;ERROR IF NOT CLEARED
 1822: 1  0B43	B4 65 02				CJNE	A,#'e',GT11			;CHECK FOR LOWER CASE
 1823: 1  0B46	80 03					SJMP	GT12
 1824: 1  0B48	B4 45 33	GT11:			CJNE	A,#'E',FINISH_UP
 1825: 1  0B4B	71 B4		GT12:			ACALL	INC_AND_GET_R1_CHARACTER
 1826: 1  0B4D	71 BB					ACALL	PLUS_MINUS_TEST

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 34



 Line  I  Addr  Code            Source

 1827: 1  0B4F	92 50					MOV	XSIGN,C				;SAVE SIGN STATUS
 1828: 1  0B51	B1 7C					ACALL	GET_DIGIT_CHECK
 1829: 1  0B53	50 45					JNC	INERR
 1830: 1				;
 1831: 1  0B55	54 0F					ANL	A,#0FH				;STRIP ASCII BIAS OFF THE CHARACTER
 1832: 1  0B57	FD					MOV	R5,A				;SAVE THE CHARACTER IN R5
 1833: 1				;
 1834: 1  0B58	09		GT2:			INC	R1
 1835: 1  0B59	B1 7C					ACALL	GET_DIGIT_CHECK
 1836: 1  0B5B	50 0D					JNC	FINISH1
 1837: 1  0B5D	54 0F					ANL	A,#0FH				;STRIP OFF BIAS
 1838: 1  0B5F	CD					XCH	A,R5				;GET THE LAST DIGIT
 1839: 1  0B60	75 F0 0A				MOV	B,#10				;MULTIPLY BY TEN
 1840: 1  0B63	A4					MUL	AB
 1841: 1  0B64	2D					ADD	A,R5				;ADD TO ORIGINAL VALUE
 1842: 1  0B65	FD					MOV	R5,A				;SAVE IN R5
 1843: 1  0B66	50 F0					JNC	GT2					;LOOP IF NO CARRY
 1844: 1  0B68	7D FF					MOV	R5,#0FFH			;FORCE AN ERROR
 1845: 1				;
 1846: 1  0B6A	ED		FINISH1:		MOV	A,R5				;GET THE SIGN
 1847: 1  0B6B	30 50 09				JNB	XSIGN,POSNUM			;SEE IF EXPONENT IS POS OR NEG
 1848: 1  0B6E	C3					CLR	C
 1849: 1  0B6F	9E					SUBB	A,R6
 1850: 1  0B70	F4					CPL	A
 1851: 1  0B71	04					INC	A
 1852: 1  0B72	40 09					JC	FINISH2
 1853: 1  0B74	74 01					MOV	A,#01H
 1854: 1  0B76	22					RET
 1855: 1				;
 1856: 1  0B77	2E		POSNUM:			ADD	A,R6				;ADD TO EXPONENT
 1857: 1  0B78	50 03					JNC	FINISH2
 1858: 1				;
 1859: 1  0B7A	74 02		POSNM1:			MOV	A,#02H
 1860: 1  0B7C	22					RET
 1861: 1				;
 1862: 1  0B7D	CE		FINISH2:		XCH	A,R6				;SAVE THE EXPONENT
 1863: 1				;
 1864: 1  0B7E			FINISH_UP:
 1865: 1				;
 1866: 1  0B7E	8E 30					MOV	FP_EXP,R6			;SAVE EXPONENT
 1867: 1  0B80	B8 34 02				CJNE	R0,#FP_ACCC,FINISH_UP1
 1868: 1  0B83	51 1F					ACALL	FP_CLEAR			;CLEAR THE MEMORY IF 0
 1869: 1  0B85	E5 24		FINISH_UP1:		MOV	A,ARG_STACK			;GET THE ARG STACK
 1870: 1  0B87	C3					CLR	C
 1871: 1  0B88	94 0C					SUBB	A,#FP_NUMBER_SIZE+FP_NUMBER_SIZE
 1872: 1  0B8A	F5 24					MOV	ARG_STACK,A			;ADJUST FOR STORE
 1873: 1  0B8C	21 90					AJMP	PACK
 1874: 1				;
 1875: 1  0B8E	C2 D5		STDIG:			CLR	F0				;CLEAR INITIAL DESIGNATOR
 1876: 1  0B90	70 0B					JNZ	STDIG1				;CONTINUE IF NOT ZERO
 1877: 1  0B92	B8 34 08				CJNE	R0,#FP_ACCC,STDIG1
 1878: 1  0B95	30 52 04				JNB	FIRST_RADIX,RET_X
 1879: 1				;
 1880: 1  0B98	DE 02		DECX:			DJNZ	R6,RET_X
 1881: 1				;
 1882: 1  0B9A	74 FF		INERR:			MOV	A,#0FFH

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 35



 Line  I  Addr  Code            Source

 1883: 1				;
 1884: 1  0B9C	22		RET_X:			RET
 1885: 1				;
 1886: 1  0B9D	20 53 02	STDIG1:			JB	DONE_LOAD,FRTEST
 1887: 1  0BA0	C2 52					CLR	FIRST_RADIX
 1888: 1				;
 1889: 1  0BA2	20 52 F3	FRTEST:			JB	FIRST_RADIX,DECX
 1890: 1				;
 1891: 1  0BA5	20 51 01	FDTEST:			JB	FOUND_RADIX,FDT1
 1892: 1  0BA8	0E					INC	R6
 1893: 1				;
 1894: 1  0BA9	20 53 F0	FDT1:			JB	DONE_LOAD,RET_X
 1895: 1  0BAC	B8 3D 02				CJNE	R0,#FP_ACC8+1,FDT2
 1896: 1  0BAF	D2 53					SETB	DONE_LOAD
 1897: 1				;
 1898: 1  0BB1	F6		FDT2:			MOV	@R0,A				;SAVE THE STRIPPED ACCUMULATOR
 1899: 1  0BB2	08					INC	R0				;BUMP THE POINTER
 1900: 1  0BB3	22					RET					;EXIT
 1901: 1				;
 1902: 1				;***************************************************************
 1903: 1				;
 1904: 1				; I/O utilities
 1905: 1				;
 1906: 1				;***************************************************************
 1907: 1				;
 1908: 1  0BB4			INC_AND_GET_R1_CHARACTER:
 1909: 1				;
 1910: 1  0BB4	09					INC	R1
 1911: 1				;
 1912: 1  0BB5			GET_R1_CHARACTER:
 1913: 1				;
 1914: 1  0BB5	E7					MOV	A,@R1				;GET THE CHARACTER
 1915: 1  0BB6	B4 20 0C				CJNE	A,#' ',PMT1			;SEE IF A SPACE
 1916: 1				;
 1917: 1				; Kill spaces
 1918: 1				;
 1919: 1  0BB9	80 F9					SJMP	INC_AND_GET_R1_CHARACTER
 1920: 1				;
 1921: 1  0BBB			PLUS_MINUS_TEST:
 1922: 1				;
 1923: 1  0BBB	B4 2B 02				CJNE	A,#'+',PMT0
 1924: 1  0BBE	80 04					SJMP	PMT3
 1925: 1  0BC0	B4 2D 02	PMT0:			CJNE	A,#'-',PMT1
 1926: 1				;
 1927: 1  0BC3	D3		PMT2:			SETB	C
 1928: 1				;
 1929: 1  0BC4	09		PMT3:			INC	R1
 1930: 1				;
 1931: 1  0BC5	22		PMT1:			RET
 1932: 1				;
 1933: 1				;***************************************************************
 1934: 1				;
 1935: 1  0BC6			FLOATING_POINT_OUTPUT:	; Output the number, format is in location 25
 1936: 1				;
 1937: 1				; IF FORMAT = 00 - FREE FLOATING
 1938: 1				;           = FX - EXPONENTIAL (X IS THE NUMBER OF SIG DIGITS)

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 36



 Line  I  Addr  Code            Source

 1939: 1				;           = NX - N = NUM BEFORE RADIX, X = NUM AFTER RADIX
 1940: 1				;                  N + X = 8 MAX
 1941: 1				;
 1942: 1				;***************************************************************
 1943: 1				;
 1944: 1  0BC6	51 D4					ACALL	MDES1				;GET THE NUMBER TO OUTPUT, R0 IS POI
       1			NTER
 1945: 1  0BC8	11 28					ACALL	POP_AND_EXIT			;OUTPUT POPS THE STACK
 1946: 1  0BCA	EF					MOV	A,R7
 1947: 1  0BCB	FE					MOV	R6,A				;PUT THE EXPONENT IN R6
 1948: 1  0BCC	31 EB					ACALL	UNPACK_R0			;UNPACK THE NUMBER
 1949: 1  0BCE	78 2B					MOV	R0,#FP_NIB1			;POINT AT THE NUMBER
 1950: 1  0BD0	E5 25					MOV	A,FORMAT			;GET THE FORMAT
 1951: 1  0BD2	FB					MOV	R3,A				;SAVE IN CASE OF EXP FORMAT
 1952: 1  0BD3	60 49					JZ	FREE				;FREE FLOATING?
 1953: 1						CMP	A,#0F0H				;SEE IF EXPONENTIAL
 1954+ 2  0BD5	B4 F0 00	CJNE	A,#0F0H,$+3
 1955: 1  0BD8	50 73					JNC	EXPOUT
 1956: 1				;
 1957: 1				; If here, must be integer USING format
 1958: 1				;
 1959: 1  0BDA	EE					MOV	A,R6				;GET THE EXPONENT
 1960: 1  0BDB	70 02					JNZ	FPO1
 1961: 1  0BDD	7E 80					MOV	R6,#80H
 1962: 1  0BDF	EB		FPO1:			MOV	A,R3				;GET THE FORMAT
 1963: 1  0BE0	C4					SWAP	A				;SPLIT INTEGER AND FRACTION
 1964: 1  0BE1	54 0F					ANL	A,#0FH
 1965: 1  0BE3	FA					MOV	R2,A				;SAVE INTEGER
 1966: 1  0BE4	91 B3					ACALL	NUM_LT				;GET THE NUMBER OF INTEGERS
 1967: 1  0BE6	CA					XCH	A,R2				;FLIP FOR SUBB
 1968: 1  0BE7	C3					CLR	C
 1969: 1  0BE8	9A					SUBB	A,R2
 1970: 1  0BE9	FF					MOV	R7,A
 1971: 1  0BEA	50 06					JNC	FPO2
 1972: 1  0BEC	7D 3F					MOV	R5,#'?'				;OUTPUT A QUESTION MARK
 1973: 1  0BEE	91 E8					ACALL	SOUT1				;NUMBER IS TOO LARGE FOR FORMAT
 1974: 1  0BF0	81 1E					AJMP	FREE
 1975: 1  0BF2	BA 00 07	FPO2:			CJNE	R2,#00,USING0			;SEE IF ZERO
 1976: 1  0BF5	1F					DEC	R7
 1977: 1  0BF6	91 D5					ACALL	SS7
 1978: 1  0BF8	91 E2					ACALL	ZOUT				;OUTPUT A ZERO
 1979: 1  0BFA	80 06					SJMP	USING1
 1980: 1				;
 1981: 1  0BFC	91 D5		USING0:			ACALL	SS7				;OUTPUT SPACES, IF NEED TO
 1982: 1  0BFE	EA					MOV	A,R2				;OUTPUT DIGITS
 1983: 1  0BFF	FF					MOV	R7,A
 1984: 1  0C00	91 97					ACALL	OUTR0
 1985: 1				;
 1986: 1  0C02	EB		USING1:			MOV	A,R3
 1987: 1  0C03	54 0F					ANL	A,#0FH				;GET THE NUMBER RIGHT OF DP
 1988: 1  0C05	FA					MOV	R2,A				;SAVE IT
 1989: 1  0C06	60 BD					JZ	PMT1				;EXIT IF ZERO
 1990: 1  0C08	91 DE					ACALL	ROUT				;OUTPUT DP
 1991: 1  0C0A	91 BC					ACALL	NUM_RT
 1992: 1  0C0C	B5 02 03				CJNE	A,2,USINGX			;COMPARE A TO R2
 1993: 1				;

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 37



 Line  I  Addr  Code            Source

 1994: 1  0C0F	EA		USINGY:			MOV	A,R2
 1995: 1  0C10	81 CC					AJMP	Z7R7
 1996: 1				;
 1997: 1  0C12	50 FB		USINGX:			JNC	USINGY
 1998: 1				;
 1999: 1  0C14	CA		USING2:			XCH	A,R2
 2000: 1  0C15	C3					CLR	C
 2001: 1  0C16	9A					SUBB	A,R2
 2002: 1  0C17	CA					XCH	A,R2
 2003: 1  0C18	91 CC					ACALL	Z7R7				;OUTPUT ZEROS IF NEED TO
 2004: 1  0C1A	EA					MOV	A,R2
 2005: 1  0C1B	FF					MOV	R7,A
 2006: 1  0C1C	81 97					AJMP	OUTR0
 2007: 1				;
 2008: 1				; First, force exponential output, if need to
 2009: 1				;
 2010: 1  0C1E	EE		FREE:			MOV	A,R6				;GET THE EXPONENT
 2011: 1  0C1F	70 04					JNZ	FREE1				;IF ZERO, PRINT IT
 2012: 1  0C21	91 E6					ACALL	SOUT
 2013: 1  0C23	81 E2					AJMP	ZOUT
 2014: 1				;
 2015: 1  0C25	7B F0		FREE1:			MOV	R3,#0F0H			;IN CASE EXP NEEDED
 2016: 1  0C27	74 77					MOV	A,#80H-DIGIT-DIGIT-1
 2017: 1  0C29	2E					ADD	A,R6
 2018: 1  0C2A	40 21					JC	EXPOUT
 2019: 1  0C2C	94 F7					SUBB	A,#0F7H
 2020: 1  0C2E	40 1D					JC	EXPOUT
 2021: 1				;
 2022: 1				; Now, just print the number
 2023: 1				;
 2024: 1  0C30	91 D7					ACALL	SINOUT				;PRINT THE SIGN OF THE NUMBER
 2025: 1  0C32	91 B3					ACALL	NUM_LT				;GET THE NUMBER LEFT OF DP
 2026: 1  0C34	B4 08 02				CJNE	A,#8,FREE4
 2027: 1  0C37	81 97					AJMP	OUTR0
 2028: 1				;
 2029: 1  0C39	91 97		FREE4:			ACALL	OUTR0
 2030: 1  0C3B	91 A9					ACALL	ZTEST				;TEST FOR TRAILING ZEROS
 2031: 1  0C3D	60 57					JZ	U_RET				;DONE IF ALL TRAILING ZEROS
 2032: 1  0C3F	91 DE					ACALL	ROUT				;OUTPUT RADIX
 2033: 1				;
 2034: 1  0C41	7F 01		FREE2:			MOV	R7,#1				;OUTPUT ONE DIGIT
 2035: 1  0C43	91 97					ACALL	OUTR0
 2036: 1  0C45	70 4F					JNZ	U_RET
 2037: 1  0C47	91 A9					ACALL	ZTEST
 2038: 1  0C49	60 4B					JZ	U_RET
 2039: 1  0C4B	80 F4					SJMP	FREE2				;LOOP
 2040: 1				;
 2041: 1  0C4D	91 D7		EXPOUT:			ACALL	SINOUT				;PRINT THE SIGN
 2042: 1  0C4F	7F 01					MOV	R7,#1				;OUTPUT ONE CHARACTER
 2043: 1  0C51	91 97					ACALL	OUTR0
 2044: 1  0C53	91 DE					ACALL	ROUT				;OUTPUT RADIX
 2045: 1  0C55	EB					MOV	A,R3				;GET FORMAT
 2046: 1  0C56	54 0F					ANL	A,#0FH				;STRIP INDICATOR
 2047: 1  0C58	60 06					JZ	EXPOTX
 2048: 1				;
 2049: 1  0C5A	FF					MOV	R7,A				;OUTPUT THE NUMBER OF DIGITS

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 38



 Line  I  Addr  Code            Source

 2050: 1  0C5B	1F					DEC	R7				;ADJUST BECAUSE ONE CHAR ALREADY OUT
 2051: 1  0C5C	91 97					ACALL	OUTR0
 2052: 1  0C5E	80 02					SJMP	EXPOT4
 2053: 1				;
 2054: 1  0C60	91 41		EXPOTX:			ACALL	FREE2				;OUTPUT UNTIL TRAILING ZEROS
 2055: 1				;
 2056: 1  0C62	91 E6		EXPOT4:			ACALL	SOUT				;OUTPUT A SPACE
 2057: 1  0C64	7D 45					MOV	R5,#'E'
 2058: 1  0C66	91 E8					ACALL	SOUT1				;OUTPUT AN E
 2059: 1  0C68	EE					MOV	A,R6				;GET THE EXPONENT
 2060: 1  0C69	60 04					JZ	XOUT0				;EXIT IF ZERO
 2061: 1  0C6B	14					DEC	A				;ADJUST FOR THE DIGIT ALREADY OUTPUT
 2062: 1  0C6C	B4 80 05				CJNE	A,#80H,XOUT2			;SEE WHAT IT IS
 2063: 1				;
 2064: 1  0C6F	91 E6		XOUT0:			ACALL	SOUT
 2065: 1  0C71	E4					CLR	A
 2066: 1  0C72	80 0C					SJMP	XOUT4
 2067: 1				;
 2068: 1  0C74	40 06		XOUT2:			JC	XOUT3				;NEGATIVE EXPONENT
 2069: 1  0C76	7D 2B					MOV	R5,#'+'				;OUTPUT A PLUS SIGN
 2070: 1  0C78	91 E8					ACALL	SOUT1
 2071: 1  0C7A	80 04					SJMP	XOUT4
 2072: 1				;
 2073: 1  0C7C	91 DA		XOUT3:			ACALL	MOUT
 2074: 1  0C7E	F4					CPL	A				;FLIP BITS
 2075: 1  0C7F	04					INC	A				;BUMP
 2076: 1				;
 2077: 1  0C80	C2 E7		XOUT4:			CLR	ACC.7
 2078: 1  0C82	F8					MOV	R0,A
 2079: 1  0C83	7A 00					MOV	R2,#0
 2080: 1  0C85	79 27					MOV	R1,#LOW CONVT			;CONVERSION LOCATION
 2081: 1  0C87	7B 00					MOV	R3,#HIGH CONVT
 2082: 1  0C89	B1 0E					ACALL	CONVERT_BINARY_TO_ASCII_STRING
 2083: 1  0C8B	78 27					MOV	R0,#LOW CONVT			;NOW, OUTPUT EXPONENT
 2084: 1				;
 2085: 1  0C8D	E6		EXPOT5:			MOV	A,@R0				;GET THE CHARACTER
 2086: 1  0C8E	FD					MOV	R5,A				;OUTPUT IT
 2087: 1  0C8F	91 E8					ACALL	SOUT1
 2088: 1  0C91	08					INC	R0				;BUMP THE POINTER
 2089: 1  0C92	E8					MOV	A,R0				;GET THE POINTER
 2090: 1  0C93	B5 01 F7				CJNE	A,R1B0,EXPOT5			;LOOP
 2091: 1				;
 2092: 1  0C96	22		U_RET:			RET					;EXIT
 2093: 1				;
 2094: 1  0C97			OUTR0:	; Output the characters pointed to by R0, also bias ascii
 2095: 1				;
 2096: 1  0C97	EF					MOV	A,R7				;GET THE COUNTER
 2097: 1  0C98	60 0E					JZ	OUTR				;EXIT IF DONE
 2098: 1  0C9A	E6					MOV	A,@R0				;GET THE NUMBER
 2099: 1  0C9B	44 30					ORL	A,#30H				;ASCII BIAS
 2100: 1  0C9D	08					INC	R0				;BUMP POINTER AND COUNTER
 2101: 1  0C9E	1F					DEC	R7
 2102: 1  0C9F	FD					MOV	R5,A				;PUT CHARACTER IN OUTPUT REGISTER
 2103: 1  0CA0	91 E8					ACALL	SOUT1				;OUTPUT THE CHARACTER
 2104: 1  0CA2	E4					CLR	A				;JUST FOR TEST
 2105: 1  0CA3	B8 33 F1				CJNE	R0,#FP_NIB8+1,OUTR0

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 39



 Line  I  Addr  Code            Source

 2106: 1  0CA6	74 55					MOV	A,#55H				;KNOW WHERE EXIT OCCURED
 2107: 1				;
 2108: 1  0CA8	22		OUTR:			RET
 2109: 1				;
 2110: 1  0CA9	A9 00		ZTEST:			MOV	R1,R0B0				;GET POINTER REGISTER
 2111: 1				;
 2112: 1  0CAB	E7		ZT0:			MOV	A,@R1				;GET THE VALUE
 2113: 1  0CAC	70 04					JNZ	ZT1
 2114: 1  0CAE	09					INC	R1				;BUMP POINTER
 2115: 1  0CAF	B9 33 F9				CJNE	R1,#FP_NIB8+1,ZT0
 2116: 1				;
 2117: 1  0CB2	22		ZT1:			RET
 2118: 1				;
 2119: 1  0CB3	EE		NUM_LT:			MOV	A,R6				;GET EXPONENT
 2120: 1  0CB4	C3					CLR	C				;GET READY FOR SUBB
 2121: 1  0CB5	94 80					SUBB	A,#80H				;SUB EXPONENT BIAS
 2122: 1  0CB7	50 01					JNC	NL1				;OK IF NO CARRY
 2123: 1  0CB9	E4					CLR	A				;NO DIGITS LEFT
 2124: 1				;
 2125: 1  0CBA	FF		NL1:			MOV	R7,A				;SAVE THE COUNT
 2126: 1  0CBB	22					RET
 2127: 1				;
 2128: 1  0CBC	C3		NUM_RT:			CLR	C				;SUBB AGAIN
 2129: 1  0CBD	74 80					MOV	A,#80H				;EXPONENT BIAS
 2130: 1  0CBF	9E					SUBB	A,R6				;GET THE BIASED EXPONENT
 2131: 1  0CC0	50 01					JNC	NR1
 2132: 1  0CC2	E4					CLR	A
 2133: 1				;
 2134: 1  0CC3	22		NR1:			RET					;EXIT
 2135: 1				;
 2136: 1  0CC4	EF		SPACE7:			MOV	A,R7				;GET THE NUMBER OF SPACES
 2137: 1  0CC5	60 FC					JZ	NR1				;EXIT IF ZERO
 2138: 1  0CC7	91 E6					ACALL	SOUT				;OUTPUT A SPACE
 2139: 1  0CC9	1F					DEC	R7				;BUMP COUNTER
 2140: 1  0CCA	80 F8					SJMP	SPACE7				;LOOP
 2141: 1				;
 2142: 1  0CCC	FF		Z7R7:			MOV	R7,A
 2143: 1				;
 2144: 1  0CCD	EF		ZERO7:			MOV	A,R7				;GET COUNTER
 2145: 1  0CCE	60 F3					JZ	NR1				;EXIT IF ZERO
 2146: 1  0CD0	91 E2					ACALL	ZOUT				;OUTPUT A ZERO
 2147: 1  0CD2	1F					DEC	R7				;BUMP COUNTER
 2148: 1  0CD3	80 F8					SJMP	ZERO7				;LOOP
 2149: 1				;
 2150: 1  0CD5	91 C4		SS7:			ACALL	SPACE7
 2151: 1				;
 2152: 1  0CD7	EC		SINOUT:			MOV	A,R4				;GET THE SIGN
 2153: 1  0CD8	60 0C					JZ	SOUT				;OUTPUT A SPACE IF ZERO
 2154: 1				;
 2155: 1  0CDA	7D 2D		MOUT:			MOV	R5,#'-'
 2156: 1  0CDC	80 0A					SJMP	SOUT1				;OUTPUT A MINUS IF NOT
 2157: 1				;
 2158: 1  0CDE	7D 2E		ROUT:			MOV	R5,#'.'				;OUTPUT A RADIX
 2159: 1  0CE0	80 06					SJMP	SOUT1
 2160: 1				;
 2161: 1  0CE2	7D 30		ZOUT:			MOV	R5,#'0'				;OUTPUT A ZERO

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 40



 Line  I  Addr  Code            Source

 2162: 1  0CE4	80 02					SJMP	SOUT1
 2163: 1				;
 2164: 1  0CE6	7D 20		SOUT:			MOV	R5,#' '				;OUTPUT A SPACE
 2165: 1				;
 2166: 1  0CE8	A1 89		SOUT1:			AJMP	R5OUT
 2167: 1				;
 2168: 1				;
 2169: 1  0CEA	75 F0 0A	MULNUM10:		MOV	B,#10
 2170: 1				;
 2171: 1				;***************************************************************
 2172: 1				;
 2173: 1  0CED			MULNUM:	; Take the next digit in the acc (masked to 0FH)
 2174: 1				; accumulate in R3:R1
 2175: 1				;
 2176: 1				;***************************************************************
 2177: 1				;
 2178: 1  0CED	C0 E0					PUSH	ACC				;SAVE ACC
 2179: 1  0CEF	C0 F0					PUSH	B				;SAVE MULTIPLIER
 2180: 1  0CF1	E9					MOV	A,R1				;PUT LOW ORDER BITS IN ACC
 2181: 1  0CF2	A4					MUL	AB				;DO THE MULTIPLY
 2182: 1  0CF3	F9					MOV	R1,A				;PUT THE RESULT BACK
 2183: 1  0CF4	EB					MOV	A,R3				;GET THE HIGH ORDER BYTE
 2184: 1  0CF5	AB F0					MOV	R3,B				;SAVE THE OVERFLOW
 2185: 1  0CF7	D0 F0					POP	B				;GET THE MULTIPLIER
 2186: 1  0CF9	A4					MUL	AB				;DO IT
 2187: 1  0CFA	A2 D2					MOV	C,OV				;SAVE OVERFLOW IN F0
 2188: 1  0CFC	92 D5					MOV	F0,C
 2189: 1  0CFE	2B					ADD	A,R3				;ADD OVERFLOW TO HIGH RESULT
 2190: 1  0CFF	FB					MOV	R3,A				;PUT IT BACK
 2191: 1  0D00	D0 E0					POP	ACC				;GET THE ORIGINAL ACC BACK
 2192: 1  0D02	72 D5					ORL	C,F0				;OR CARRY AND OVERFLOW
 2193: 1  0D04	40 07					JC	MULX				;NO GOOD IF THE CARRY IS SET
 2194: 1				;
 2195: 1  0D06	54 0F		MUL11:			ANL	A,#0FH				;MASK OFF HIGH ORDER BITS
 2196: 1  0D08	29					ADD	A,R1				;NOW ADD THE ACC
 2197: 1  0D09	F9					MOV	R1,A				;PUT IT BACK
 2198: 1  0D0A	E4					CLR	A				;PROPAGATE THE CARRY
 2199: 1  0D0B	3B					ADDC	A,R3
 2200: 1  0D0C	FB					MOV	R3,A				;PUT IT BACK
 2201: 1				;
 2202: 1  0D0D	22		MULX:			RET					;EXIT WITH OR WITHOUT CARRY
 2203: 1				;
 2204: 1				;***************************************************************
 2205: 1				;
 2206: 1  0D0E			CONVERT_BINARY_TO_ASCII_STRING:
 2207: 1				;
 2208: 1				;R1 contains the address of the string
 2209: 1				;R0 contains the value to convert
 2210: 1				;DPTR, R7, R6, and ACC gets clobbered
 2211: 1				;
 2212: 1				;***************************************************************
 2213: 1				;
 2214: 1  0D0E	E4					CLR	A				;NO LEADING ZEROS
 2215: 1  0D0F	90 27 10				MOV	DPTR,#10000			;SUBTRACT 10000
 2216: 1  0D12	B1 2B					ACALL	RSUB				;DO THE SUBTRACTION
 2217: 1  0D14	90 03 E8				MOV	DPTR,#1000			;NOW 1000

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 41



 Line  I  Addr  Code            Source

 2218: 1  0D17	B1 2B					ACALL	RSUB
 2219: 1  0D19	90 00 64				MOV	DPTR,#100			;NOW 100
 2220: 1  0D1C	B1 2B					ACALL	RSUB
 2221: 1  0D1E	90 00 0A				MOV	DPTR,#10			;NOW 10
 2222: 1  0D21	B1 2B					ACALL	RSUB
 2223: 1  0D23	90 00 01				MOV	DPTR,#1				;NOW 1
 2224: 1  0D26	B1 2B					ACALL	RSUB
 2225: 1  0D28	60 20					JZ	RSUB2				;JUMP OVER RET
 2226: 1				;
 2227: 1  0D2A	22		RSUB_R:			RET
 2228: 1				;
 2229: 1  0D2B	7E FF		RSUB:			MOV	R6,#-1				;SET UP THE COUNTER
 2230: 1				;
 2231: 1  0D2D	0E		RSUB1:			INC	R6				;BUMP THE COUNTER
 2232: 1  0D2E	CA					XCH	A,R2				;DO A FAST COMPARE
 2233: 1						CMP	A,DPH
 2234+ 2  0D2F	B5 83 00	CJNE	A,DPH,$+3
 2235: 1  0D32	CA					XCH	A,R2
 2236: 1  0D33	40 12					JC	FAST_DONE
 2237: 1  0D35	C8					XCH	A,R0				;GET LOW BYTE
 2238: 1  0D36	95 82					SUBB	A,DPL				;SUBTRACT, CARRY IS CLEARED
 2239: 1  0D38	C8					XCH	A,R0				;PUT IT BACK
 2240: 1  0D39	CA					XCH	A,R2				;GET THE HIGH BYTE
 2241: 1  0D3A	95 83					SUBB	A,DPH				;ADD THE HIGH BYTE
 2242: 1  0D3C	CA					XCH	A,R2				;PUT IT BACK
 2243: 1  0D3D	50 EE					JNC	RSUB1				;LOOP UNTIL CARRY
 2244: 1				;
 2245: 1  0D3F	C8					XCH	A,R0
 2246: 1  0D40	25 82					ADD	A,DPL				;RESTORE R2:R0
 2247: 1  0D42	C8					XCH	A,R0
 2248: 1  0D43	CA					XCH	A,R2
 2249: 1  0D44	35 83					ADDC	A,DPH
 2250: 1  0D46	CA					XCH	A,R2
 2251: 1				;
 2252: 1  0D47			FAST_DONE:
 2253: 1				;
 2254: 1  0D47	4E					ORL	A,R6				;OR THE COUNT VALUE
 2255: 1  0D48	60 E0					JZ	RSUB_R				;RETURN IF ZERO
 2256: 1				;
 2257: 1  0D4A	74 30		RSUB2:			MOV	A,#'0'				;GET THE ASCII BIAS
 2258: 1  0D4C	2E					ADD	A,R6				;ADD THE COUNT
 2259: 1				;
 2260: 1  0D4D	F7		RSUB4:			MOV	@R1,A				;PLACE THE VALUE IN MEMORY
 2261: 1  0D4E	09					INC	R1
 2262: 1				;
 2263: 1  0D4F	22					RET					;EXIT
 2264: 1				;
 2265: 1				;***************************************************************
 2266: 1				;
 2267: 1  0D50			HEXOUT:	; Output the hex number in R3:R1, supress leading zeros, if set
 2268: 1				;
 2269: 1				;***************************************************************
 2270: 1				;
 2271: 1  0D50	91 E6					ACALL	SOUT				;OUTPUT A SPACE
 2272: 1  0D52	A2 36					MOV	C,ZSURP				;GET ZERO SUPPRESSION BIT
 2273: 1  0D54	92 33					MOV	ADD_IN,C

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 42



 Line  I  Addr  Code            Source

 2274: 1  0D56	EB					MOV	A,R3				;GET HIGH NIBBLE AND PRINT IT
 2275: 1  0D57	B1 73					ACALL	HOUTHI
 2276: 1  0D59	EB					MOV	A,R3
 2277: 1  0D5A	B1 74					ACALL	HOUTLO
 2278: 1				;
 2279: 1  0D5C	C2 33		HEX2X:			CLR	ADD_IN				;DON'T SUPPRESS ZEROS
 2280: 1  0D5E	E9					MOV	A,R1				;GET LOW NIBBLE AND PRINT IT
 2281: 1  0D5F	B1 73					ACALL	HOUTHI
 2282: 1  0D61	E9					MOV	A,R1
 2283: 1  0D62	B1 74					ACALL	HOUTLO
 2284: 1  0D64	7D 48					MOV	R5,#'H'				;OUTPUT H TO INDICATE HEX MODE
 2285: 1				;
 2286: 1  0D66	81 E8		SOUT_1:			AJMP	SOUT1
 2287: 1				;
 2288: 1  0D68	C2 33		HOUT1:			CLR	ADD_IN				;PRINTED SOMETHING, SO CLEAR ADD_IN
 2289: 1  0D6A	24 90					ADD	A,#90H				;CONVERT TO ASCII
 2290: 1  0D6C	D4					DA	A
 2291: 1  0D6D	34 40					ADDC	A,#40H
 2292: 1  0D6F	D4					DA	A				;GOT IT HERE
 2293: 1  0D70	FD					MOV	R5,A				;OUTPUT THE BYTE
 2294: 1  0D71	80 F3					SJMP	SOUT_1
 2295: 1				;
 2296: 1  0D73	C4		HOUTHI:			SWAP	A				;SWAP TO OUTPUT HIGH NIBBLE
 2297: 1				;
 2298: 1  0D74	54 0F		HOUTLO:			ANL	A,#0FH				;STRIP
 2299: 1  0D76	70 F0					JNZ	HOUT1				;PRINT IF NOT ZERO
 2300: 1  0D78	30 33 ED				JNB	ADD_IN,HOUT1			;OUTPUT A ZERO IF NOT SUPRESSED
 2301: 1  0D7B	22					RET
 2302: 1				;
 2303: 1				;
 2304: 1  0D7C			GET_DIGIT_CHECK:	; Get a character, then check for digit
 2305: 1				;
 2306: 1  0D7C	71 B5					ACALL	GET_R1_CHARACTER
 2307: 1				;
 2308: 1  0D7E			DIGIT_CHECK:	;CHECK FOR A VALID ASCII DIGIT, SET CARRY IF FOUND
 2309: 1				;
 2310: 1						CMP	A,#'9'+1			;SEE IF ASCII 9 OR LESS
 2311+ 2  0D7E	B4 3A 00	CJNE	A,#'9'+1,$+3
 2312: 1  0D81	40 01					JC	DC1
 2313: 1  0D83	22					RET
 2314: 1				;
 2315: 1  0D84			DC1:			CMP	A,#'0'				;SEE IF ASCII 0 OR GREATER
 2316+ 2  0D84	B4 30 00	CJNE	A,#'0',$+3
 2317: 1  0D87	B3					CPL	C
 2318: 1  0D88	22					RET
 2319: 1				;
 2320: 1
 2321: 1  0D89	C0 E0		R5OUT:			PUSH	ACC				; ME
 2322: 1  0D8B	C0 00					PUSH	00H
 2323: 1  0D8D	A8 50					MOV	R0,FPCHR_OUT
 2324: 1  0D8F	ED					MOV	A,R5				; ME
 2325: 1  0D90	F6					MOV	@R0,A
 2326: 1  0D91	05 50					INC	FPCHR_OUT
 2327: 1  0D93	D0 00					POP	00H
 2328: 1  0D95	D0 E0					POP	ACC				; ME
 2329: 1  0D97	22					RET

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 43



 Line  I  Addr  Code            Source

 2330: 1
 2331: 1  0D98	01 0E		SQ_ERR:			JMP	BADPRM				; me
 2332: 1
 2333: 1			; Pop the ARG STACK and check for overflow
 2334: 1  0D9A			INC_ASTKA:
 2335: 1  0D9A	74 06					MOV	A,#FP_NUMBER_SIZE		;number to pop
 2336: 1  0D9C	80 16					SJMP	SETREG1
 2337: 1
 2338: 1			;Push ARG STACK and check for underflow
 2339: 1  0D9E			DEC_ASTKA:
 2340: 1  0D9E	74 FA					MOV	A,#-FP_NUMBER_SIZE
 2341: 1  0DA0	25 24					ADD	A,ARG_STACK
 2342: 1						CMP	A,#0
 2343+ 2  0DA2	B4 00 00	CJNE	A,#0,$+3
 2344: 1  0DA5	40 28					JC	E4YY
 2345: 1  0DA7	F5 24					MOV	ARG_STACK,A
 2346: 1  0DA9	F9					MOV	R1,A
 2347: 1  0DAA	22		SRT:			RET
 2348: 1
 2349: 1  0DAB	B1 9A		POPAS:			ACALL	INC_ASTKA
 2350: 1  0DAD	A1 C6					AJMP	VARCOP				;COPY THE VARIABLE
 2351: 1
 2352: 1  0DAF	B1 9E		PUSHAS:			ACALL	DEC_ASTKA
 2353: 1  0DB1	A1 C6					AJMP	VARCOP
 2354: 1
 2355: 1  0DB3	E4		SETREG:			CLR	A				;DON'T POP ANYTHING
 2356: 1  0DB4	A8 24		SETREG1:		MOV	R0,ARG_STACK
 2357: 1  0DB6	28					ADD	A,R0
 2358: 1  0DB7	40 16					JC	E4YY
 2359: 1  0DB9	F5 24					MOV	ARG_STACK,A
 2360: 1  0DBB	E6					MOV	A,@R0
 2361: 1  0DBC	22		A_D:			RET
 2362: 1
 2363: 1			;Routine to copy bottom arg on stack to address in R1.
 2364: 1  0DBD	B1 B3		MOVAS:  		ACALL   SETREG				;SET UP R0
 2365: 1  0DBF	E6		M_C:			MOV	A,@R0				;READ THE VALUE
 2366: 1  0DC0	F7					MOV	@R1,A				;SAVE IT
 2367: 1  0DC1	08		        		INC     R0
 2368: 1  0DC2	09		        		INC     R1
 2369: 1  0DC3	DC FA		        		DJNZ    R4,M_C  	        	;LOOP
 2370: 1  0DC5	22					RET					;EXIT
 2371: 1
 2372: 1
 2373: 1			; VARCOP - Copy a variable from R0 to R1
 2374: 1  0DC6	7C 06		VARCOP:			MOV	R4,#FP_NUMBER_SIZE		;LOAD THE LOOP COUNTER
 2375: 1  0DC8	E6		V_C:			MOV	A,@R0				;READ THE VALUE
 2376: 1  0DC9	F7					MOV	@R1,A				;SAVE IT
 2377: 1  0DCA	18					DEC	R0
 2378: 1  0DCB	19					DEC	R1
 2379: 1  0DCC	DC FA					DJNZ	R4,V_C				;LOOP
 2380: 1  0DCE	22					RET					;EXIT
 2381: 1			;
 2382: 1  0DCF	90 0E 02	E4YY:			MOV	DPTR,#EXA
 2383: 1  0DD2	01 0D					JMP	PRTERR				; me
 2384: 1
 2385: 1				; integer operator - INT

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 44



 Line  I  Addr  Code            Source

 2386: 1  0DD4	B1 B3		AINT:			ACALL	SETREG				;SET UP THE REGISTERS, CLEAR CARRY
 2387: 1  0DD6	94 81					SUBB	A,#129				;SUBTRACT EXPONENT BIAS
 2388: 1  0DD8	50 07					JNC	AI1				;JUMP IF ACC > 81H
 2389: 1				;
 2390: 1				; Force the number to be a zero
 2391: 1				;
 2392: 1  0DDA	B1 9A					ACALL	INC_ASTKA			;BUMP THE STACK
 2393: 1				;
 2394: 1  0DDC	90 0E 0A	P_Z:			MOV	DPTR,#ZRO			;PUT ZERO ON THE STACK
 2395: 1  0DDF	A1 F6					AJMP	PUSHC
 2396: 1				;
 2397: 1  0DE1	94 07		AI1:			SUBB	A,#7
 2398: 1  0DE3	50 10					JNC	AI3
 2399: 1  0DE5	F4					CPL	A
 2400: 1  0DE6	04					INC	A
 2401: 1  0DE7	FB					MOV	R3,A
 2402: 1  0DE8	18					DEC	R0				;POINT AT SIGN
 2403: 1				;
 2404: 1  0DE9	18		AI2:			DEC	R0				;NOW AT LSB'S
 2405: 1  0DEA	E6					MOV	A,@R0				;READ BYTE
 2406: 1  0DEB	54 F0					ANL	A,#0F0H				;STRIP NIBBLE
 2407: 1  0DED	F6					MOV	@R0,A				;WRITE BYTE
 2408: 1  0DEE	DB 01					DJNZ	R3,AI21
 2409: 1  0DF0	22					RET
 2410: 1  0DF1	E4		AI21:			CLR	A
 2411: 1  0DF2	F6					MOV	@R0,A				;CLEAR THE LOCATION
 2412: 1  0DF3	DB F4					DJNZ	R3,AI2
 2413: 1  0DF5	22		AI3:			RET					;EXIT
 2414: 1				;
 2415: 1				; PUSHC - Push constant pointed by DPTR on to the arg stack
 2416: 1  0DF6	B1 9E		PUSHC:			ACALL	DEC_ASTKA
 2417: 1  0DF8	7B 06					MOV	R3,#FP_number_SIZe		;LOOP COUNTER
 2418: 1  0DFA	E4		PCL:			CLR	A				;SET UP A
 2419: 1  0DFB	93					MOVC	A,@A+DPTR			;LOAD IT
 2420: 1  0DFC	F7					MOV	@R1,A				;SAVE IT
 2421: 1  0DFD	A3					INC	DPTR				;BUMP POINTERS
 2422: 1  0DFE	19					DEC	R1
 2423: 1  0DFF	DB F9					DJNZ	R3,PCL				;LOOP
 2424: 1  0E01	22					RET					;EXIT
 2425: 1			;
 2426: 1
 2427: 1  0E02	41 2D 53 54	EXA:			DB	'A-STACK',0
       1  0E06	41 43 4B 00
 2428: 1  0E0A	00 00 00	ZRO:			DB	00h,00h,00h
 2429: 1  0E0D	00 00 00				DB	00h,00h,00h			;0.0000000
 2430: 1  0E10	81 00 00	FPONE:			DB 	81h,00h,00h
 2431: 1  0E13	00 00 10				DB	00h,00h,10h			;1.0000000
 2432: 1  0E16	81 00 00	FPTWO:			DB 	81h,00h,00h
 2433: 1  0E19	00 00 20				DB	00h,00h,20h			;2.0000000
 2434: 1  0E1C	81 00 27	FPPI:			DB	81h,00h,27h
 2435: 1  0E1F	59 41 31				DB	59h,41h,31h			;3.1415927
 2436: 1  0E22	77 00 00	FPCCAL:			DB	77h,00h,00h
 2437: 1  0E25	00 50 94				DB	00h,50h,94h			;1nF=1e-9
 2438: 1  0E28	8D 00 00	FPP:			DB	8Dh,00h,00h
 2439: 1  0E2B	00 00 10				DB	00h,00h,10h			;1e12
 2440: 1  0E2E	8A 00 00	FPN:			DB	8Ah,00h,00h

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 45



 Line  I  Addr  Code            Source

 2441: 1  0E31	00 00 10				DB	00h,00h,10h			;1e9
 2442: 1  0E34	87 00 00	FPU:			DB	87h,00h,00h
 2443: 1  0E37	00 00 10				DB	00h,00h,10h			;1e6
 2444: 1  0E3A	84 00 00	FPM:			DB	84h,00h,00h
 2445: 1  0E3D	00 00 10				DB	00h,00h,10h			;1e3
 2446:
 2447:						END
 2448:





                     register banks used:  ---

                     no errors




ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 46





	       L I S T   O F   S Y M B O L S
	       =============================


SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
??ASEM_51			  NUMBER    8051
??VERSION			  NUMBER    0130
AC				  BIT	      D6
ACC				  DATA	      E0
ADDIT				  CODE	    0361	 501
ADDLP				  CODE	    0878	1075
ADD_IN				  BIT	      33	  12
ADD_R				  CODE	    0876	1073
AI1				  CODE	    0DE1	2397
AI2				  CODE	    0DE9	2404
AI21				  CODE	    0DF1	2410
AI3				  CODE	    0DF5	2413
AINT				  CODE	    0DD4	2386
ARG1_EXP_IS_LARGER		  CODE	    08DD	1178
ARG1_EXP_IS_LARGER1		  CODE	    08DE	1181
ARG1_EXP_IS_LARGER2		  CODE	    08E1	1183
ARG_STACK			  NUMBER    0024	   9
A_D				  CODE	    0DBC	2361
B				  DATA	      F0
BADPRM				  CODE	    080E	 968
BIN2DEC				  CODE	    031F	 450
BIN2DEC1			  CODE	    0326	 453
BIN2DEC2			  CODE	    0328	 454
BIN2DEC3			  CODE	    033C	 469
BIN2DEC4			  CODE	    0345	 474
BINDEC				  CODE	    0375	 519
BOTH_PLUS			  CODE	    08E5	1191
CLOOP				  CODE	    08ED	1203
CMETER				  CODE	    0240	 332
CMETER1				  CODE	    0268	 355
CMETER2				  CODE	    027C	 363
CMP				  MACRO	        	 906
CONVERT_BINARY_TO_ASCII_STRING	  CODE	    0D0E	2206
CONVT				  NUMBER    0027	  14
CY				  BIT	      D7
DC1				  CODE	    0D84	2315
DEBOUNCEINT0			  CODE	    0088	 103
DEBOUNCEINT01			  CODE	    008C	 105
DECX				  CODE	    0B98	1880
DEC_ASTKA			  CODE	    0D9E	2339
DIGIT				  NUMBER    0004	  23
DIGIT_CHECK			  CODE	    0D7E	2308
DIV0				  CODE	    093C	1297
DIV3				  CODE	    0949	1306
DIV4				  CODE	    0956	1314
DIV5				  CODE	    0959	1317
DIV6				  CODE	    0961	1322
DIV7				  CODE	    0978	1344
DIV8				  CODE	    098D	1357
DONE_LOAD			  BIT	      53	  53

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 47



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
DPH				  DATA	      83
DPL				  DATA	      82
D_UNDER				  CODE	    0947	1304
E4YY				  CODE	    0DCF	2382
EA				  BIT	      AF
ES				  BIT	      AC
ET0				  BIT	      A9
ET1				  BIT	      AB
EX0				  BIT	      A8
EX1				  BIT	      AA
EXA				  CODE	    0E02	2427
EXPONENTS_EQUAL			  CODE	    08E2	1185
EXPOT4				  CODE	    0C62	2056
EXPOT5				  CODE	    0C8D	2085
EXPOTX				  CODE	    0C60	2054
EXPOUT				  CODE	    0C4D	2041
EXTI0				  CODE	    0003
EXTI1				  CODE	    0013
F0				  BIT	      D5
FAST_DONE			  CODE	    0D47	2252
FDT1				  CODE	    0BA9	1894
FDT2				  CODE	    0BB1	1898
FDTEST				  CODE	    0BA5	1891
FINISH1				  CODE	    0B6A	1846
FINISH2				  CODE	    0B7D	1862
FINISH_UP			  CODE	    0B7E	1864
FINISH_UP1			  CODE	    0B85	1869
FIRST_RADIX			  BIT	      52	  52
FLOATING_ADD			  CODE	    0816	 982
FLOATING_COMP			  CODE	    08C9	1152
FLOATING_DIV			  CODE	    092F	1282
FLOATING_INIT			  CODE	    0800	 957
FLOATING_MUL			  CODE	    08FA	1219
FLOATING_POINT_INPUT		  CODE	    0B18	1791
FLOATING_POINT_OUTPUT		  CODE	    0BC6	1935
FLOATING_SUB			  CODE	    080F	 972
FMUL0				  CODE	    08FF	1228
FMUL1				  CODE	    0901	1232
FMUL2				  CODE	    0913	1248
FMUL3				  CODE	    091C	1263
FMUL_OVER			  CODE	    090F	1242
FORMAT				  NUMBER    0025	  10
FOUND_RADIX			  BIT	      51	  51
FOV				  CODE	    0911	1246
FPC1				  CODE	    0A22	1530
FPCCAL				  CODE	    0E22	2436
FPCHR_OUT			  NUMBER    0050	  75
FPM				  CODE	    0E3A	2444
FPN				  CODE	    0E2E	2440
FPO1				  CODE	    0BDF	1962
FPO2				  CODE	    0BF2	1975
FPONE				  CODE	    0E10	2430
FPP				  CODE	    0E28	2438
FPPI				  CODE	    0E1C	2434
FPSTACK				  NUMBER    00FF	  84
FPTWO				  CODE	    0E16	2432

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 48



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
FPU				  CODE	    0E34	2442
FP_ACC1				  NUMBER    0035	  64
FP_ACC2				  NUMBER    0036	  65
FP_ACC3				  NUMBER    0037	  66
FP_ACC4				  NUMBER    0038	  67
FP_ACC5				  NUMBER    0039	  68
FP_ACC6				  NUMBER    003A	  69
FP_ACC7				  NUMBER    003B	  70
FP_ACC8				  NUMBER    003C	  71
FP_ACCC				  NUMBER    0034	  63
FP_ACCS				  NUMBER    003D	  72
FP_ACCX				  NUMBER    0033	  62
FP_CARRY			  NUMBER    002A	  42
FP_CLEAR			  CODE	    0A1F	1521
FP_DIG12			  NUMBER    002B	  43
FP_DIG34			  NUMBER    002C	  44
FP_DIG56			  NUMBER    002D	  45
FP_DIG78			  NUMBER    002E	  46
FP_EXP				  NUMBER    0030	  48
FP_NIB1				  NUMBER    002B	  54
FP_NIB2				  NUMBER    002C	  55
FP_NIB3				  NUMBER    002D	  56
FP_NIB4				  NUMBER    002E	  57
FP_NIB5				  NUMBER    002F	  58
FP_NIB6				  NUMBER    0030	  59
FP_NIB7				  NUMBER    0031	  60
FP_NIB8				  NUMBER    0032	  61
FP_NUMBER_SIZE			  NUMBER    0006	  22
FP_SIGN				  NUMBER    002F	  47
FP_STATUS			  NUMBER    0028	  40
FP_TEMP				  NUMBER    0029	  41
FREE				  CODE	    0C1E	2010
FREE1				  CODE	    0C25	2015
FREE2				  CODE	    0C41	2034
FREE4				  CODE	    0C39	2029
FREQUENCY			  CODE	    0146	 187
FREQUENCY1GHZ			  CODE	    0160	 202
FRQCOUNT			  CODE	    03EC	 612
FRQCOUNT1			  CODE	    0423	 640
FRQCOUNT2			  CODE	    0429	 643
FRQFORMAT			  CODE	    0438	 661
FRQFORMATDONE			  CODE	    0493	 709
FRQFORMATHZ			  CODE	    0481	 698
FRQFORMATHZ1			  CODE	    0484	 701
FRQFORMATKHZ			  CODE	    0463	 682
FRQFORMATKHZ1			  CODE	    046A	 686
FRQFORMATKHZ2			  CODE	    0471	 690
FRQFORMATMHZ1			  CODE	    044C	 670
FRQFORMATMHZ2			  CODE	    0453	 674
FRTEST				  CODE	    0BA2	1889
FSUB10				  CODE	    08C7	1148
FSUB5				  CODE	    0896	1107
FSUB6				  CODE	    08A1	1118
FSUB7				  CODE	    08A5	1121
FSUB8				  CODE	    08B0	1129
FSUB9				  CODE	    08B6	1136

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 49



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
GET_DIGIT_CHECK			  CODE	    0D7C	2304
GET_R1_CHARACTER		  CODE	    0BB5	1912
GT1				  CODE	    0B40	1821
GT11				  CODE	    0B48	1824
GT12				  CODE	    0B4B	1825
GT2				  CODE	    0B58	1834
GTEST				  CODE	    0B31	1814
HC1				  CODE	    0B13	1784
HEX2X				  CODE	    0D5C	2279
HEXDO1				  CODE	    0B07	1771
HEXDON				  CODE	    0B06	1769
HEXOUT				  CODE	    0D50	2267
HEXSC1				  CODE	    0AF5	1758
HEXSCAN				  CODE	    0AF3	1751
HEX_CHECK			  CODE	    0B0B	1776
HOUT1				  CODE	    0D68	2288
HOUTHI				  CODE	    0D73	2296
HOUTLO				  CODE	    0D74	2298
HS1				  CODE	    0B08	1773
IE				  DATA	      A8
IE0				  BIT	      89
IE0IRQ				  CODE	    0080	  98
IE1				  BIT	      8B
INC_AND_GET_R1_CHARACTER	  CODE	    0BB4	1908
INC_ASTKA			  CODE	    0D9A	2334
INC_FP_EXP			  CODE	    09DF	1444
INERR				  CODE	    0B9A	1882
INLOOP				  CODE	    0B26	1806
INLPIK				  CODE	    0B2E	1811
INT0				  BIT	      B2
INT1				  BIT	      B3
INTGRC				  BIT	      31	  11
INTMUL10			  CODE	    039D	 533
INTMUL2				  CODE	    03B5	 555
IP				  DATA	      B8
IT0				  BIT	      88
IT1				  BIT	      8A
LCCA				  NUMBER    007D	  80
LCCALC				  CODE	    01AC	 255
LCCB				  NUMBER    0085	  81
LCCT				  NUMBER    008D	  82
LCDCHROUT			  CODE	    04B4	 743
LCDCLEAR			  CODE	    04C8	 756
LCDCLEAR1			  CODE	    04CE	 759
LCDCLEARLINE			  CODE	    0515	 818
LCDCLEARLINE1			  CODE	    051B	 821
LCDCMDOUT			  CODE	    04A4	 732
LCDDELAY			  CODE	    0494	 719
LCDINIT				  CODE	    04FC	 804
LCDLINE				  NUMBER    0040	  74
LCDNIBOUT			  CODE	    049D	 726
LCDPRINTSTR			  CODE	    04D8	 768
LCDPRNTCSTR			  CODE	    04DF	 779
LCDPRNTCSTR1			  CODE	    04E3	 781
LCDPRNTCSTR2			  CODE	    04EC	 787
LCDSETADR			  CODE	    04D3	 764

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 50



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
LCF1				  NUMBER    0065	  77
LCF2				  NUMBER    006D	  78
LCF3				  NUMBER    0075	  79
LCMETERGETFRQ			  CODE	    0180	 225
LCMETERGETFRQ1			  CODE	    0198	 237
LCMETERINIT			  CODE	    01CB	 273
LCMETERINIT1			  CODE	    01D1	 276
LEFT				  CODE	    0A60	1590
LEFT1				  CODE	    0A62	1596
LEFT3				  CODE	    0A6A	1602
LEFT5				  CODE	    0A89	1629
LEFTL				  CODE	    0A75	1611
LMETER				  CODE	    02AB	 389
LMETER1				  CODE	    02CA	 408
LMETER2				  CODE	    02D2	 413
LMETER3				  CODE	    02F0	 424
LOAD1				  CODE	    0830	1018
LOAD2				  CODE	    0840	1030
LOAD3				  CODE	    0848	1037
LOAD4				  CODE	    0851	1047
LOAD5				  CODE	    0863	1061
LOAD7				  CODE	    0A00	1476
LOADR1				  CODE	    0AE9	1740
LOADR1_MANTISSA			  CODE	    0AE5	1731
LOAD_POINTERS			  CODE	    0ACB	1687
MCUSTACK			  NUMBER    0090	  83
MDES1				  CODE	    0AD4	1708
MNL0				  CODE	    0AAB	1661
MNL1				  CODE	    0ABD	1673
MNLOOP				  CODE	    0AA2	1653
MODE				  NUMBER    0051	  76
MODE0				  CODE	    00BD	 129
MODE1				  CODE	    00C7	 132
MODE2				  CODE	    00CF	 134
MODE3				  CODE	    00D7	 136
MODE4				  CODE	    00E1	 139
MODEMAX				  NUMBER    0004	  86
MOUT				  CODE	    0CDA	2155
MOVAS				  CODE	    0DBD	2364
MSIGN				  BIT	      78	  49
MUL11				  CODE	    0D06	2195
MULNUM				  CODE	    0CED	2173
MULNUM10			  CODE	    0CEA	2169
MULX				  CODE	    0D0D	2202
MUL_DIV_EXP_AND_SIGN		  CODE	    0AD2	1699
MUL_NIBBLE			  CODE	    0A98	1639
M_C				  CODE	    0DBF	2365
NL1				  CODE	    0CBA	2125
NR1				  CODE	    0CC3	2134
NUM_LT				  CODE	    0CB3	2119
NUM_RT				  CODE	    0CBC	2128
OUTR				  CODE	    0CA8	2108
OUTR0				  CODE	    0C97	2094
OV				  BIT	      D2
OVE1				  CODE	    0A05	1487
OVERFLOW			  NUMBER    0001	  27

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 51



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
OVERFLOW_AND_EXIT		  CODE	    0A01	1480
P				  BIT	      D0
P0				  DATA	      80
P1				  DATA	      90
P2				  DATA	      A0
P3				  DATA	      B0
PACK				  CODE	    0990	1361
PACK0				  CODE	    0999	1374
PACK1				  CODE	    099A	1376
PACK2				  CODE	    09A4	1384
PACK3				  CODE	    09B6	1398
PACK4				  CODE	    09BC	1405
PCL				  CODE	    0DFA	2418
PCON				  DATA	      87
PLOOP				  CODE	    09BE	1409
PLUS_MINUS_TEST			  CODE	    0BBB	1921
PMT0				  CODE	    0BC0	1925
PMT1				  CODE	    0BC5	1931
PMT2				  CODE	    0BC3	1927
PMT3				  CODE	    0BC4	1929
POPAS				  CODE	    0DAB	2349
POP_AND_EXIT			  CODE	    0828	1009
POSNM1				  CODE	    0B7A	1859
POSNUM				  CODE	    0B77	1856
PRET				  CODE	    09DE	1442
PRNTCDPTRLCD			  CODE	    04F1	 791
PRNTCDPTRLCD1			  CODE	    04FB	 797
PRTERR				  CODE	    080D	 967
PS				  BIT	      BC
PSW				  DATA	      D0
PT0				  BIT	      B9
PT1				  BIT	      BB
PUSHAS				  CODE	    0DAF	2352
PUSHC				  CODE	    0DF6	2416
PX0				  BIT	      B8
PX1				  BIT	      BA
P_Z				  CODE	    0DDC	2394
R0B0				  NUMBER    0000	  24
R1B0				  NUMBER    0001	  25
R5OUT				  CODE	    0D89	2321
RB8				  BIT	      9A
RD				  BIT	      B7
REN				  BIT	      9C
RESET				  CODE	    0000
RET_X				  CODE	    0B9C	1884
RI				  BIT	      98
RIGHT				  CODE	    0A28	1537
RIGHT1				  CODE	    0A2A	1544
RIGHT3				  CODE	    0A32	1552
RIGHT5				  CODE	    0A51	1578
RIGHTL				  CODE	    0A3E	1562
ROUT				  CODE	    0CDE	2158
RS0				  BIT	      D3
RS1				  BIT	      D4
RSUB				  CODE	    0D2B	2229
RSUB1				  CODE	    0D2D	2231

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 52



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
RSUB2				  CODE	    0D4A	2257
RSUB4				  CODE	    0D4D	2260
RSUB_R				  CODE	    0D2A	2227
RXD				  BIT	      B0
SBUF				  DATA	      99
SCON				  DATA	      98
SE1				  CODE	    0822	1003
SETMODE				  CODE	    0096	 111
SETMODE1			  CODE	    009C	 114
SETMODE2			  CODE	    00A7	 119
SETMODE3			  CODE	    00AC	 121
SETMODE4			  CODE	    00B1	 123
SETMODE5			  CODE	    00B6	 125
SETREG				  CODE	    0DB3	2355
SETREG1				  CODE	    0DB4	2356
SIGNS_DIFFERENT			  CODE	    08DA	1173
SINOUT				  CODE	    0CD7	2152
SINT				  CODE	    0023
SM0				  BIT	      9F
SM1				  BIT	      9E
SM2				  BIT	      9D
SOUT				  CODE	    0CE6	2164
SOUT1				  CODE	    0CE8	2166
SOUT_1				  CODE	    0D66	2286
SP				  DATA	      81
SPACE7				  CODE	    0CC4	2136
SQ_ERR				  CODE	    0D98	2331
SRT				  CODE	    0DAA	2347
SS7				  CODE	    0CD5	2150
START				  CODE	    0123	 164
START0				  CODE	    00F0	 144
START01				  CODE	    00F8	 149
START02				  CODE	    0121	 163
START1				  CODE	    012D	 170
START2				  CODE	    0133	 174
START3				  CODE	    0139	 178
START4				  CODE	    013F	 182
STDIG				  CODE	    0B8E	1875
STDIG1				  CODE	    0B9D	1886
STORE2				  CODE	    09D6	1434
STORE_ALIGN_TEST_AND_EXIT	  CODE	    09D0	1424
SUBIT				  CODE	    0348	 478
SUBLP				  CODE	    0881	1085
SWAP_AND_EXIT			  CODE	    081E	 996
T0				  BIT	      B4
T1				  BIT	      B5
TB8				  BIT	      9B
TCON				  DATA	      88
TF0				  BIT	      8D
TF1				  BIT	      8F
TH0				  DATA	      8C
TH1				  DATA	      8D
TI				  BIT	      99
TIMER0				  CODE	    000B
TIMER1				  CODE	    001B
TL0				  DATA	      8A

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 53



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
TL1				  DATA	      8B
TMOD				  DATA	      89
TR0				  BIT	      8C
TR1				  BIT	      8E
TXD				  BIT	      B1
ULOOP				  CODE	    09EF	1462
UNDERFLOW			  NUMBER    0000	  26
UNDERFLOW_AND_EXIT		  CODE	    0A12	1499
UNPACK_R0			  CODE	    09EB	1455
USING0				  CODE	    0BFC	1981
USING1				  CODE	    0C02	1986
USING2				  CODE	    0C14	1999
USINGX				  CODE	    0C12	1997
USINGY				  CODE	    0C0F	1994
U_RET				  CODE	    0C96	2092
VARCOP				  CODE	    0DC6	2374
V_C				  CODE	    0DC8	2375
WAIT				  CODE	    03E5	 600
WAIT1				  CODE	    03E6	 601
WAIT100				  CODE	    03DC	 594
WAIT1001			  CODE	    03E0	 596
WAIT256MS			  CODE	    03CF	 583
WAIT256MS1			  CODE	    03D5	 586
WAITASEC			  CODE	    03C2	 572
WAITASEC1			  CODE	    03C8	 575
WR				  BIT	      B6
XOUT0				  CODE	    0C6F	2064
XOUT2				  CODE	    0C74	2068
XOUT3				  CODE	    0C7C	2073
XOUT4				  CODE	    0C80	2077
XSIGN				  BIT	      50	  50
Z7R7				  CODE	    0CCC	2142
ZERO				  NUMBER    0002	  28
ZERO7				  CODE	    0CCD	2144
ZERO_AND_EXIT			  CODE	    0A18	1510
ZERO_DIVIDE			  NUMBER    0003	  29
ZOUT				  CODE	    0CE2	2161
ZRO				  CODE	    0E0A	2428
ZSURP				  BIT	      36	  13
ZT0				  CODE	    0CAB	2112
ZT1				  CODE	    0CB2	2117
ZTEST				  CODE	    0CA9	2110
