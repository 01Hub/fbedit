
C:\STM32F4\MyProjects\R7_FrequencyCounter\stm32f4xx_gpio.o:     file format elf32-littlearm
C:\STM32F4\MyProjects\R7_FrequencyCounter\stm32f4xx_gpio.o


Disassembly of section .text.GPIO_DeInit:

00000000 <GPIO_DeInit>:
GPIO_DeInit():
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:121
  * @note   By default, The GPIO pins are configured in input floating mode (except JTAG pins).
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
   0:	b508      	push	{r3, lr}
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:125
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
   2:	f04f 0300 	mov.w	r3, #0
   6:	f2c4 0302 	movt	r3, #16386	; 0x4002
   a:	4298      	cmp	r0, r3
   c:	d10b      	bne.n	26 <GPIO_DeInit+0x26>
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:127
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
   e:	f04f 0001 	mov.w	r0, #1
  12:	4601      	mov	r1, r0
  14:	f7ff fffe 	bl	0 <RCC_AHB1PeriphResetCmd>
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:128
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
  18:	f04f 0001 	mov.w	r0, #1
  1c:	f04f 0100 	mov.w	r1, #0
  20:	f7ff fffe 	bl	0 <RCC_AHB1PeriphResetCmd>
  24:	bd08      	pop	{r3, pc}
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:130
  }
  else if (GPIOx == GPIOB)
  26:	f44f 6380 	mov.w	r3, #1024	; 0x400
  2a:	f2c4 0302 	movt	r3, #16386	; 0x4002
  2e:	4298      	cmp	r0, r3
  30:	d10c      	bne.n	4c <GPIO_DeInit+0x4c>
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:132
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
  32:	f04f 0002 	mov.w	r0, #2
  36:	f04f 0101 	mov.w	r1, #1
  3a:	f7ff fffe 	bl	0 <RCC_AHB1PeriphResetCmd>
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:133
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
  3e:	f04f 0002 	mov.w	r0, #2
  42:	f04f 0100 	mov.w	r1, #0
  46:	f7ff fffe 	bl	0 <RCC_AHB1PeriphResetCmd>
  4a:	bd08      	pop	{r3, pc}
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:135
  }
  else if (GPIOx == GPIOC)
  4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  50:	f2c4 0302 	movt	r3, #16386	; 0x4002
  54:	4298      	cmp	r0, r3
  56:	d10c      	bne.n	72 <GPIO_DeInit+0x72>
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:137
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
  58:	f04f 0004 	mov.w	r0, #4
  5c:	f04f 0101 	mov.w	r1, #1
  60:	f7ff fffe 	bl	0 <RCC_AHB1PeriphResetCmd>
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:138
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
  64:	f04f 0004 	mov.w	r0, #4
  68:	f04f 0100 	mov.w	r1, #0
  6c:	f7ff fffe 	bl	0 <RCC_AHB1PeriphResetCmd>
  70:	bd08      	pop	{r3, pc}
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:140
  }
  else if (GPIOx == GPIOD)
  72:	f44f 6340 	mov.w	r3, #3072	; 0xc00
  76:	f2c4 0302 	movt	r3, #16386	; 0x4002
  7a:	4298      	cmp	r0, r3
  7c:	d10c      	bne.n	98 <GPIO_DeInit+0x98>
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:142
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
  7e:	f04f 0008 	mov.w	r0, #8
  82:	f04f 0101 	mov.w	r1, #1
  86:	f7ff fffe 	bl	0 <RCC_AHB1PeriphResetCmd>
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:143
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
  8a:	f04f 0008 	mov.w	r0, #8
  8e:	f04f 0100 	mov.w	r1, #0
  92:	f7ff fffe 	bl	0 <RCC_AHB1PeriphResetCmd>
  96:	bd08      	pop	{r3, pc}
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:145
  }
  else if (GPIOx == GPIOE)
  98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
  a0:	4298      	cmp	r0, r3
  a2:	d10c      	bne.n	be <GPIO_DeInit+0xbe>
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:147
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
  a4:	f04f 0010 	mov.w	r0, #16
  a8:	f04f 0101 	mov.w	r1, #1
  ac:	f7ff fffe 	bl	0 <RCC_AHB1PeriphResetCmd>
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:148
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
  b0:	f04f 0010 	mov.w	r0, #16
  b4:	f04f 0100 	mov.w	r1, #0
  b8:	f7ff fffe 	bl	0 <RCC_AHB1PeriphResetCmd>
  bc:	bd08      	pop	{r3, pc}
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:150
  }
  else if (GPIOx == GPIOF)
  be:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  c2:	f2c4 0302 	movt	r3, #16386	; 0x4002
  c6:	4298      	cmp	r0, r3
  c8:	d10c      	bne.n	e4 <GPIO_DeInit+0xe4>
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:152
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
  ca:	f04f 0020 	mov.w	r0, #32
  ce:	f04f 0101 	mov.w	r1, #1
  d2:	f7ff fffe 	bl	0 <RCC_AHB1PeriphResetCmd>
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:153
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
  d6:	f04f 0020 	mov.w	r0, #32
  da:	f04f 0100 	mov.w	r1, #0
  de:	f7ff fffe 	bl	0 <RCC_AHB1PeriphResetCmd>
  e2:	bd08      	pop	{r3, pc}
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:155
  }
  else if (GPIOx == GPIOG)
  e4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
  e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
  ec:	4298      	cmp	r0, r3
  ee:	d10c      	bne.n	10a <GPIO_DeInit+0x10a>
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:157
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
  f0:	f04f 0040 	mov.w	r0, #64	; 0x40
  f4:	f04f 0101 	mov.w	r1, #1
  f8:	f7ff fffe 	bl	0 <RCC_AHB1PeriphResetCmd>
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:158
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
  fc:	f04f 0040 	mov.w	r0, #64	; 0x40
 100:	f04f 0100 	mov.w	r1, #0
 104:	f7ff fffe 	bl	0 <RCC_AHB1PeriphResetCmd>
 108:	bd08      	pop	{r3, pc}
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:160
  }
  else if (GPIOx == GPIOH)
 10a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 10e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 112:	4298      	cmp	r0, r3
 114:	d10c      	bne.n	130 <GPIO_DeInit+0x130>
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:162
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 116:	f04f 0080 	mov.w	r0, #128	; 0x80
 11a:	f04f 0101 	mov.w	r1, #1
 11e:	f7ff fffe 	bl	0 <RCC_AHB1PeriphResetCmd>
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:163
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 122:	f04f 0080 	mov.w	r0, #128	; 0x80
 126:	f04f 0100 	mov.w	r1, #0
 12a:	f7ff fffe 	bl	0 <RCC_AHB1PeriphResetCmd>
 12e:	bd08      	pop	{r3, pc}
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:167
  }
  else
  {
    if (GPIOx == GPIOI)
 130:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 134:	f2c4 0302 	movt	r3, #16386	; 0x4002
 138:	4298      	cmp	r0, r3
 13a:	d10b      	bne.n	154 <GPIO_DeInit+0x154>
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:169
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 13c:	f44f 7080 	mov.w	r0, #256	; 0x100
 140:	f04f 0101 	mov.w	r1, #1
 144:	f7ff fffe 	bl	0 <RCC_AHB1PeriphResetCmd>
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:170
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 148:	f44f 7080 	mov.w	r0, #256	; 0x100
 14c:	f04f 0100 	mov.w	r1, #0
 150:	f7ff fffe 	bl	0 <RCC_AHB1PeriphResetCmd>
 154:	bd08      	pop	{r3, pc}
 156:	bf00      	nop

Disassembly of section .text.GPIO_Init:

00000000 <GPIO_Init>:
GPIO_Init():
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:183
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
   0:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
   4:	f04f 0200 	mov.w	r2, #0
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:194
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
   8:	4613      	mov	r3, r2
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:196
  {
    pos = ((uint32_t)0x01) << pinpos;
   a:	f04f 0701 	mov.w	r7, #1
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:202
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
   e:	f04f 0c03 	mov.w	ip, #3
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:194
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  12:	461e      	mov	r6, r3
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:196
  {
    pos = ((uint32_t)0x01) << pinpos;
  14:	fa07 f403 	lsl.w	r4, r7, r3
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:198
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
  18:	680d      	ldr	r5, [r1, #0]
  1a:	ea04 0505 	and.w	r5, r4, r5
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:200

    if (currentpin == pos)
  1e:	42a5      	cmp	r5, r4
  20:	d143      	bne.n	aa <GPIO_Init+0xaa>
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:202
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
  22:	f8d0 9000 	ldr.w	r9, [r0]
  26:	4690      	mov	r8, r2
  28:	fa0c f402 	lsl.w	r4, ip, r2
  2c:	ea6f 0404 	mvn.w	r4, r4
  30:	ea04 0909 	and.w	r9, r4, r9
  34:	f8c0 9000 	str.w	r9, [r0]
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:203
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
  38:	f8d0 a000 	ldr.w	sl, [r0]
  3c:	f891 9004 	ldrb.w	r9, [r1, #4]
  40:	fa09 f902 	lsl.w	r9, r9, r2
  44:	ea49 090a 	orr.w	r9, r9, sl
  48:	f8c0 9000 	str.w	r9, [r0]
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:205

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
  4c:	f891 9004 	ldrb.w	r9, [r1, #4]
  50:	f109 39ff 	add.w	r9, r9, #4294967295
  54:	fa5f f989 	uxtb.w	r9, r9
  58:	f1b9 0f01 	cmp.w	r9, #1
  5c:	d81c      	bhi.n	98 <GPIO_Init+0x98>
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:211
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
  5e:	f8d0 9008 	ldr.w	r9, [r0, #8]
  62:	ea04 0909 	and.w	r9, r4, r9
  66:	f8c0 9008 	str.w	r9, [r0, #8]
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:212
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
  6a:	f8d0 a008 	ldr.w	sl, [r0, #8]
  6e:	f891 9005 	ldrb.w	r9, [r1, #5]
  72:	fa09 f902 	lsl.w	r9, r9, r2
  76:	ea49 090a 	orr.w	r9, r9, sl
  7a:	f8c0 9008 	str.w	r9, [r0, #8]
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:218

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
  7e:	f8d0 9004 	ldr.w	r9, [r0, #4]
  82:	ea29 0505 	bic.w	r5, r9, r5
  86:	6045      	str	r5, [r0, #4]
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:219
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
  88:	6845      	ldr	r5, [r0, #4]
  8a:	f891 9006 	ldrb.w	r9, [r1, #6]
  8e:	fa09 f603 	lsl.w	r6, r9, r3
  92:	b2b6      	uxth	r6, r6
  94:	432e      	orrs	r6, r5
  96:	6046      	str	r6, [r0, #4]
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:223
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
  98:	68c5      	ldr	r5, [r0, #12]
  9a:	402c      	ands	r4, r5
  9c:	60c4      	str	r4, [r0, #12]
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:224
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
  9e:	68c5      	ldr	r5, [r0, #12]
  a0:	79cc      	ldrb	r4, [r1, #7]
  a2:	fa04 f408 	lsl.w	r4, r4, r8
  a6:	432c      	orrs	r4, r5
  a8:	60c4      	str	r4, [r0, #12]
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:194
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  aa:	f103 0301 	add.w	r3, r3, #1
  ae:	f102 0202 	add.w	r2, r2, #2
  b2:	2b10      	cmp	r3, #16
  b4:	d1ad      	bne.n	12 <GPIO_Init+0x12>
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:227
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
  b6:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
  ba:	4770      	bx	lr

Disassembly of section .text.GPIO_StructInit:

00000000 <GPIO_StructInit>:
GPIO_StructInit():
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:237
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
   0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   4:	6003      	str	r3, [r0, #0]
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:238
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
   6:	f04f 0300 	mov.w	r3, #0
   a:	7103      	strb	r3, [r0, #4]
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:239
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
   c:	7143      	strb	r3, [r0, #5]
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:240
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
   e:	7183      	strb	r3, [r0, #6]
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:241
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
  10:	71c3      	strb	r3, [r0, #7]
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:242
}
  12:	4770      	bx	lr

Disassembly of section .text.GPIO_PinLockConfig:

00000000 <GPIO_PinLockConfig>:
GPIO_PinLockConfig():
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:256
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
   0:	b082      	sub	sp, #8
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:257
  __IO uint32_t tmp = 0x00010000;
   2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   6:	9301      	str	r3, [sp, #4]
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:263

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
   8:	9b01      	ldr	r3, [sp, #4]
   a:	ea41 0303 	orr.w	r3, r1, r3
   e:	9301      	str	r3, [sp, #4]
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:265
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
  10:	9b01      	ldr	r3, [sp, #4]
  12:	61c3      	str	r3, [r0, #28]
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:267
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
  14:	61c1      	str	r1, [r0, #28]
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:269
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
  16:	9b01      	ldr	r3, [sp, #4]
  18:	61c3      	str	r3, [r0, #28]
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:271
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
  1a:	69c3      	ldr	r3, [r0, #28]
  1c:	9301      	str	r3, [sp, #4]
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:273
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
  1e:	69c3      	ldr	r3, [r0, #28]
  20:	9301      	str	r3, [sp, #4]
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:274
}
  22:	b002      	add	sp, #8
  24:	4770      	bx	lr
  26:	bf00      	nop

Disassembly of section .text.GPIO_ReadInputDataBit:

00000000 <GPIO_ReadInputDataBit>:
GPIO_ReadInputDataBit():
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:307

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
   0:	6903      	ldr	r3, [r0, #16]
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:309
  {
    bitstatus = (uint8_t)Bit_SET;
   2:	4219      	tst	r1, r3
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:316
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
   4:	bf0c      	ite	eq
   6:	2000      	moveq	r0, #0
   8:	2001      	movne	r0, #1
   a:	4770      	bx	lr

Disassembly of section .text.GPIO_ReadInputData:

00000000 <GPIO_ReadInputData>:
GPIO_ReadInputData():
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:328
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
   0:	6900      	ldr	r0, [r0, #16]
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:329
}
   2:	b280      	uxth	r0, r0
   4:	4770      	bx	lr
   6:	bf00      	nop

Disassembly of section .text.GPIO_ReadOutputDataBit:

00000000 <GPIO_ReadOutputDataBit>:
GPIO_ReadOutputDataBit():
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:346

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
   0:	6943      	ldr	r3, [r0, #20]
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:348
  {
    bitstatus = (uint8_t)Bit_SET;
   2:	4219      	tst	r1, r3
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:355
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
   4:	bf0c      	ite	eq
   6:	2000      	moveq	r0, #0
   8:	2001      	movne	r0, #1
   a:	4770      	bx	lr

Disassembly of section .text.GPIO_ReadOutputData:

00000000 <GPIO_ReadOutputData>:
GPIO_ReadOutputData():
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:367
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
   0:	6940      	ldr	r0, [r0, #20]
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:368
}
   2:	b280      	uxth	r0, r0
   4:	4770      	bx	lr
   6:	bf00      	nop

Disassembly of section .text.GPIO_SetBits:

00000000 <GPIO_SetBits>:
GPIO_SetBits():
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:386
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
   0:	8301      	strh	r1, [r0, #24]
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:387
}
   2:	4770      	bx	lr

Disassembly of section .text.GPIO_ResetBits:

00000000 <GPIO_ResetBits>:
GPIO_ResetBits():
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:405
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
   0:	8341      	strh	r1, [r0, #26]
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:406
}
   2:	4770      	bx	lr

Disassembly of section .text.GPIO_WriteBit:

00000000 <GPIO_WriteBit>:
GPIO_WriteBit():
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:426
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
   0:	b10a      	cbz	r2, 6 <GPIO_WriteBit+0x6>
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:428
  {
    GPIOx->BSRRL = GPIO_Pin;
   2:	8301      	strh	r1, [r0, #24]
   4:	4770      	bx	lr
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:432
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
   6:	8341      	strh	r1, [r0, #26]
   8:	4770      	bx	lr
   a:	bf00      	nop

Disassembly of section .text.GPIO_Write:

00000000 <GPIO_Write>:
GPIO_Write():
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:447
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
   0:	6141      	str	r1, [r0, #20]
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:448
}
   2:	4770      	bx	lr

Disassembly of section .text.GPIO_ToggleBits:

00000000 <GPIO_ToggleBits>:
GPIO_ToggleBits():
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:461
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
   0:	6943      	ldr	r3, [r0, #20]
   2:	ea81 0303 	eor.w	r3, r1, r3
   6:	6143      	str	r3, [r0, #20]
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:462
}
   8:	4770      	bx	lr
   a:	bf00      	nop

Disassembly of section .text.GPIO_PinAFConfig:

00000000 <GPIO_PinAFConfig>:
GPIO_PinAFConfig():
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:530
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
   0:	b430      	push	{r4, r5}
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:539
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
   2:	f001 0307 	and.w	r3, r1, #7
   6:	ea4f 0383 	mov.w	r3, r3, lsl #2
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:540
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
   a:	ea4f 01d1 	mov.w	r1, r1, lsr #3
   e:	f101 0108 	add.w	r1, r1, #8
  12:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
  16:	f04f 040f 	mov.w	r4, #15
  1a:	fa04 f403 	lsl.w	r4, r4, r3
  1e:	ea25 0404 	bic.w	r4, r5, r4
  22:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:541
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
  26:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:539
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  2a:	fa02 f303 	lsl.w	r3, r2, r3
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:541
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
  2e:	ea43 0404 	orr.w	r4, r3, r4
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:542
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
  32:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
C:\STM32F4\MyProjects\R7_FrequencyCounter/stm32f4xx_gpio.c:543
}
  36:	bc30      	pop	{r4, r5}
  38:	4770      	bx	lr
  3a:	bf00      	nop
